
ledist.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a60  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004c28  08004c28  00014c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c48  08004c48  000201a8  2**0
                  CONTENTS
  4 .ARM          00000008  08004c48  08004c48  00014c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c50  08004c50  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c50  08004c50  00014c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000068  08004cc0  00020068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000108  08004d60  00020108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000083c  200001a8  08004e00  000201a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200009e4  08004e00  000209e4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 15 .debug_info   00016091  00000000  00000000  0002021b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000031fc  00000000  00000000  000362ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001368  00000000  00000000  000394a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000ef9  00000000  00000000  0003a810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002c7d0  00000000  00000000  0003b709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001b340  00000000  00000000  00067ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fdb16  00000000  00000000  00083219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005714  00000000  00000000  00180d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  00186444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001a8 	.word	0x200001a8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004c10 	.word	0x08004c10

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001ac 	.word	0x200001ac
 8000204:	08004c10 	.word	0x08004c10

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000508:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <MX_ETH_Init+0x84>)
 800050a:	4a20      	ldr	r2, [pc, #128]	; (800058c <MX_ETH_Init+0x88>)
 800050c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800050e:	4b20      	ldr	r3, [pc, #128]	; (8000590 <MX_ETH_Init+0x8c>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000514:	4b1e      	ldr	r3, [pc, #120]	; (8000590 <MX_ETH_Init+0x8c>)
 8000516:	2280      	movs	r2, #128	; 0x80
 8000518:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800051a:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <MX_ETH_Init+0x8c>)
 800051c:	22e1      	movs	r2, #225	; 0xe1
 800051e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000520:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <MX_ETH_Init+0x8c>)
 8000522:	2200      	movs	r2, #0
 8000524:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000526:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <MX_ETH_Init+0x8c>)
 8000528:	2200      	movs	r2, #0
 800052a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <MX_ETH_Init+0x8c>)
 800052e:	2200      	movs	r2, #0
 8000530:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <MX_ETH_Init+0x84>)
 8000534:	4a16      	ldr	r2, [pc, #88]	; (8000590 <MX_ETH_Init+0x8c>)
 8000536:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000538:	4b13      	ldr	r3, [pc, #76]	; (8000588 <MX_ETH_Init+0x84>)
 800053a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800053e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <MX_ETH_Init+0x84>)
 8000542:	4a14      	ldr	r2, [pc, #80]	; (8000594 <MX_ETH_Init+0x90>)
 8000544:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000546:	4b10      	ldr	r3, [pc, #64]	; (8000588 <MX_ETH_Init+0x84>)
 8000548:	4a13      	ldr	r2, [pc, #76]	; (8000598 <MX_ETH_Init+0x94>)
 800054a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800054c:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <MX_ETH_Init+0x84>)
 800054e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000552:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000554:	480c      	ldr	r0, [pc, #48]	; (8000588 <MX_ETH_Init+0x84>)
 8000556:	f000 fe21 	bl	800119c <HAL_ETH_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000560:	f000 f9f4 	bl	800094c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000564:	2238      	movs	r2, #56	; 0x38
 8000566:	2100      	movs	r1, #0
 8000568:	480c      	ldr	r0, [pc, #48]	; (800059c <MX_ETH_Init+0x98>)
 800056a:	f004 f89b 	bl	80046a4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <MX_ETH_Init+0x98>)
 8000570:	2221      	movs	r2, #33	; 0x21
 8000572:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_ETH_Init+0x98>)
 8000576:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800057a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <MX_ETH_Init+0x98>)
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	200001fc 	.word	0x200001fc
 800058c:	40028000 	.word	0x40028000
 8000590:	200002ac 	.word	0x200002ac
 8000594:	20000108 	.word	0x20000108
 8000598:	20000068 	.word	0x20000068
 800059c:	200001c4 	.word	0x200001c4

080005a0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08e      	sub	sp, #56	; 0x38
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a4e      	ldr	r2, [pc, #312]	; (80006f8 <HAL_ETH_MspInit+0x158>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	f040 8096 	bne.w	80006f0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80005c4:	4b4d      	ldr	r3, [pc, #308]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c8:	4a4c      	ldr	r2, [pc, #304]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ce:	6313      	str	r3, [r2, #48]	; 0x30
 80005d0:	4b4a      	ldr	r3, [pc, #296]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005d8:	623b      	str	r3, [r7, #32]
 80005da:	6a3b      	ldr	r3, [r7, #32]
 80005dc:	4b47      	ldr	r3, [pc, #284]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e0:	4a46      	ldr	r2, [pc, #280]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005e6:	6313      	str	r3, [r2, #48]	; 0x30
 80005e8:	4b44      	ldr	r3, [pc, #272]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80005f0:	61fb      	str	r3, [r7, #28]
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	4b41      	ldr	r3, [pc, #260]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f8:	4a40      	ldr	r2, [pc, #256]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80005fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000600:	4b3e      	ldr	r3, [pc, #248]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000608:	61bb      	str	r3, [r7, #24]
 800060a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800060c:	4b3b      	ldr	r3, [pc, #236]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000610:	4a3a      	ldr	r2, [pc, #232]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 8000612:	f043 0304 	orr.w	r3, r3, #4
 8000616:	6313      	str	r3, [r2, #48]	; 0x30
 8000618:	4b38      	ldr	r3, [pc, #224]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000624:	4b35      	ldr	r3, [pc, #212]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	4a34      	ldr	r2, [pc, #208]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	6313      	str	r3, [r2, #48]	; 0x30
 8000630:	4b32      	ldr	r3, [pc, #200]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 8000632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800063c:	4b2f      	ldr	r3, [pc, #188]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000640:	4a2e      	ldr	r2, [pc, #184]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 8000642:	f043 0302 	orr.w	r3, r3, #2
 8000646:	6313      	str	r3, [r2, #48]	; 0x30
 8000648:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064c:	f003 0302 	and.w	r3, r3, #2
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000654:	4b29      	ldr	r3, [pc, #164]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 8000656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000658:	4a28      	ldr	r2, [pc, #160]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 800065a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800065e:	6313      	str	r3, [r2, #48]	; 0x30
 8000660:	4b26      	ldr	r3, [pc, #152]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800066c:	2332      	movs	r3, #50	; 0x32
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000670:	2302      	movs	r3, #2
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000678:	2303      	movs	r3, #3
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800067c:	230b      	movs	r3, #11
 800067e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000684:	4619      	mov	r1, r3
 8000686:	481e      	ldr	r0, [pc, #120]	; (8000700 <HAL_ETH_MspInit+0x160>)
 8000688:	f001 f8ae 	bl	80017e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800068c:	2386      	movs	r3, #134	; 0x86
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000698:	2303      	movs	r3, #3
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800069c:	230b      	movs	r3, #11
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a4:	4619      	mov	r1, r3
 80006a6:	4817      	ldr	r0, [pc, #92]	; (8000704 <HAL_ETH_MspInit+0x164>)
 80006a8:	f001 f89e 	bl	80017e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ba:	2303      	movs	r3, #3
 80006bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006be:	230b      	movs	r3, #11
 80006c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c6:	4619      	mov	r1, r3
 80006c8:	480f      	ldr	r0, [pc, #60]	; (8000708 <HAL_ETH_MspInit+0x168>)
 80006ca:	f001 f88d 	bl	80017e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80006ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d4:	2302      	movs	r3, #2
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006e0:	230b      	movs	r3, #11
 80006e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e8:	4619      	mov	r1, r3
 80006ea:	4808      	ldr	r0, [pc, #32]	; (800070c <HAL_ETH_MspInit+0x16c>)
 80006ec:	f001 f87c 	bl	80017e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80006f0:	bf00      	nop
 80006f2:	3738      	adds	r7, #56	; 0x38
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40028000 	.word	0x40028000
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020800 	.word	0x40020800
 8000704:	40020000 	.word	0x40020000
 8000708:	40020400 	.word	0x40020400
 800070c:	40021800 	.word	0x40021800

08000710 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08c      	sub	sp, #48	; 0x30
 8000714:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	4b47      	ldr	r3, [pc, #284]	; (8000844 <MX_GPIO_Init+0x134>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a46      	ldr	r2, [pc, #280]	; (8000844 <MX_GPIO_Init+0x134>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b44      	ldr	r3, [pc, #272]	; (8000844 <MX_GPIO_Init+0x134>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	61bb      	str	r3, [r7, #24]
 800073c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	4b41      	ldr	r3, [pc, #260]	; (8000844 <MX_GPIO_Init+0x134>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a40      	ldr	r2, [pc, #256]	; (8000844 <MX_GPIO_Init+0x134>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b3e      	ldr	r3, [pc, #248]	; (8000844 <MX_GPIO_Init+0x134>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b3b      	ldr	r3, [pc, #236]	; (8000844 <MX_GPIO_Init+0x134>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a3a      	ldr	r2, [pc, #232]	; (8000844 <MX_GPIO_Init+0x134>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b38      	ldr	r3, [pc, #224]	; (8000844 <MX_GPIO_Init+0x134>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b35      	ldr	r3, [pc, #212]	; (8000844 <MX_GPIO_Init+0x134>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a34      	ldr	r2, [pc, #208]	; (8000844 <MX_GPIO_Init+0x134>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b32      	ldr	r3, [pc, #200]	; (8000844 <MX_GPIO_Init+0x134>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	4b2f      	ldr	r3, [pc, #188]	; (8000844 <MX_GPIO_Init+0x134>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a2e      	ldr	r2, [pc, #184]	; (8000844 <MX_GPIO_Init+0x134>)
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <MX_GPIO_Init+0x134>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0308 	and.w	r3, r3, #8
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800079e:	4b29      	ldr	r3, [pc, #164]	; (8000844 <MX_GPIO_Init+0x134>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a28      	ldr	r2, [pc, #160]	; (8000844 <MX_GPIO_Init+0x134>)
 80007a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_GPIO_Init+0x134>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f244 0181 	movw	r1, #16513	; 0x4081
 80007bc:	4822      	ldr	r0, [pc, #136]	; (8000848 <MX_GPIO_Init+0x138>)
 80007be:	f001 f9bf 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2140      	movs	r1, #64	; 0x40
 80007c6:	4821      	ldr	r0, [pc, #132]	; (800084c <MX_GPIO_Init+0x13c>)
 80007c8:	f001 f9ba 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	481b      	ldr	r0, [pc, #108]	; (8000850 <MX_GPIO_Init+0x140>)
 80007e4:	f001 f800 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007e8:	f244 0381 	movw	r3, #16513	; 0x4081
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	4811      	ldr	r0, [pc, #68]	; (8000848 <MX_GPIO_Init+0x138>)
 8000802:	f000 fff1 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000806:	2340      	movs	r3, #64	; 0x40
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	480b      	ldr	r0, [pc, #44]	; (800084c <MX_GPIO_Init+0x13c>)
 800081e:	f000 ffe3 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_GPIO_Init+0x13c>)
 8000836:	f000 ffd7 	bl	80017e8 <HAL_GPIO_Init>

}
 800083a:	bf00      	nop
 800083c:	3730      	adds	r7, #48	; 0x30
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40020400 	.word	0x40020400
 800084c:	40021800 	.word	0x40021800
 8000850:	40020800 	.word	0x40020800

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000858:	f000 fb39 	bl	8000ece <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085c:	f000 f80e 	bl	800087c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000860:	f7ff ff56 	bl	8000710 <MX_GPIO_Init>
  MX_ETH_Init();
 8000864:	f7ff fe4e 	bl	8000504 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000868:	f000 f9d0 	bl	8000c0c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800086c:	f000 fa5e 	bl	8000d2c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 8000870:	f000 f976 	bl	8000b60 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  usermain();
 8000874:	f003 fd0c 	bl	8004290 <usermain>

  while (1)
 8000878:	e7fe      	b.n	8000878 <main+0x24>
	...

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b094      	sub	sp, #80	; 0x50
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0320 	add.w	r3, r7, #32
 8000886:	2230      	movs	r2, #48	; 0x30
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f003 ff0a 	bl	80046a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008a0:	f001 faca 	bl	8001e38 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	4b27      	ldr	r3, [pc, #156]	; (8000944 <SystemClock_Config+0xc8>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	4a26      	ldr	r2, [pc, #152]	; (8000944 <SystemClock_Config+0xc8>)
 80008aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ae:	6413      	str	r3, [r2, #64]	; 0x40
 80008b0:	4b24      	ldr	r3, [pc, #144]	; (8000944 <SystemClock_Config+0xc8>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <SystemClock_Config+0xcc>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008c4:	4a20      	ldr	r2, [pc, #128]	; (8000948 <SystemClock_Config+0xcc>)
 80008c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ca:	6013      	str	r3, [r2, #0]
 80008cc:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <SystemClock_Config+0xcc>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d8:	2301      	movs	r3, #1
 80008da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e2:	2302      	movs	r3, #2
 80008e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008ec:	2304      	movs	r3, #4
 80008ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008f0:	2348      	movs	r3, #72	; 0x48
 80008f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008f8:	2303      	movs	r3, #3
 80008fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	4618      	mov	r0, r3
 8000902:	f001 faa9 	bl	8001e58 <HAL_RCC_OscConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800090c:	f000 f81e 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000910:	230f      	movs	r3, #15
 8000912:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000914:	2302      	movs	r3, #2
 8000916:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800091c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000920:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	2102      	movs	r1, #2
 800092c:	4618      	mov	r0, r3
 800092e:	f001 fd37 	bl	80023a0 <HAL_RCC_ClockConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000938:	f000 f808 	bl	800094c <Error_Handler>
  }
}
 800093c:	bf00      	nop
 800093e:	3750      	adds	r7, #80	; 0x50
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	40007000 	.word	0x40007000

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	e7fe      	b.n	8000954 <Error_Handler+0x8>
	...

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <HAL_MspInit+0x44>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a0e      	ldr	r2, [pc, #56]	; (800099c <HAL_MspInit+0x44>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <HAL_MspInit+0x44>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_MspInit+0x44>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <HAL_MspInit+0x44>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000980:	6453      	str	r3, [r2, #68]	; 0x44
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_MspInit+0x44>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ec:	f000 faac 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	e00a      	b.n	8000a1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a06:	f3af 8000 	nop.w
 8000a0a:	4601      	mov	r1, r0
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	60ba      	str	r2, [r7, #8]
 8000a12:	b2ca      	uxtb	r2, r1
 8000a14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	dbf0      	blt.n	8000a06 <_read+0x12>
  }

  return len;
 8000a24:	687b      	ldr	r3, [r7, #4]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b086      	sub	sp, #24
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	60f8      	str	r0, [r7, #12]
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	e009      	b.n	8000a54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	60ba      	str	r2, [r7, #8]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f003 fc0f 	bl	800426c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	3301      	adds	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	dbf1      	blt.n	8000a40 <_write+0x12>
  }
  return len;
 8000a5c:	687b      	ldr	r3, [r7, #4]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <_close>:

int _close(int file)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <_isatty>:

int _isatty(int file)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
	...

08000ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad8:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <_sbrk+0x5c>)
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <_sbrk+0x60>)
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d102      	bne.n	8000af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <_sbrk+0x64>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <_sbrk+0x68>)
 8000af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d207      	bcs.n	8000b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b00:	f003 fe1e 	bl	8004740 <__errno>
 8000b04:	4603      	mov	r3, r0
 8000b06:	220c      	movs	r2, #12
 8000b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	e009      	b.n	8000b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <_sbrk+0x64>)
 8000b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b22:	68fb      	ldr	r3, [r7, #12]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20050000 	.word	0x20050000
 8000b30:	00000400 	.word	0x00000400
 8000b34:	200002b4 	.word	0x200002b4
 8000b38:	200009e8 	.word	0x200009e8

08000b3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_TIM6_Init+0x64>)
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <MX_TIM6_Init+0x68>)
 8000b74:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_TIM6_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_TIM6_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <MX_TIM6_Init+0x64>)
 8000b84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b88:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_TIM6_Init+0x64>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <MX_TIM6_Init+0x64>)
 8000b92:	f002 fa1b 	bl	8002fcc <HAL_TIM_Base_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b9c:	f7ff fed6 	bl	800094c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_TIM6_Init+0x64>)
 8000bae:	f002 fb05 	bl	80031bc <HAL_TIMEx_MasterConfigSynchronization>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000bb8:	f7ff fec8 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200002b8 	.word	0x200002b8
 8000bc8:	40001000 	.word	0x40001000

08000bcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_TIM_Base_MspInit+0x38>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d10b      	bne.n	8000bf6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_TIM_Base_MspInit+0x3c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a09      	ldr	r2, [pc, #36]	; (8000c08 <HAL_TIM_Base_MspInit+0x3c>)
 8000be4:	f043 0310 	orr.w	r3, r3, #16
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <HAL_TIM_Base_MspInit+0x3c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 0310 	and.w	r3, r3, #16
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40001000 	.word	0x40001000
 8000c08:	40023800 	.word	0x40023800

08000c0c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c12:	4a15      	ldr	r2, [pc, #84]	; (8000c68 <MX_USART3_UART_Init+0x5c>)
 8000c14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c32:	220c      	movs	r2, #12
 8000c34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_USART3_UART_Init+0x58>)
 8000c50:	f002 fb42 	bl	80032d8 <HAL_UART_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c5a:	f7ff fe77 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000304 	.word	0x20000304
 8000c68:	40004800 	.word	0x40004800

08000c6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b0aa      	sub	sp, #168	; 0xa8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	2284      	movs	r2, #132	; 0x84
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f003 fd09 	bl	80046a4 <memset>
  if(uartHandle->Instance==USART3)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a22      	ldr	r2, [pc, #136]	; (8000d20 <HAL_UART_MspInit+0xb4>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d13c      	bne.n	8000d16 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca6:	f107 0310 	add.w	r3, r7, #16
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 fd9e 	bl	80027ec <HAL_RCCEx_PeriphCLKConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cb6:	f7ff fe49 	bl	800094c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <HAL_UART_MspInit+0xb8>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a19      	ldr	r2, [pc, #100]	; (8000d24 <HAL_UART_MspInit+0xb8>)
 8000cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <HAL_UART_MspInit+0xb8>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <HAL_UART_MspInit+0xb8>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a13      	ldr	r2, [pc, #76]	; (8000d24 <HAL_UART_MspInit+0xb8>)
 8000cd8:	f043 0308 	orr.w	r3, r3, #8
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_UART_MspInit+0xb8>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0308 	and.w	r3, r3, #8
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d04:	2307      	movs	r3, #7
 8000d06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <HAL_UART_MspInit+0xbc>)
 8000d12:	f000 fd69 	bl	80017e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d16:	bf00      	nop
 8000d18:	37a8      	adds	r7, #168	; 0xa8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40004800 	.word	0x40004800
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020c00 	.word	0x40020c00

08000d2c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d3a:	2206      	movs	r2, #6
 8000d3c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d40:	2202      	movs	r2, #2
 8000d42:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d70:	f000 ff19 	bl	8001ba6 <HAL_PCD_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d7a:	f7ff fde7 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	2000038c 	.word	0x2000038c

08000d88 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0ac      	sub	sp, #176	; 0xb0
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da0:	f107 0318 	add.w	r3, r7, #24
 8000da4:	2284      	movs	r2, #132	; 0x84
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 fc7b 	bl	80046a4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000db6:	d159      	bne.n	8000e6c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000db8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000dbc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc4:	f107 0318 	add.w	r3, r7, #24
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f001 fd0f 	bl	80027ec <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000dd4:	f7ff fdba 	bl	800094c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <HAL_PCD_MspInit+0xec>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	4a25      	ldr	r2, [pc, #148]	; (8000e74 <HAL_PCD_MspInit+0xec>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	6313      	str	r3, [r2, #48]	; 0x30
 8000de4:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <HAL_PCD_MspInit+0xec>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000df0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000df4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e0a:	230a      	movs	r3, #10
 8000e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e14:	4619      	mov	r1, r3
 8000e16:	4818      	ldr	r0, [pc, #96]	; (8000e78 <HAL_PCD_MspInit+0xf0>)
 8000e18:	f000 fce6 	bl	80017e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e34:	4619      	mov	r1, r3
 8000e36:	4810      	ldr	r0, [pc, #64]	; (8000e78 <HAL_PCD_MspInit+0xf0>)
 8000e38:	f000 fcd6 	bl	80017e8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <HAL_PCD_MspInit+0xec>)
 8000e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e40:	4a0c      	ldr	r2, [pc, #48]	; (8000e74 <HAL_PCD_MspInit+0xec>)
 8000e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e46:	6353      	str	r3, [r2, #52]	; 0x34
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_PCD_MspInit+0xec>)
 8000e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <HAL_PCD_MspInit+0xec>)
 8000e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <HAL_PCD_MspInit+0xec>)
 8000e5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <HAL_PCD_MspInit+0xec>)
 8000e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	37b0      	adds	r7, #176	; 0xb0
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020000 	.word	0x40020000

08000e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e80:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e82:	490e      	ldr	r1, [pc, #56]	; (8000ebc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e84:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e88:	e002      	b.n	8000e90 <LoopCopyDataInit>

08000e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8e:	3304      	adds	r3, #4

08000e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e94:	d3f9      	bcc.n	8000e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e98:	4c0b      	ldr	r4, [pc, #44]	; (8000ec8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e9c:	e001      	b.n	8000ea2 <LoopFillZerobss>

08000e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea0:	3204      	adds	r2, #4

08000ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea4:	d3fb      	bcc.n	8000e9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ea6:	f7ff fe49 	bl	8000b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eaa:	f003 fc4f 	bl	800474c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eae:	f7ff fcd1 	bl	8000854 <main>
  bx  lr    
 8000eb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eb4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ebc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ec0:	08004c58 	.word	0x08004c58
  ldr r2, =_sbss
 8000ec4:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8000ec8:	200009e4 	.word	0x200009e4

08000ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ecc:	e7fe      	b.n	8000ecc <ADC_IRQHandler>

08000ece <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	f000 f92e 	bl	8001134 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f000 f805 	bl	8000ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ede:	f7ff fd3b 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_InitTick+0x54>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_InitTick+0x58>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f93b 	bl	8001182 <HAL_SYSTICK_Config>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00e      	b.n	8000f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d80a      	bhi.n	8000f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f000 f911 	bl	800114a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f28:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <HAL_InitTick+0x5c>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e000      	b.n	8000f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000004 	.word	0x20000004

08000f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x20>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x24>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_IncTick+0x24>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000894 	.word	0x20000894

08000f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_GetTick+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000894 	.word	0x20000894

08000f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff ffee 	bl	8000f70 <HAL_GetTick>
 8000f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa0:	d005      	beq.n	8000fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_Delay+0x44>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fae:	bf00      	nop
 8000fb0:	f7ff ffde 	bl	8000f70 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d8f7      	bhi.n	8000fb0 <HAL_Delay+0x28>
  {
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008

08000fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <__NVIC_SetPriorityGrouping+0x40>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x40>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00
 8001014:	05fa0000 	.word	0x05fa0000

08001018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <__NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db0a      	blt.n	800105e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	490c      	ldr	r1, [pc, #48]	; (8001080 <__NVIC_SetPriority+0x4c>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	440b      	add	r3, r1
 8001058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800105c:	e00a      	b.n	8001074 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4908      	ldr	r1, [pc, #32]	; (8001084 <__NVIC_SetPriority+0x50>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	3b04      	subs	r3, #4
 800106c:	0112      	lsls	r2, r2, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	440b      	add	r3, r1
 8001072:	761a      	strb	r2, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000e100 	.word	0xe000e100
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	bf28      	it	cs
 80010a6:	2304      	movcs	r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d902      	bls.n	80010b8 <NVIC_EncodePriority+0x30>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	e000      	b.n	80010ba <NVIC_EncodePriority+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43d9      	mvns	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	4313      	orrs	r3, r2
         );
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3724      	adds	r7, #36	; 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001100:	d301      	bcc.n	8001106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001102:	2301      	movs	r3, #1
 8001104:	e00f      	b.n	8001126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001106:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <SysTick_Config+0x40>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110e:	210f      	movs	r1, #15
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f7ff ff8e 	bl	8001034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <SysTick_Config+0x40>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <SysTick_Config+0x40>)
 8001120:	2207      	movs	r2, #7
 8001122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	e000e010 	.word	0xe000e010

08001134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff47 	bl	8000fd0 <__NVIC_SetPriorityGrouping>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114a:	b580      	push	{r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800115c:	f7ff ff5c 	bl	8001018 <__NVIC_GetPriorityGrouping>
 8001160:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	68b9      	ldr	r1, [r7, #8]
 8001166:	6978      	ldr	r0, [r7, #20]
 8001168:	f7ff ff8e 	bl	8001088 <NVIC_EncodePriority>
 800116c:	4602      	mov	r2, r0
 800116e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff5d 	bl	8001034 <__NVIC_SetPriority>
}
 800117a:	bf00      	nop
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ffb0 	bl	80010f0 <SysTick_Config>
 8001190:	4603      	mov	r3, r0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e06a      	b.n	8001284 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d106      	bne.n	80011c6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2223      	movs	r2, #35	; 0x23
 80011bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff f9ed 	bl	80005a0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	4b31      	ldr	r3, [pc, #196]	; (800128c <HAL_ETH_Init+0xf0>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a30      	ldr	r2, [pc, #192]	; (800128c <HAL_ETH_Init+0xf0>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b2e      	ldr	r3, [pc, #184]	; (800128c <HAL_ETH_Init+0xf0>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011de:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <HAL_ETH_Init+0xf4>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	4a2b      	ldr	r2, [pc, #172]	; (8001290 <HAL_ETH_Init+0xf4>)
 80011e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011e8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011ea:	4b29      	ldr	r3, [pc, #164]	; (8001290 <HAL_ETH_Init+0xf4>)
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	4927      	ldr	r1, [pc, #156]	; (8001290 <HAL_ETH_Init+0xf4>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <HAL_ETH_Init+0xf4>)
 80011fa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6812      	ldr	r2, [r2, #0]
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001212:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001214:	f7ff feac 	bl	8000f70 <HAL_GetTick>
 8001218:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800121a:	e011      	b.n	8001240 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800121c:	f7ff fea8 	bl	8000f70 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800122a:	d909      	bls.n	8001240 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2204      	movs	r2, #4
 8001230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	22e0      	movs	r2, #224	; 0xe0
 8001238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e021      	b.n	8001284 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1e4      	bne.n	800121c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 f958 	bl	8001508 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f000 f9ff 	bl	800165c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 fa55 	bl	800170e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	461a      	mov	r2, r3
 800126a:	2100      	movs	r1, #0
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 f9bd 	bl	80015ec <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2210      	movs	r2, #16
 800127e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800
 8001290:	40013800 	.word	0x40013800

08001294 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	4b51      	ldr	r3, [pc, #324]	; (80013f0 <ETH_SetMACConfig+0x15c>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	7c1b      	ldrb	r3, [r3, #16]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <ETH_SetMACConfig+0x28>
 80012b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012ba:	e000      	b.n	80012be <ETH_SetMACConfig+0x2a>
 80012bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	7c5b      	ldrb	r3, [r3, #17]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d102      	bne.n	80012cc <ETH_SetMACConfig+0x38>
 80012c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ca:	e000      	b.n	80012ce <ETH_SetMACConfig+0x3a>
 80012cc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012ce:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	7fdb      	ldrb	r3, [r3, #31]
 80012da:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80012dc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	7f92      	ldrb	r2, [r2, #30]
 80012e8:	2a00      	cmp	r2, #0
 80012ea:	d102      	bne.n	80012f2 <ETH_SetMACConfig+0x5e>
 80012ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012f0:	e000      	b.n	80012f4 <ETH_SetMACConfig+0x60>
 80012f2:	2200      	movs	r2, #0
                        macconf->Speed |
 80012f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	7f1b      	ldrb	r3, [r3, #28]
 80012fa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80012fc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001302:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	791b      	ldrb	r3, [r3, #4]
 8001308:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800130a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001312:	2a00      	cmp	r2, #0
 8001314:	d102      	bne.n	800131c <ETH_SetMACConfig+0x88>
 8001316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800131a:	e000      	b.n	800131e <ETH_SetMACConfig+0x8a>
 800131c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800131e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	7bdb      	ldrb	r3, [r3, #15]
 8001324:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001326:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800132c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001334:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001336:	4313      	orrs	r3, r2
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800134e:	2001      	movs	r0, #1
 8001350:	f7ff fe1a 	bl	8000f88 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	f64f 7341 	movw	r3, #65345	; 0xff41
 800136a:	4013      	ands	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001372:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800137a:	2a00      	cmp	r2, #0
 800137c:	d101      	bne.n	8001382 <ETH_SetMACConfig+0xee>
 800137e:	2280      	movs	r2, #128	; 0x80
 8001380:	e000      	b.n	8001384 <ETH_SetMACConfig+0xf0>
 8001382:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001384:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800138a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001392:	2a01      	cmp	r2, #1
 8001394:	d101      	bne.n	800139a <ETH_SetMACConfig+0x106>
 8001396:	2208      	movs	r2, #8
 8001398:	e000      	b.n	800139c <ETH_SetMACConfig+0x108>
 800139a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800139c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80013a4:	2a01      	cmp	r2, #1
 80013a6:	d101      	bne.n	80013ac <ETH_SetMACConfig+0x118>
 80013a8:	2204      	movs	r2, #4
 80013aa:	e000      	b.n	80013ae <ETH_SetMACConfig+0x11a>
 80013ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80013b6:	2a01      	cmp	r2, #1
 80013b8:	d101      	bne.n	80013be <ETH_SetMACConfig+0x12a>
 80013ba:	2202      	movs	r2, #2
 80013bc:	e000      	b.n	80013c0 <ETH_SetMACConfig+0x12c>
 80013be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013c0:	4313      	orrs	r3, r2
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013d8:	2001      	movs	r0, #1
 80013da:	f7ff fdd5 	bl	8000f88 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	619a      	str	r2, [r3, #24]
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	ff20810f 	.word	0xff20810f

080013f4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	4b3d      	ldr	r3, [pc, #244]	; (8001504 <ETH_SetDMAConfig+0x110>)
 800140e:	4013      	ands	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	7b1b      	ldrb	r3, [r3, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d102      	bne.n	8001420 <ETH_SetDMAConfig+0x2c>
 800141a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800141e:	e000      	b.n	8001422 <ETH_SetDMAConfig+0x2e>
 8001420:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	7b5b      	ldrb	r3, [r3, #13]
 8001426:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001428:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	7f52      	ldrb	r2, [r2, #29]
 800142e:	2a00      	cmp	r2, #0
 8001430:	d102      	bne.n	8001438 <ETH_SetDMAConfig+0x44>
 8001432:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001436:	e000      	b.n	800143a <ETH_SetDMAConfig+0x46>
 8001438:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800143a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	7b9b      	ldrb	r3, [r3, #14]
 8001440:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001442:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001448:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	7f1b      	ldrb	r3, [r3, #28]
 800144e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001450:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	7f9b      	ldrb	r3, [r3, #30]
 8001456:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001458:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800145e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001466:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001468:	4313      	orrs	r3, r2
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001478:	461a      	mov	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800148a:	2001      	movs	r0, #1
 800148c:	f7ff fd7c 	bl	8000f88 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001498:	461a      	mov	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	791b      	ldrb	r3, [r3, #4]
 80014a2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014a8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80014ae:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014b4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014bc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80014be:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014c6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014cc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014da:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f7ff fd4d 	bl	8000f88 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014f6:	461a      	mov	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	f8de3f23 	.word	0xf8de3f23

08001508 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b0a6      	sub	sp, #152	; 0x98
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001510:	2301      	movs	r3, #1
 8001512:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001516:	2301      	movs	r3, #1
 8001518:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800151c:	2300      	movs	r3, #0
 800151e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001526:	2301      	movs	r3, #1
 8001528:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001532:	2301      	movs	r3, #1
 8001534:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001544:	2300      	movs	r3, #0
 8001546:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800154e:	2300      	movs	r3, #0
 8001550:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800156a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800156e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001570:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001574:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800157c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001580:	4619      	mov	r1, r3
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fe86 	bl	8001294 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001588:	2301      	movs	r3, #1
 800158a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800158c:	2301      	movs	r3, #1
 800158e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001590:	2301      	movs	r3, #1
 8001592:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001596:	2301      	movs	r3, #1
 8001598:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80015ae:	2301      	movs	r3, #1
 80015b0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80015b4:	2301      	movs	r3, #1
 80015b6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80015b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015bc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80015be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015c2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80015c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	4619      	mov	r1, r3
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ff08 	bl	80013f4 <ETH_SetDMAConfig>
}
 80015e4:	bf00      	nop
 80015e6:	3798      	adds	r7, #152	; 0x98
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3305      	adds	r3, #5
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	021b      	lsls	r3, r3, #8
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	3204      	adds	r2, #4
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	4313      	orrs	r3, r2
 8001608:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <ETH_MACAddressConfig+0x68>)
 800160e:	4413      	add	r3, r2
 8001610:	461a      	mov	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3303      	adds	r3, #3
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	061a      	lsls	r2, r3, #24
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3302      	adds	r3, #2
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	041b      	lsls	r3, r3, #16
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3301      	adds	r3, #1
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	4313      	orrs	r3, r2
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	7812      	ldrb	r2, [r2, #0]
 8001636:	4313      	orrs	r3, r2
 8001638:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <ETH_MACAddressConfig+0x6c>)
 800163e:	4413      	add	r3, r2
 8001640:	461a      	mov	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	6013      	str	r3, [r2, #0]
}
 8001646:	bf00      	nop
 8001648:	371c      	adds	r7, #28
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40028040 	.word	0x40028040
 8001658:	40028044 	.word	0x40028044

0800165c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	e03e      	b.n	80016e8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68d9      	ldr	r1, [r3, #12]
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	440b      	add	r3, r1
 800167a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2200      	movs	r2, #0
 8001686:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2200      	movs	r2, #0
 8001692:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	3206      	adds	r2, #6
 800169c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d80c      	bhi.n	80016cc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68d9      	ldr	r1, [r3, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	440b      	add	r3, r1
 80016c4:	461a      	mov	r2, r3
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	e004      	b.n	80016d6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	461a      	mov	r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3301      	adds	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d9bd      	bls.n	800166a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001700:	611a      	str	r2, [r3, #16]
}
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800170e:	b480      	push	{r7}
 8001710:	b085      	sub	sp, #20
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	e046      	b.n	80017aa <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6919      	ldr	r1, [r3, #16]
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	440b      	add	r3, r1
 800172c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	2200      	movs	r2, #0
 8001738:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001758:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001760:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800176e:	68b9      	ldr	r1, [r7, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	3212      	adds	r2, #18
 8001776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d80c      	bhi.n	800179a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6919      	ldr	r1, [r3, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	461a      	mov	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	e004      	b.n	80017a4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	461a      	mov	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	3301      	adds	r3, #1
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d9b5      	bls.n	800171c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017da:	60da      	str	r2, [r3, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	e175      	b.n	8001af4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001808:	2201      	movs	r2, #1
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	429a      	cmp	r2, r3
 8001822:	f040 8164 	bne.w	8001aee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	2b01      	cmp	r3, #1
 8001830:	d005      	beq.n	800183e <HAL_GPIO_Init+0x56>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d130      	bne.n	80018a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	2203      	movs	r2, #3
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001874:	2201      	movs	r2, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 0201 	and.w	r2, r3, #1
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d017      	beq.n	80018dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2203      	movs	r2, #3
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d123      	bne.n	8001930 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	08da      	lsrs	r2, r3, #3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3208      	adds	r2, #8
 80018f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	220f      	movs	r2, #15
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	08da      	lsrs	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3208      	adds	r2, #8
 800192a:	69b9      	ldr	r1, [r7, #24]
 800192c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0203 	and.w	r2, r3, #3
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80be 	beq.w	8001aee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001972:	4b66      	ldr	r3, [pc, #408]	; (8001b0c <HAL_GPIO_Init+0x324>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	4a65      	ldr	r2, [pc, #404]	; (8001b0c <HAL_GPIO_Init+0x324>)
 8001978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800197c:	6453      	str	r3, [r2, #68]	; 0x44
 800197e:	4b63      	ldr	r3, [pc, #396]	; (8001b0c <HAL_GPIO_Init+0x324>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800198a:	4a61      	ldr	r2, [pc, #388]	; (8001b10 <HAL_GPIO_Init+0x328>)
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	3302      	adds	r3, #2
 8001992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	220f      	movs	r2, #15
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a58      	ldr	r2, [pc, #352]	; (8001b14 <HAL_GPIO_Init+0x32c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d037      	beq.n	8001a26 <HAL_GPIO_Init+0x23e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a57      	ldr	r2, [pc, #348]	; (8001b18 <HAL_GPIO_Init+0x330>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d031      	beq.n	8001a22 <HAL_GPIO_Init+0x23a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a56      	ldr	r2, [pc, #344]	; (8001b1c <HAL_GPIO_Init+0x334>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d02b      	beq.n	8001a1e <HAL_GPIO_Init+0x236>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a55      	ldr	r2, [pc, #340]	; (8001b20 <HAL_GPIO_Init+0x338>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d025      	beq.n	8001a1a <HAL_GPIO_Init+0x232>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a54      	ldr	r2, [pc, #336]	; (8001b24 <HAL_GPIO_Init+0x33c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d01f      	beq.n	8001a16 <HAL_GPIO_Init+0x22e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a53      	ldr	r2, [pc, #332]	; (8001b28 <HAL_GPIO_Init+0x340>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d019      	beq.n	8001a12 <HAL_GPIO_Init+0x22a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a52      	ldr	r2, [pc, #328]	; (8001b2c <HAL_GPIO_Init+0x344>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d013      	beq.n	8001a0e <HAL_GPIO_Init+0x226>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a51      	ldr	r2, [pc, #324]	; (8001b30 <HAL_GPIO_Init+0x348>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d00d      	beq.n	8001a0a <HAL_GPIO_Init+0x222>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a50      	ldr	r2, [pc, #320]	; (8001b34 <HAL_GPIO_Init+0x34c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d007      	beq.n	8001a06 <HAL_GPIO_Init+0x21e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4f      	ldr	r2, [pc, #316]	; (8001b38 <HAL_GPIO_Init+0x350>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d101      	bne.n	8001a02 <HAL_GPIO_Init+0x21a>
 80019fe:	2309      	movs	r3, #9
 8001a00:	e012      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a02:	230a      	movs	r3, #10
 8001a04:	e010      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a06:	2308      	movs	r3, #8
 8001a08:	e00e      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	e00c      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a0e:	2306      	movs	r3, #6
 8001a10:	e00a      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a12:	2305      	movs	r3, #5
 8001a14:	e008      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a16:	2304      	movs	r3, #4
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e004      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e002      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <HAL_GPIO_Init+0x240>
 8001a26:	2300      	movs	r3, #0
 8001a28:	69fa      	ldr	r2, [r7, #28]
 8001a2a:	f002 0203 	and.w	r2, r2, #3
 8001a2e:	0092      	lsls	r2, r2, #2
 8001a30:	4093      	lsls	r3, r2
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a38:	4935      	ldr	r1, [pc, #212]	; (8001b10 <HAL_GPIO_Init+0x328>)
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	089b      	lsrs	r3, r3, #2
 8001a3e:	3302      	adds	r3, #2
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a46:	4b3d      	ldr	r3, [pc, #244]	; (8001b3c <HAL_GPIO_Init+0x354>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a6a:	4a34      	ldr	r2, [pc, #208]	; (8001b3c <HAL_GPIO_Init+0x354>)
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a70:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <HAL_GPIO_Init+0x354>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a94:	4a29      	ldr	r2, [pc, #164]	; (8001b3c <HAL_GPIO_Init+0x354>)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a9a:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <HAL_GPIO_Init+0x354>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001abe:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <HAL_GPIO_Init+0x354>)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <HAL_GPIO_Init+0x354>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ae8:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <HAL_GPIO_Init+0x354>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3301      	adds	r3, #1
 8001af2:	61fb      	str	r3, [r7, #28]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	2b0f      	cmp	r3, #15
 8001af8:	f67f ae86 	bls.w	8001808 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	3724      	adds	r7, #36	; 0x24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40013800 	.word	0x40013800
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40020400 	.word	0x40020400
 8001b1c:	40020800 	.word	0x40020800
 8001b20:	40020c00 	.word	0x40020c00
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40021400 	.word	0x40021400
 8001b2c:	40021800 	.word	0x40021800
 8001b30:	40021c00 	.word	0x40021c00
 8001b34:	40022000 	.word	0x40022000
 8001b38:	40022400 	.word	0x40022400
 8001b3c:	40013c00 	.word	0x40013c00

08001b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b50:	787b      	ldrb	r3, [r7, #1]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b5c:	e003      	b.n	8001b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b5e:	887b      	ldrh	r3, [r7, #2]
 8001b60:	041a      	lsls	r2, r3, #16
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	619a      	str	r2, [r3, #24]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b085      	sub	sp, #20
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b84:	887a      	ldrh	r2, [r7, #2]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	041a      	lsls	r2, r3, #16
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	43d9      	mvns	r1, r3
 8001b90:	887b      	ldrh	r3, [r7, #2]
 8001b92:	400b      	ands	r3, r1
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	619a      	str	r2, [r3, #24]
}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ba6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba8:	b08f      	sub	sp, #60	; 0x3c
 8001baa:	af0a      	add	r7, sp, #40	; 0x28
 8001bac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e116      	b.n	8001de6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d106      	bne.n	8001bd8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff f8d8 	bl	8000d88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2203      	movs	r2, #3
 8001bdc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d102      	bne.n	8001bf2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 f89c 	bl	8003d34 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	687e      	ldr	r6, [r7, #4]
 8001c04:	466d      	mov	r5, sp
 8001c06:	f106 0410 	add.w	r4, r6, #16
 8001c0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c16:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c1a:	1d33      	adds	r3, r6, #4
 8001c1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c1e:	6838      	ldr	r0, [r7, #0]
 8001c20:	f002 f830 	bl	8003c84 <USB_CoreInit>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e0d7      	b.n	8001de6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f002 f88a 	bl	8003d56 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	73fb      	strb	r3, [r7, #15]
 8001c46:	e04a      	b.n	8001cde <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4413      	add	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	333d      	adds	r3, #61	; 0x3d
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4413      	add	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	333c      	adds	r3, #60	; 0x3c
 8001c6c:	7bfa      	ldrb	r2, [r7, #15]
 8001c6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	b298      	uxth	r0, r3
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	3344      	adds	r3, #68	; 0x44
 8001c84:	4602      	mov	r2, r0
 8001c86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c88:	7bfa      	ldrb	r2, [r7, #15]
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4413      	add	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	3340      	adds	r3, #64	; 0x40
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c9c:	7bfa      	ldrb	r2, [r7, #15]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	3348      	adds	r3, #72	; 0x48
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cb0:	7bfa      	ldrb	r2, [r7, #15]
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	334c      	adds	r3, #76	; 0x4c
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cc4:	7bfa      	ldrb	r2, [r7, #15]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4413      	add	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	3354      	adds	r3, #84	; 0x54
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
 8001cde:	7bfa      	ldrb	r2, [r7, #15]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d3af      	bcc.n	8001c48 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	e044      	b.n	8001d78 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d16:	7bfa      	ldrb	r2, [r7, #15]
 8001d18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d1a:	7bfa      	ldrb	r2, [r7, #15]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d30:	7bfa      	ldrb	r2, [r7, #15]
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d46:	7bfa      	ldrb	r2, [r7, #15]
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	3301      	adds	r3, #1
 8001d76:	73fb      	strb	r3, [r7, #15]
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d3b5      	bcc.n	8001cee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	687e      	ldr	r6, [r7, #4]
 8001d8a:	466d      	mov	r5, sp
 8001d8c:	f106 0410 	add.w	r4, r6, #16
 8001d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001da0:	1d33      	adds	r3, r6, #4
 8001da2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001da4:	6838      	ldr	r0, [r7, #0]
 8001da6:	f002 f823 	bl	8003df0 <USB_DevInit>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e014      	b.n	8001de6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d102      	bne.n	8001dda <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f80b 	bl	8001df0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f002 f9e1 	bl	80041a6 <USB_DevDisconnect>

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001df0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_PCDEx_ActivateLPM+0x44>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	10000003 	.word	0x10000003

08001e38 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a04      	ldr	r2, [pc, #16]	; (8001e54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40007000 	.word	0x40007000

08001e58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e60:	2300      	movs	r3, #0
 8001e62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e291      	b.n	8002392 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8087 	beq.w	8001f8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e7c:	4b96      	ldr	r3, [pc, #600]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d00c      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e88:	4b93      	ldr	r3, [pc, #588]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d112      	bne.n	8001eba <HAL_RCC_OscConfig+0x62>
 8001e94:	4b90      	ldr	r3, [pc, #576]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ea0:	d10b      	bne.n	8001eba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea2:	4b8d      	ldr	r3, [pc, #564]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d06c      	beq.n	8001f88 <HAL_RCC_OscConfig+0x130>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d168      	bne.n	8001f88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e26b      	b.n	8002392 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec2:	d106      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x7a>
 8001ec4:	4b84      	ldr	r3, [pc, #528]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a83      	ldr	r2, [pc, #524]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	e02e      	b.n	8001f30 <HAL_RCC_OscConfig+0xd8>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x9c>
 8001eda:	4b7f      	ldr	r3, [pc, #508]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a7e      	ldr	r2, [pc, #504]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b7c      	ldr	r3, [pc, #496]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a7b      	ldr	r2, [pc, #492]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e01d      	b.n	8001f30 <HAL_RCC_OscConfig+0xd8>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0xc0>
 8001efe:	4b76      	ldr	r3, [pc, #472]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a75      	ldr	r2, [pc, #468]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b73      	ldr	r3, [pc, #460]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a72      	ldr	r2, [pc, #456]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e00b      	b.n	8001f30 <HAL_RCC_OscConfig+0xd8>
 8001f18:	4b6f      	ldr	r3, [pc, #444]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a6e      	ldr	r2, [pc, #440]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b6c      	ldr	r3, [pc, #432]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a6b      	ldr	r2, [pc, #428]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7ff f81a 	bl	8000f70 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff f816 	bl	8000f70 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	; 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e21f      	b.n	8002392 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b61      	ldr	r3, [pc, #388]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0xe8>
 8001f5e:	e014      	b.n	8001f8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f60:	f7ff f806 	bl	8000f70 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff f802 	bl	8000f70 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	; 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e20b      	b.n	8002392 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7a:	4b57      	ldr	r3, [pc, #348]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x110>
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d069      	beq.n	800206a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f96:	4b50      	ldr	r3, [pc, #320]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa2:	4b4d      	ldr	r3, [pc, #308]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d11c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x190>
 8001fae:	4b4a      	ldr	r3, [pc, #296]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d116      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	4b47      	ldr	r3, [pc, #284]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x17a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e1df      	b.n	8002392 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd2:	4b41      	ldr	r3, [pc, #260]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	493d      	ldr	r1, [pc, #244]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	e040      	b.n	800206a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d023      	beq.n	8002038 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff0:	4b39      	ldr	r3, [pc, #228]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a38      	ldr	r2, [pc, #224]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7fe ffb8 	bl	8000f70 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002004:	f7fe ffb4 	bl	8000f70 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e1bd      	b.n	8002392 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002016:	4b30      	ldr	r3, [pc, #192]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002022:	4b2d      	ldr	r3, [pc, #180]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4929      	ldr	r1, [pc, #164]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]
 8002036:	e018      	b.n	800206a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002038:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a26      	ldr	r2, [pc, #152]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 800203e:	f023 0301 	bic.w	r3, r3, #1
 8002042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7fe ff94 	bl	8000f70 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800204c:	f7fe ff90 	bl	8000f70 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e199      	b.n	8002392 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205e:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d038      	beq.n	80020e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d019      	beq.n	80020b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207e:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8002080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002082:	4a15      	ldr	r2, [pc, #84]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208a:	f7fe ff71 	bl	8000f70 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002092:	f7fe ff6d 	bl	8000f70 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e176      	b.n	8002392 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 80020a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x23a>
 80020b0:	e01a      	b.n	80020e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 80020b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b6:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <HAL_RCC_OscConfig+0x280>)
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020be:	f7fe ff57 	bl	8000f70 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c6:	f7fe ff53 	bl	8000f70 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d903      	bls.n	80020dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e15c      	b.n	8002392 <HAL_RCC_OscConfig+0x53a>
 80020d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020dc:	4b91      	ldr	r3, [pc, #580]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80020de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1ee      	bne.n	80020c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80a4 	beq.w	800223e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f6:	4b8b      	ldr	r3, [pc, #556]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10d      	bne.n	800211e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	4b88      	ldr	r3, [pc, #544]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	4a87      	ldr	r2, [pc, #540]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
 800210e:	4b85      	ldr	r3, [pc, #532]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211a:	2301      	movs	r3, #1
 800211c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800211e:	4b82      	ldr	r3, [pc, #520]	; (8002328 <HAL_RCC_OscConfig+0x4d0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002126:	2b00      	cmp	r3, #0
 8002128:	d118      	bne.n	800215c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800212a:	4b7f      	ldr	r3, [pc, #508]	; (8002328 <HAL_RCC_OscConfig+0x4d0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a7e      	ldr	r2, [pc, #504]	; (8002328 <HAL_RCC_OscConfig+0x4d0>)
 8002130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002136:	f7fe ff1b 	bl	8000f70 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213e:	f7fe ff17 	bl	8000f70 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b64      	cmp	r3, #100	; 0x64
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e120      	b.n	8002392 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002150:	4b75      	ldr	r3, [pc, #468]	; (8002328 <HAL_RCC_OscConfig+0x4d0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0f0      	beq.n	800213e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d106      	bne.n	8002172 <HAL_RCC_OscConfig+0x31a>
 8002164:	4b6f      	ldr	r3, [pc, #444]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	4a6e      	ldr	r2, [pc, #440]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6713      	str	r3, [r2, #112]	; 0x70
 8002170:	e02d      	b.n	80021ce <HAL_RCC_OscConfig+0x376>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x33c>
 800217a:	4b6a      	ldr	r3, [pc, #424]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217e:	4a69      	ldr	r2, [pc, #420]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	6713      	str	r3, [r2, #112]	; 0x70
 8002186:	4b67      	ldr	r3, [pc, #412]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218a:	4a66      	ldr	r2, [pc, #408]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 800218c:	f023 0304 	bic.w	r3, r3, #4
 8002190:	6713      	str	r3, [r2, #112]	; 0x70
 8002192:	e01c      	b.n	80021ce <HAL_RCC_OscConfig+0x376>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	2b05      	cmp	r3, #5
 800219a:	d10c      	bne.n	80021b6 <HAL_RCC_OscConfig+0x35e>
 800219c:	4b61      	ldr	r3, [pc, #388]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	4a60      	ldr	r2, [pc, #384]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6713      	str	r3, [r2, #112]	; 0x70
 80021a8:	4b5e      	ldr	r3, [pc, #376]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	4a5d      	ldr	r2, [pc, #372]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6713      	str	r3, [r2, #112]	; 0x70
 80021b4:	e00b      	b.n	80021ce <HAL_RCC_OscConfig+0x376>
 80021b6:	4b5b      	ldr	r3, [pc, #364]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	4a5a      	ldr	r2, [pc, #360]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80021bc:	f023 0301 	bic.w	r3, r3, #1
 80021c0:	6713      	str	r3, [r2, #112]	; 0x70
 80021c2:	4b58      	ldr	r3, [pc, #352]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c6:	4a57      	ldr	r2, [pc, #348]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80021c8:	f023 0304 	bic.w	r3, r3, #4
 80021cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d015      	beq.n	8002202 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d6:	f7fe fecb 	bl	8000f70 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021dc:	e00a      	b.n	80021f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7fe fec7 	bl	8000f70 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e0ce      	b.n	8002392 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f4:	4b4b      	ldr	r3, [pc, #300]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0ee      	beq.n	80021de <HAL_RCC_OscConfig+0x386>
 8002200:	e014      	b.n	800222c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002202:	f7fe feb5 	bl	8000f70 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7fe feb1 	bl	8000f70 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	; 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e0b8      	b.n	8002392 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002220:	4b40      	ldr	r3, [pc, #256]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1ee      	bne.n	800220a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800222c:	7dfb      	ldrb	r3, [r7, #23]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d105      	bne.n	800223e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002232:	4b3c      	ldr	r3, [pc, #240]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4a3b      	ldr	r2, [pc, #236]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 8002238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800223c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 80a4 	beq.w	8002390 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002248:	4b36      	ldr	r3, [pc, #216]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 030c 	and.w	r3, r3, #12
 8002250:	2b08      	cmp	r3, #8
 8002252:	d06b      	beq.n	800232c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d149      	bne.n	80022f0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225c:	4b31      	ldr	r3, [pc, #196]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a30      	ldr	r2, [pc, #192]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 8002262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7fe fe82 	bl	8000f70 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002270:	f7fe fe7e 	bl	8000f70 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e087      	b.n	8002392 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002282:	4b28      	ldr	r3, [pc, #160]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69da      	ldr	r2, [r3, #28]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	019b      	lsls	r3, r3, #6
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a4:	085b      	lsrs	r3, r3, #1
 80022a6:	3b01      	subs	r3, #1
 80022a8:	041b      	lsls	r3, r3, #16
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	061b      	lsls	r3, r3, #24
 80022b2:	4313      	orrs	r3, r2
 80022b4:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80022b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022ba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022bc:	4b19      	ldr	r3, [pc, #100]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a18      	ldr	r2, [pc, #96]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80022c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7fe fe52 	bl	8000f70 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d0:	f7fe fe4e 	bl	8000f70 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e057      	b.n	8002392 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x478>
 80022ee:	e04f      	b.n	8002390 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0b      	ldr	r2, [pc, #44]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80022f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fe38 	bl	8000f70 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002304:	f7fe fe34 	bl	8000f70 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e03d      	b.n	8002392 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002316:	4b03      	ldr	r3, [pc, #12]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x4ac>
 8002322:	e035      	b.n	8002390 <HAL_RCC_OscConfig+0x538>
 8002324:	40023800 	.word	0x40023800
 8002328:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800232c:	4b1b      	ldr	r3, [pc, #108]	; (800239c <HAL_RCC_OscConfig+0x544>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d028      	beq.n	800238c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002344:	429a      	cmp	r2, r3
 8002346:	d121      	bne.n	800238c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002352:	429a      	cmp	r2, r3
 8002354:	d11a      	bne.n	800238c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800235c:	4013      	ands	r3, r2
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002362:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002364:	4293      	cmp	r3, r2
 8002366:	d111      	bne.n	800238c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	085b      	lsrs	r3, r3, #1
 8002374:	3b01      	subs	r3, #1
 8002376:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d107      	bne.n	800238c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002386:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800

080023a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0d0      	b.n	800255a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023b8:	4b6a      	ldr	r3, [pc, #424]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d910      	bls.n	80023e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c6:	4b67      	ldr	r3, [pc, #412]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 020f 	bic.w	r2, r3, #15
 80023ce:	4965      	ldr	r1, [pc, #404]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d6:	4b63      	ldr	r3, [pc, #396]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0b8      	b.n	800255a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d020      	beq.n	8002436 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002400:	4b59      	ldr	r3, [pc, #356]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	4a58      	ldr	r2, [pc, #352]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002406:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800240a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002418:	4b53      	ldr	r3, [pc, #332]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	4a52      	ldr	r2, [pc, #328]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 800241e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002422:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002424:	4b50      	ldr	r3, [pc, #320]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	494d      	ldr	r1, [pc, #308]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d040      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d107      	bne.n	800245a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	4b47      	ldr	r3, [pc, #284]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d115      	bne.n	8002482 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e07f      	b.n	800255a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d107      	bne.n	8002472 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002462:	4b41      	ldr	r3, [pc, #260]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e073      	b.n	800255a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002472:	4b3d      	ldr	r3, [pc, #244]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e06b      	b.n	800255a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002482:	4b39      	ldr	r3, [pc, #228]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f023 0203 	bic.w	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4936      	ldr	r1, [pc, #216]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002490:	4313      	orrs	r3, r2
 8002492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002494:	f7fe fd6c 	bl	8000f70 <HAL_GetTick>
 8002498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249a:	e00a      	b.n	80024b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800249c:	f7fe fd68 	bl	8000f70 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e053      	b.n	800255a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b2:	4b2d      	ldr	r3, [pc, #180]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 020c 	and.w	r2, r3, #12
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d1eb      	bne.n	800249c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024c4:	4b27      	ldr	r3, [pc, #156]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 030f 	and.w	r3, r3, #15
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d210      	bcs.n	80024f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d2:	4b24      	ldr	r3, [pc, #144]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 020f 	bic.w	r2, r3, #15
 80024da:	4922      	ldr	r1, [pc, #136]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b20      	ldr	r3, [pc, #128]	; (8002564 <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e032      	b.n	800255a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4916      	ldr	r1, [pc, #88]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	490e      	ldr	r1, [pc, #56]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002532:	f000 f821 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8002536:	4602      	mov	r2, r0
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <HAL_RCC_ClockConfig+0x1c8>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	490a      	ldr	r1, [pc, #40]	; (800256c <HAL_RCC_ClockConfig+0x1cc>)
 8002544:	5ccb      	ldrb	r3, [r1, r3]
 8002546:	fa22 f303 	lsr.w	r3, r2, r3
 800254a:	4a09      	ldr	r2, [pc, #36]	; (8002570 <HAL_RCC_ClockConfig+0x1d0>)
 800254c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_RCC_ClockConfig+0x1d4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fcc8 	bl	8000ee8 <HAL_InitTick>

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40023c00 	.word	0x40023c00
 8002568:	40023800 	.word	0x40023800
 800256c:	08004c30 	.word	0x08004c30
 8002570:	20000000 	.word	0x20000000
 8002574:	20000004 	.word	0x20000004

08002578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800257c:	b094      	sub	sp, #80	; 0x50
 800257e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	647b      	str	r3, [r7, #68]	; 0x44
 8002584:	2300      	movs	r3, #0
 8002586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002588:	2300      	movs	r3, #0
 800258a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002590:	4b79      	ldr	r3, [pc, #484]	; (8002778 <HAL_RCC_GetSysClockFreq+0x200>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 030c 	and.w	r3, r3, #12
 8002598:	2b08      	cmp	r3, #8
 800259a:	d00d      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x40>
 800259c:	2b08      	cmp	r3, #8
 800259e:	f200 80e1 	bhi.w	8002764 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x34>
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d003      	beq.n	80025b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80025aa:	e0db      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025ac:	4b73      	ldr	r3, [pc, #460]	; (800277c <HAL_RCC_GetSysClockFreq+0x204>)
 80025ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025b0:	e0db      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025b2:	4b73      	ldr	r3, [pc, #460]	; (8002780 <HAL_RCC_GetSysClockFreq+0x208>)
 80025b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025b6:	e0d8      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025b8:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025c0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025c2:	4b6d      	ldr	r3, [pc, #436]	; (8002778 <HAL_RCC_GetSysClockFreq+0x200>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d063      	beq.n	8002696 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ce:	4b6a      	ldr	r3, [pc, #424]	; (8002778 <HAL_RCC_GetSysClockFreq+0x200>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	099b      	lsrs	r3, r3, #6
 80025d4:	2200      	movs	r2, #0
 80025d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80025d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e0:	633b      	str	r3, [r7, #48]	; 0x30
 80025e2:	2300      	movs	r3, #0
 80025e4:	637b      	str	r3, [r7, #52]	; 0x34
 80025e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025ea:	4622      	mov	r2, r4
 80025ec:	462b      	mov	r3, r5
 80025ee:	f04f 0000 	mov.w	r0, #0
 80025f2:	f04f 0100 	mov.w	r1, #0
 80025f6:	0159      	lsls	r1, r3, #5
 80025f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025fc:	0150      	lsls	r0, r2, #5
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4621      	mov	r1, r4
 8002604:	1a51      	subs	r1, r2, r1
 8002606:	6139      	str	r1, [r7, #16]
 8002608:	4629      	mov	r1, r5
 800260a:	eb63 0301 	sbc.w	r3, r3, r1
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800261c:	4659      	mov	r1, fp
 800261e:	018b      	lsls	r3, r1, #6
 8002620:	4651      	mov	r1, sl
 8002622:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002626:	4651      	mov	r1, sl
 8002628:	018a      	lsls	r2, r1, #6
 800262a:	4651      	mov	r1, sl
 800262c:	ebb2 0801 	subs.w	r8, r2, r1
 8002630:	4659      	mov	r1, fp
 8002632:	eb63 0901 	sbc.w	r9, r3, r1
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002642:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002646:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800264a:	4690      	mov	r8, r2
 800264c:	4699      	mov	r9, r3
 800264e:	4623      	mov	r3, r4
 8002650:	eb18 0303 	adds.w	r3, r8, r3
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	462b      	mov	r3, r5
 8002658:	eb49 0303 	adc.w	r3, r9, r3
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800266a:	4629      	mov	r1, r5
 800266c:	024b      	lsls	r3, r1, #9
 800266e:	4621      	mov	r1, r4
 8002670:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002674:	4621      	mov	r1, r4
 8002676:	024a      	lsls	r2, r1, #9
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267e:	2200      	movs	r2, #0
 8002680:	62bb      	str	r3, [r7, #40]	; 0x28
 8002682:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002684:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002688:	f7fd fdbe 	bl	8000208 <__aeabi_uldivmod>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4613      	mov	r3, r2
 8002692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002694:	e058      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002696:	4b38      	ldr	r3, [pc, #224]	; (8002778 <HAL_RCC_GetSysClockFreq+0x200>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	099b      	lsrs	r3, r3, #6
 800269c:	2200      	movs	r2, #0
 800269e:	4618      	mov	r0, r3
 80026a0:	4611      	mov	r1, r2
 80026a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026a6:	623b      	str	r3, [r7, #32]
 80026a8:	2300      	movs	r3, #0
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
 80026ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026b0:	4642      	mov	r2, r8
 80026b2:	464b      	mov	r3, r9
 80026b4:	f04f 0000 	mov.w	r0, #0
 80026b8:	f04f 0100 	mov.w	r1, #0
 80026bc:	0159      	lsls	r1, r3, #5
 80026be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026c2:	0150      	lsls	r0, r2, #5
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4641      	mov	r1, r8
 80026ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80026ce:	4649      	mov	r1, r9
 80026d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026e8:	ebb2 040a 	subs.w	r4, r2, sl
 80026ec:	eb63 050b 	sbc.w	r5, r3, fp
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	00eb      	lsls	r3, r5, #3
 80026fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026fe:	00e2      	lsls	r2, r4, #3
 8002700:	4614      	mov	r4, r2
 8002702:	461d      	mov	r5, r3
 8002704:	4643      	mov	r3, r8
 8002706:	18e3      	adds	r3, r4, r3
 8002708:	603b      	str	r3, [r7, #0]
 800270a:	464b      	mov	r3, r9
 800270c:	eb45 0303 	adc.w	r3, r5, r3
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800271e:	4629      	mov	r1, r5
 8002720:	028b      	lsls	r3, r1, #10
 8002722:	4621      	mov	r1, r4
 8002724:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002728:	4621      	mov	r1, r4
 800272a:	028a      	lsls	r2, r1, #10
 800272c:	4610      	mov	r0, r2
 800272e:	4619      	mov	r1, r3
 8002730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002732:	2200      	movs	r2, #0
 8002734:	61bb      	str	r3, [r7, #24]
 8002736:	61fa      	str	r2, [r7, #28]
 8002738:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800273c:	f7fd fd64 	bl	8000208 <__aeabi_uldivmod>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4613      	mov	r3, r2
 8002746:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_GetSysClockFreq+0x200>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	0c1b      	lsrs	r3, r3, #16
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	3301      	adds	r3, #1
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002758:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800275a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002760:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002762:	e002      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <HAL_RCC_GetSysClockFreq+0x204>)
 8002766:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002768:	bf00      	nop
    }
  }
  return sysclockfreq;
 800276a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800276c:	4618      	mov	r0, r3
 800276e:	3750      	adds	r7, #80	; 0x50
 8002770:	46bd      	mov	sp, r7
 8002772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002776:	bf00      	nop
 8002778:	40023800 	.word	0x40023800
 800277c:	00f42400 	.word	0x00f42400
 8002780:	007a1200 	.word	0x007a1200

08002784 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002788:	4b03      	ldr	r3, [pc, #12]	; (8002798 <HAL_RCC_GetHCLKFreq+0x14>)
 800278a:	681b      	ldr	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000000 	.word	0x20000000

0800279c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027a0:	f7ff fff0 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027a4:	4602      	mov	r2, r0
 80027a6:	4b05      	ldr	r3, [pc, #20]	; (80027bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	0a9b      	lsrs	r3, r3, #10
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	4903      	ldr	r1, [pc, #12]	; (80027c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b2:	5ccb      	ldrb	r3, [r1, r3]
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40023800 	.word	0x40023800
 80027c0:	08004c40 	.word	0x08004c40

080027c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027c8:	f7ff ffdc 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	0b5b      	lsrs	r3, r3, #13
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	4903      	ldr	r1, [pc, #12]	; (80027e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027da:	5ccb      	ldrb	r3, [r1, r3]
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40023800 	.word	0x40023800
 80027e8:	08004c40 	.word	0x08004c40

080027ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d012      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002814:	4b69      	ldr	r3, [pc, #420]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	4a68      	ldr	r2, [pc, #416]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800281a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800281e:	6093      	str	r3, [r2, #8]
 8002820:	4b66      	ldr	r3, [pc, #408]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002828:	4964      	ldr	r1, [pc, #400]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002836:	2301      	movs	r3, #1
 8002838:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d017      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002846:	4b5d      	ldr	r3, [pc, #372]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002848:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800284c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002854:	4959      	ldr	r1, [pc, #356]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002860:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002864:	d101      	bne.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002866:	2301      	movs	r3, #1
 8002868:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002872:	2301      	movs	r3, #1
 8002874:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d017      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002882:	4b4e      	ldr	r3, [pc, #312]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002888:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	494a      	ldr	r1, [pc, #296]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028a0:	d101      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80028a2:	2301      	movs	r3, #1
 80028a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80028ae:	2301      	movs	r3, #1
 80028b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80028be:	2301      	movs	r3, #1
 80028c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0320 	and.w	r3, r3, #32
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 808b 	beq.w	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028d0:	4b3a      	ldr	r3, [pc, #232]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	4a39      	ldr	r2, [pc, #228]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028da:	6413      	str	r3, [r2, #64]	; 0x40
 80028dc:	4b37      	ldr	r3, [pc, #220]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028e8:	4b35      	ldr	r3, [pc, #212]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a34      	ldr	r2, [pc, #208]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f4:	f7fe fb3c 	bl	8000f70 <HAL_GetTick>
 80028f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fc:	f7fe fb38 	bl	8000f70 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	; 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e357      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800290e:	4b2c      	ldr	r3, [pc, #176]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800291a:	4b28      	ldr	r3, [pc, #160]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002922:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d035      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	429a      	cmp	r2, r3
 8002936:	d02e      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002938:	4b20      	ldr	r3, [pc, #128]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002940:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002942:	4b1e      	ldr	r3, [pc, #120]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002946:	4a1d      	ldr	r2, [pc, #116]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800294e:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002952:	4a1a      	ldr	r2, [pc, #104]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002958:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800295a:	4a18      	ldr	r2, [pc, #96]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002960:	4b16      	ldr	r3, [pc, #88]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b01      	cmp	r3, #1
 800296a:	d114      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe fb00 	bl	8000f70 <HAL_GetTick>
 8002970:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002972:	e00a      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002974:	f7fe fafc 	bl	8000f70 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002982:	4293      	cmp	r3, r2
 8002984:	d901      	bls.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e319      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298a:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800298c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0ee      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800299e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029a2:	d111      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80029a4:	4b05      	ldr	r3, [pc, #20]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80029b2:	400b      	ands	r3, r1
 80029b4:	4901      	ldr	r1, [pc, #4]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
 80029ba:	e00b      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40007000 	.word	0x40007000
 80029c4:	0ffffcff 	.word	0x0ffffcff
 80029c8:	4baa      	ldr	r3, [pc, #680]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4aa9      	ldr	r2, [pc, #676]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80029d2:	6093      	str	r3, [r2, #8]
 80029d4:	4ba7      	ldr	r3, [pc, #668]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e0:	49a4      	ldr	r1, [pc, #656]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d010      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029f2:	4ba0      	ldr	r3, [pc, #640]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f8:	4a9e      	ldr	r2, [pc, #632]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a02:	4b9c      	ldr	r3, [pc, #624]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a04:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	4999      	ldr	r1, [pc, #612]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a20:	4b94      	ldr	r3, [pc, #592]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a2e:	4991      	ldr	r1, [pc, #580]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a42:	4b8c      	ldr	r3, [pc, #560]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a50:	4988      	ldr	r1, [pc, #544]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00a      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a64:	4b83      	ldr	r3, [pc, #524]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a72:	4980      	ldr	r1, [pc, #512]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00a      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a86:	4b7b      	ldr	r3, [pc, #492]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	4977      	ldr	r1, [pc, #476]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aa8:	4b72      	ldr	r3, [pc, #456]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aae:	f023 0203 	bic.w	r2, r3, #3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	496f      	ldr	r1, [pc, #444]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002aca:	4b6a      	ldr	r3, [pc, #424]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad0:	f023 020c 	bic.w	r2, r3, #12
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad8:	4966      	ldr	r1, [pc, #408]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aec:	4b61      	ldr	r3, [pc, #388]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afa:	495e      	ldr	r1, [pc, #376]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b0e:	4b59      	ldr	r3, [pc, #356]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1c:	4955      	ldr	r1, [pc, #340]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b30:	4b50      	ldr	r3, [pc, #320]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3e:	494d      	ldr	r1, [pc, #308]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b52:	4b48      	ldr	r3, [pc, #288]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	4944      	ldr	r1, [pc, #272]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b74:	4b3f      	ldr	r3, [pc, #252]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b82:	493c      	ldr	r1, [pc, #240]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b96:	4b37      	ldr	r3, [pc, #220]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba4:	4933      	ldr	r1, [pc, #204]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bb8:	4b2e      	ldr	r3, [pc, #184]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bc6:	492b      	ldr	r1, [pc, #172]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d011      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002bda:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002be8:	4922      	ldr	r1, [pc, #136]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c1a:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c20:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c28:	4912      	ldr	r1, [pc, #72]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00b      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c3c:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c42:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c4c:	4909      	ldr	r1, [pc, #36]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d006      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80d9 	beq.w	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c68:	4b02      	ldr	r3, [pc, #8]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a01      	ldr	r2, [pc, #4]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c72:	e001      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002c74:	40023800 	.word	0x40023800
 8002c78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c7a:	f7fe f979 	bl	8000f70 <HAL_GetTick>
 8002c7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c82:	f7fe f975 	bl	8000f70 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b64      	cmp	r3, #100	; 0x64
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e194      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c94:	4b6c      	ldr	r3, [pc, #432]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1f0      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d021      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d11d      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002cb4:	4b64      	ldr	r3, [pc, #400]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cba:	0c1b      	lsrs	r3, r3, #16
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cc2:	4b61      	ldr	r3, [pc, #388]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc8:	0e1b      	lsrs	r3, r3, #24
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	019a      	lsls	r2, r3, #6
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	041b      	lsls	r3, r3, #16
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	061b      	lsls	r3, r3, #24
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	071b      	lsls	r3, r3, #28
 8002ce8:	4957      	ldr	r1, [pc, #348]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d004      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d04:	d00a      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d02e      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d1a:	d129      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d1c:	4b4a      	ldr	r3, [pc, #296]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d22:	0c1b      	lsrs	r3, r3, #16
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d2a:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d30:	0f1b      	lsrs	r3, r3, #28
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	019a      	lsls	r2, r3, #6
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	041b      	lsls	r3, r3, #16
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	061b      	lsls	r3, r3, #24
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	071b      	lsls	r3, r3, #28
 8002d50:	493d      	ldr	r1, [pc, #244]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002d58:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d5e:	f023 021f 	bic.w	r2, r3, #31
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	3b01      	subs	r3, #1
 8002d68:	4937      	ldr	r1, [pc, #220]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d01d      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d7c:	4b32      	ldr	r3, [pc, #200]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d82:	0e1b      	lsrs	r3, r3, #24
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d8a:	4b2f      	ldr	r3, [pc, #188]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d90:	0f1b      	lsrs	r3, r3, #28
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	019a      	lsls	r2, r3, #6
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	041b      	lsls	r3, r3, #16
 8002da4:	431a      	orrs	r2, r3
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	061b      	lsls	r3, r3, #24
 8002daa:	431a      	orrs	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	071b      	lsls	r3, r3, #28
 8002db0:	4925      	ldr	r1, [pc, #148]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d011      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	019a      	lsls	r2, r3, #6
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	041b      	lsls	r3, r3, #16
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	061b      	lsls	r3, r3, #24
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	071b      	lsls	r3, r3, #28
 8002de0:	4919      	ldr	r1, [pc, #100]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002de8:	4b17      	ldr	r3, [pc, #92]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a16      	ldr	r2, [pc, #88]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002df2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002df4:	f7fe f8bc 	bl	8000f70 <HAL_GetTick>
 8002df8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dfc:	f7fe f8b8 	bl	8000f70 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b64      	cmp	r3, #100	; 0x64
 8002e08:	d901      	bls.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e0d7      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	f040 80cd 	bne.w	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e22:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a08      	ldr	r2, [pc, #32]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e2e:	f7fe f89f 	bl	8000f70 <HAL_GetTick>
 8002e32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e36:	f7fe f89b 	bl	8000f70 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b64      	cmp	r3, #100	; 0x64
 8002e42:	d903      	bls.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e0ba      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002e48:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e4c:	4b5e      	ldr	r3, [pc, #376]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e58:	d0ed      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d009      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d02e      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d12a      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e82:	4b51      	ldr	r3, [pc, #324]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e90:	4b4d      	ldr	r3, [pc, #308]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e96:	0f1b      	lsrs	r3, r3, #28
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	019a      	lsls	r2, r3, #6
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	041b      	lsls	r3, r3, #16
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	061b      	lsls	r3, r3, #24
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	071b      	lsls	r3, r3, #28
 8002eb6:	4944      	ldr	r1, [pc, #272]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ebe:	4b42      	ldr	r3, [pc, #264]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ec4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	493d      	ldr	r1, [pc, #244]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d022      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ee8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eec:	d11d      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002eee:	4b36      	ldr	r3, [pc, #216]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef4:	0e1b      	lsrs	r3, r3, #24
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002efc:	4b32      	ldr	r3, [pc, #200]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f02:	0f1b      	lsrs	r3, r3, #28
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	019a      	lsls	r2, r3, #6
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	041b      	lsls	r3, r3, #16
 8002f16:	431a      	orrs	r2, r3
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	061b      	lsls	r3, r3, #24
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	071b      	lsls	r3, r3, #28
 8002f22:	4929      	ldr	r1, [pc, #164]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d028      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f36:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3c:	0e1b      	lsrs	r3, r3, #24
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f44:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	0c1b      	lsrs	r3, r3, #16
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	019a      	lsls	r2, r3, #6
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	041b      	lsls	r3, r3, #16
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	061b      	lsls	r3, r3, #24
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	071b      	lsls	r3, r3, #28
 8002f6a:	4917      	ldr	r1, [pc, #92]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002f72:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	4911      	ldr	r1, [pc, #68]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f88:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a0e      	ldr	r2, [pc, #56]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f94:	f7fd ffec 	bl	8000f70 <HAL_GetTick>
 8002f98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f9c:	f7fd ffe8 	bl	8000f70 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e007      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fba:	d1ef      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3720      	adds	r7, #32
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800

08002fcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e049      	b.n	8003072 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fd fdea 	bl	8000bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3304      	adds	r3, #4
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f000 f836 	bl	800307c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a40      	ldr	r2, [pc, #256]	; (8003190 <TIM_Base_SetConfig+0x114>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d013      	beq.n	80030bc <TIM_Base_SetConfig+0x40>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309a:	d00f      	beq.n	80030bc <TIM_Base_SetConfig+0x40>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a3d      	ldr	r2, [pc, #244]	; (8003194 <TIM_Base_SetConfig+0x118>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00b      	beq.n	80030bc <TIM_Base_SetConfig+0x40>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a3c      	ldr	r2, [pc, #240]	; (8003198 <TIM_Base_SetConfig+0x11c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d007      	beq.n	80030bc <TIM_Base_SetConfig+0x40>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a3b      	ldr	r2, [pc, #236]	; (800319c <TIM_Base_SetConfig+0x120>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d003      	beq.n	80030bc <TIM_Base_SetConfig+0x40>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a3a      	ldr	r2, [pc, #232]	; (80031a0 <TIM_Base_SetConfig+0x124>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d108      	bne.n	80030ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a2f      	ldr	r2, [pc, #188]	; (8003190 <TIM_Base_SetConfig+0x114>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d02b      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030dc:	d027      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a2c      	ldr	r2, [pc, #176]	; (8003194 <TIM_Base_SetConfig+0x118>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d023      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a2b      	ldr	r2, [pc, #172]	; (8003198 <TIM_Base_SetConfig+0x11c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d01f      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a2a      	ldr	r2, [pc, #168]	; (800319c <TIM_Base_SetConfig+0x120>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d01b      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a29      	ldr	r2, [pc, #164]	; (80031a0 <TIM_Base_SetConfig+0x124>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d017      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a28      	ldr	r2, [pc, #160]	; (80031a4 <TIM_Base_SetConfig+0x128>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d013      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a27      	ldr	r2, [pc, #156]	; (80031a8 <TIM_Base_SetConfig+0x12c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00f      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a26      	ldr	r2, [pc, #152]	; (80031ac <TIM_Base_SetConfig+0x130>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00b      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a25      	ldr	r2, [pc, #148]	; (80031b0 <TIM_Base_SetConfig+0x134>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d007      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a24      	ldr	r2, [pc, #144]	; (80031b4 <TIM_Base_SetConfig+0x138>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d003      	beq.n	800312e <TIM_Base_SetConfig+0xb2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a23      	ldr	r2, [pc, #140]	; (80031b8 <TIM_Base_SetConfig+0x13c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d108      	bne.n	8003140 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4313      	orrs	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	4313      	orrs	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <TIM_Base_SetConfig+0x114>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d003      	beq.n	8003174 <TIM_Base_SetConfig+0xf8>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a0c      	ldr	r2, [pc, #48]	; (80031a0 <TIM_Base_SetConfig+0x124>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d103      	bne.n	800317c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	615a      	str	r2, [r3, #20]
}
 8003182:	bf00      	nop
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40010000 	.word	0x40010000
 8003194:	40000400 	.word	0x40000400
 8003198:	40000800 	.word	0x40000800
 800319c:	40000c00 	.word	0x40000c00
 80031a0:	40010400 	.word	0x40010400
 80031a4:	40014000 	.word	0x40014000
 80031a8:	40014400 	.word	0x40014400
 80031ac:	40014800 	.word	0x40014800
 80031b0:	40001800 	.word	0x40001800
 80031b4:	40001c00 	.word	0x40001c00
 80031b8:	40002000 	.word	0x40002000

080031bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e06d      	b.n	80032b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a30      	ldr	r2, [pc, #192]	; (80032bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d004      	beq.n	8003208 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a2f      	ldr	r2, [pc, #188]	; (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d108      	bne.n	800321a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800320e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003220:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4313      	orrs	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a20      	ldr	r2, [pc, #128]	; (80032bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d022      	beq.n	8003284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003246:	d01d      	beq.n	8003284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a1d      	ldr	r2, [pc, #116]	; (80032c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d018      	beq.n	8003284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1c      	ldr	r2, [pc, #112]	; (80032c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d013      	beq.n	8003284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1a      	ldr	r2, [pc, #104]	; (80032cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00e      	beq.n	8003284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a15      	ldr	r2, [pc, #84]	; (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d009      	beq.n	8003284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a16      	ldr	r2, [pc, #88]	; (80032d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d004      	beq.n	8003284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a15      	ldr	r2, [pc, #84]	; (80032d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d10c      	bne.n	800329e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800328a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	4313      	orrs	r3, r2
 8003294:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	40010000 	.word	0x40010000
 80032c0:	40010400 	.word	0x40010400
 80032c4:	40000400 	.word	0x40000400
 80032c8:	40000800 	.word	0x40000800
 80032cc:	40000c00 	.word	0x40000c00
 80032d0:	40014000 	.word	0x40014000
 80032d4:	40001800 	.word	0x40001800

080032d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e040      	b.n	800336c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7fd fcb6 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2224      	movs	r2, #36	; 0x24
 8003304:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0201 	bic.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f8b0 	bl	800347c <UART_SetConfig>
 800331c:	4603      	mov	r3, r0
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e022      	b.n	800336c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fb08 	bl	8003944 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003342:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003352:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fb8f 	bl	8003a88 <UART_CheckIdleState>
 800336a:	4603      	mov	r3, r0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	; 0x28
 8003378:	af02      	add	r7, sp, #8
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	4613      	mov	r3, r2
 8003382:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003388:	2b20      	cmp	r3, #32
 800338a:	d171      	bne.n	8003470 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <HAL_UART_Transmit+0x24>
 8003392:	88fb      	ldrh	r3, [r7, #6]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e06a      	b.n	8003472 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2221      	movs	r2, #33	; 0x21
 80033a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033aa:	f7fd fde1 	bl	8000f70 <HAL_GetTick>
 80033ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	88fa      	ldrh	r2, [r7, #6]
 80033b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	88fa      	ldrh	r2, [r7, #6]
 80033bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c8:	d108      	bne.n	80033dc <HAL_UART_Transmit+0x68>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d104      	bne.n	80033dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	e003      	b.n	80033e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033e4:	e02c      	b.n	8003440 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2200      	movs	r2, #0
 80033ee:	2180      	movs	r1, #128	; 0x80
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fb80 	bl	8003af6 <UART_WaitOnFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e038      	b.n	8003472 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10b      	bne.n	800341e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003414:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	3302      	adds	r3, #2
 800341a:	61bb      	str	r3, [r7, #24]
 800341c:	e007      	b.n	800342e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	781a      	ldrb	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	3301      	adds	r3, #1
 800342c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1cc      	bne.n	80033e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2200      	movs	r2, #0
 8003454:	2140      	movs	r1, #64	; 0x40
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 fb4d 	bl	8003af6 <UART_WaitOnFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e005      	b.n	8003472 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	e000      	b.n	8003472 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003470:	2302      	movs	r3, #2
  }
}
 8003472:	4618      	mov	r0, r3
 8003474:	3720      	adds	r7, #32
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	4313      	orrs	r3, r2
 800349e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	4ba6      	ldr	r3, [pc, #664]	; (8003740 <UART_SetConfig+0x2c4>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	6979      	ldr	r1, [r7, #20]
 80034b0:	430b      	orrs	r3, r1
 80034b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a94      	ldr	r2, [pc, #592]	; (8003744 <UART_SetConfig+0x2c8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d120      	bne.n	800353a <UART_SetConfig+0xbe>
 80034f8:	4b93      	ldr	r3, [pc, #588]	; (8003748 <UART_SetConfig+0x2cc>)
 80034fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b03      	cmp	r3, #3
 8003504:	d816      	bhi.n	8003534 <UART_SetConfig+0xb8>
 8003506:	a201      	add	r2, pc, #4	; (adr r2, 800350c <UART_SetConfig+0x90>)
 8003508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350c:	0800351d 	.word	0x0800351d
 8003510:	08003529 	.word	0x08003529
 8003514:	08003523 	.word	0x08003523
 8003518:	0800352f 	.word	0x0800352f
 800351c:	2301      	movs	r3, #1
 800351e:	77fb      	strb	r3, [r7, #31]
 8003520:	e150      	b.n	80037c4 <UART_SetConfig+0x348>
 8003522:	2302      	movs	r3, #2
 8003524:	77fb      	strb	r3, [r7, #31]
 8003526:	e14d      	b.n	80037c4 <UART_SetConfig+0x348>
 8003528:	2304      	movs	r3, #4
 800352a:	77fb      	strb	r3, [r7, #31]
 800352c:	e14a      	b.n	80037c4 <UART_SetConfig+0x348>
 800352e:	2308      	movs	r3, #8
 8003530:	77fb      	strb	r3, [r7, #31]
 8003532:	e147      	b.n	80037c4 <UART_SetConfig+0x348>
 8003534:	2310      	movs	r3, #16
 8003536:	77fb      	strb	r3, [r7, #31]
 8003538:	e144      	b.n	80037c4 <UART_SetConfig+0x348>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a83      	ldr	r2, [pc, #524]	; (800374c <UART_SetConfig+0x2d0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d132      	bne.n	80035aa <UART_SetConfig+0x12e>
 8003544:	4b80      	ldr	r3, [pc, #512]	; (8003748 <UART_SetConfig+0x2cc>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b0c      	cmp	r3, #12
 8003550:	d828      	bhi.n	80035a4 <UART_SetConfig+0x128>
 8003552:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <UART_SetConfig+0xdc>)
 8003554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003558:	0800358d 	.word	0x0800358d
 800355c:	080035a5 	.word	0x080035a5
 8003560:	080035a5 	.word	0x080035a5
 8003564:	080035a5 	.word	0x080035a5
 8003568:	08003599 	.word	0x08003599
 800356c:	080035a5 	.word	0x080035a5
 8003570:	080035a5 	.word	0x080035a5
 8003574:	080035a5 	.word	0x080035a5
 8003578:	08003593 	.word	0x08003593
 800357c:	080035a5 	.word	0x080035a5
 8003580:	080035a5 	.word	0x080035a5
 8003584:	080035a5 	.word	0x080035a5
 8003588:	0800359f 	.word	0x0800359f
 800358c:	2300      	movs	r3, #0
 800358e:	77fb      	strb	r3, [r7, #31]
 8003590:	e118      	b.n	80037c4 <UART_SetConfig+0x348>
 8003592:	2302      	movs	r3, #2
 8003594:	77fb      	strb	r3, [r7, #31]
 8003596:	e115      	b.n	80037c4 <UART_SetConfig+0x348>
 8003598:	2304      	movs	r3, #4
 800359a:	77fb      	strb	r3, [r7, #31]
 800359c:	e112      	b.n	80037c4 <UART_SetConfig+0x348>
 800359e:	2308      	movs	r3, #8
 80035a0:	77fb      	strb	r3, [r7, #31]
 80035a2:	e10f      	b.n	80037c4 <UART_SetConfig+0x348>
 80035a4:	2310      	movs	r3, #16
 80035a6:	77fb      	strb	r3, [r7, #31]
 80035a8:	e10c      	b.n	80037c4 <UART_SetConfig+0x348>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a68      	ldr	r2, [pc, #416]	; (8003750 <UART_SetConfig+0x2d4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d120      	bne.n	80035f6 <UART_SetConfig+0x17a>
 80035b4:	4b64      	ldr	r3, [pc, #400]	; (8003748 <UART_SetConfig+0x2cc>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035be:	2b30      	cmp	r3, #48	; 0x30
 80035c0:	d013      	beq.n	80035ea <UART_SetConfig+0x16e>
 80035c2:	2b30      	cmp	r3, #48	; 0x30
 80035c4:	d814      	bhi.n	80035f0 <UART_SetConfig+0x174>
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	d009      	beq.n	80035de <UART_SetConfig+0x162>
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	d810      	bhi.n	80035f0 <UART_SetConfig+0x174>
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <UART_SetConfig+0x15c>
 80035d2:	2b10      	cmp	r3, #16
 80035d4:	d006      	beq.n	80035e4 <UART_SetConfig+0x168>
 80035d6:	e00b      	b.n	80035f0 <UART_SetConfig+0x174>
 80035d8:	2300      	movs	r3, #0
 80035da:	77fb      	strb	r3, [r7, #31]
 80035dc:	e0f2      	b.n	80037c4 <UART_SetConfig+0x348>
 80035de:	2302      	movs	r3, #2
 80035e0:	77fb      	strb	r3, [r7, #31]
 80035e2:	e0ef      	b.n	80037c4 <UART_SetConfig+0x348>
 80035e4:	2304      	movs	r3, #4
 80035e6:	77fb      	strb	r3, [r7, #31]
 80035e8:	e0ec      	b.n	80037c4 <UART_SetConfig+0x348>
 80035ea:	2308      	movs	r3, #8
 80035ec:	77fb      	strb	r3, [r7, #31]
 80035ee:	e0e9      	b.n	80037c4 <UART_SetConfig+0x348>
 80035f0:	2310      	movs	r3, #16
 80035f2:	77fb      	strb	r3, [r7, #31]
 80035f4:	e0e6      	b.n	80037c4 <UART_SetConfig+0x348>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a56      	ldr	r2, [pc, #344]	; (8003754 <UART_SetConfig+0x2d8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d120      	bne.n	8003642 <UART_SetConfig+0x1c6>
 8003600:	4b51      	ldr	r3, [pc, #324]	; (8003748 <UART_SetConfig+0x2cc>)
 8003602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003606:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800360a:	2bc0      	cmp	r3, #192	; 0xc0
 800360c:	d013      	beq.n	8003636 <UART_SetConfig+0x1ba>
 800360e:	2bc0      	cmp	r3, #192	; 0xc0
 8003610:	d814      	bhi.n	800363c <UART_SetConfig+0x1c0>
 8003612:	2b80      	cmp	r3, #128	; 0x80
 8003614:	d009      	beq.n	800362a <UART_SetConfig+0x1ae>
 8003616:	2b80      	cmp	r3, #128	; 0x80
 8003618:	d810      	bhi.n	800363c <UART_SetConfig+0x1c0>
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <UART_SetConfig+0x1a8>
 800361e:	2b40      	cmp	r3, #64	; 0x40
 8003620:	d006      	beq.n	8003630 <UART_SetConfig+0x1b4>
 8003622:	e00b      	b.n	800363c <UART_SetConfig+0x1c0>
 8003624:	2300      	movs	r3, #0
 8003626:	77fb      	strb	r3, [r7, #31]
 8003628:	e0cc      	b.n	80037c4 <UART_SetConfig+0x348>
 800362a:	2302      	movs	r3, #2
 800362c:	77fb      	strb	r3, [r7, #31]
 800362e:	e0c9      	b.n	80037c4 <UART_SetConfig+0x348>
 8003630:	2304      	movs	r3, #4
 8003632:	77fb      	strb	r3, [r7, #31]
 8003634:	e0c6      	b.n	80037c4 <UART_SetConfig+0x348>
 8003636:	2308      	movs	r3, #8
 8003638:	77fb      	strb	r3, [r7, #31]
 800363a:	e0c3      	b.n	80037c4 <UART_SetConfig+0x348>
 800363c:	2310      	movs	r3, #16
 800363e:	77fb      	strb	r3, [r7, #31]
 8003640:	e0c0      	b.n	80037c4 <UART_SetConfig+0x348>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a44      	ldr	r2, [pc, #272]	; (8003758 <UART_SetConfig+0x2dc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d125      	bne.n	8003698 <UART_SetConfig+0x21c>
 800364c:	4b3e      	ldr	r3, [pc, #248]	; (8003748 <UART_SetConfig+0x2cc>)
 800364e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800365a:	d017      	beq.n	800368c <UART_SetConfig+0x210>
 800365c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003660:	d817      	bhi.n	8003692 <UART_SetConfig+0x216>
 8003662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003666:	d00b      	beq.n	8003680 <UART_SetConfig+0x204>
 8003668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800366c:	d811      	bhi.n	8003692 <UART_SetConfig+0x216>
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <UART_SetConfig+0x1fe>
 8003672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003676:	d006      	beq.n	8003686 <UART_SetConfig+0x20a>
 8003678:	e00b      	b.n	8003692 <UART_SetConfig+0x216>
 800367a:	2300      	movs	r3, #0
 800367c:	77fb      	strb	r3, [r7, #31]
 800367e:	e0a1      	b.n	80037c4 <UART_SetConfig+0x348>
 8003680:	2302      	movs	r3, #2
 8003682:	77fb      	strb	r3, [r7, #31]
 8003684:	e09e      	b.n	80037c4 <UART_SetConfig+0x348>
 8003686:	2304      	movs	r3, #4
 8003688:	77fb      	strb	r3, [r7, #31]
 800368a:	e09b      	b.n	80037c4 <UART_SetConfig+0x348>
 800368c:	2308      	movs	r3, #8
 800368e:	77fb      	strb	r3, [r7, #31]
 8003690:	e098      	b.n	80037c4 <UART_SetConfig+0x348>
 8003692:	2310      	movs	r3, #16
 8003694:	77fb      	strb	r3, [r7, #31]
 8003696:	e095      	b.n	80037c4 <UART_SetConfig+0x348>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a2f      	ldr	r2, [pc, #188]	; (800375c <UART_SetConfig+0x2e0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d125      	bne.n	80036ee <UART_SetConfig+0x272>
 80036a2:	4b29      	ldr	r3, [pc, #164]	; (8003748 <UART_SetConfig+0x2cc>)
 80036a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036b0:	d017      	beq.n	80036e2 <UART_SetConfig+0x266>
 80036b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036b6:	d817      	bhi.n	80036e8 <UART_SetConfig+0x26c>
 80036b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036bc:	d00b      	beq.n	80036d6 <UART_SetConfig+0x25a>
 80036be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c2:	d811      	bhi.n	80036e8 <UART_SetConfig+0x26c>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <UART_SetConfig+0x254>
 80036c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036cc:	d006      	beq.n	80036dc <UART_SetConfig+0x260>
 80036ce:	e00b      	b.n	80036e8 <UART_SetConfig+0x26c>
 80036d0:	2301      	movs	r3, #1
 80036d2:	77fb      	strb	r3, [r7, #31]
 80036d4:	e076      	b.n	80037c4 <UART_SetConfig+0x348>
 80036d6:	2302      	movs	r3, #2
 80036d8:	77fb      	strb	r3, [r7, #31]
 80036da:	e073      	b.n	80037c4 <UART_SetConfig+0x348>
 80036dc:	2304      	movs	r3, #4
 80036de:	77fb      	strb	r3, [r7, #31]
 80036e0:	e070      	b.n	80037c4 <UART_SetConfig+0x348>
 80036e2:	2308      	movs	r3, #8
 80036e4:	77fb      	strb	r3, [r7, #31]
 80036e6:	e06d      	b.n	80037c4 <UART_SetConfig+0x348>
 80036e8:	2310      	movs	r3, #16
 80036ea:	77fb      	strb	r3, [r7, #31]
 80036ec:	e06a      	b.n	80037c4 <UART_SetConfig+0x348>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1b      	ldr	r2, [pc, #108]	; (8003760 <UART_SetConfig+0x2e4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d138      	bne.n	800376a <UART_SetConfig+0x2ee>
 80036f8:	4b13      	ldr	r3, [pc, #76]	; (8003748 <UART_SetConfig+0x2cc>)
 80036fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003702:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003706:	d017      	beq.n	8003738 <UART_SetConfig+0x2bc>
 8003708:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800370c:	d82a      	bhi.n	8003764 <UART_SetConfig+0x2e8>
 800370e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003712:	d00b      	beq.n	800372c <UART_SetConfig+0x2b0>
 8003714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003718:	d824      	bhi.n	8003764 <UART_SetConfig+0x2e8>
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <UART_SetConfig+0x2aa>
 800371e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003722:	d006      	beq.n	8003732 <UART_SetConfig+0x2b6>
 8003724:	e01e      	b.n	8003764 <UART_SetConfig+0x2e8>
 8003726:	2300      	movs	r3, #0
 8003728:	77fb      	strb	r3, [r7, #31]
 800372a:	e04b      	b.n	80037c4 <UART_SetConfig+0x348>
 800372c:	2302      	movs	r3, #2
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	e048      	b.n	80037c4 <UART_SetConfig+0x348>
 8003732:	2304      	movs	r3, #4
 8003734:	77fb      	strb	r3, [r7, #31]
 8003736:	e045      	b.n	80037c4 <UART_SetConfig+0x348>
 8003738:	2308      	movs	r3, #8
 800373a:	77fb      	strb	r3, [r7, #31]
 800373c:	e042      	b.n	80037c4 <UART_SetConfig+0x348>
 800373e:	bf00      	nop
 8003740:	efff69f3 	.word	0xefff69f3
 8003744:	40011000 	.word	0x40011000
 8003748:	40023800 	.word	0x40023800
 800374c:	40004400 	.word	0x40004400
 8003750:	40004800 	.word	0x40004800
 8003754:	40004c00 	.word	0x40004c00
 8003758:	40005000 	.word	0x40005000
 800375c:	40011400 	.word	0x40011400
 8003760:	40007800 	.word	0x40007800
 8003764:	2310      	movs	r3, #16
 8003766:	77fb      	strb	r3, [r7, #31]
 8003768:	e02c      	b.n	80037c4 <UART_SetConfig+0x348>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a72      	ldr	r2, [pc, #456]	; (8003938 <UART_SetConfig+0x4bc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d125      	bne.n	80037c0 <UART_SetConfig+0x344>
 8003774:	4b71      	ldr	r3, [pc, #452]	; (800393c <UART_SetConfig+0x4c0>)
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800377e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003782:	d017      	beq.n	80037b4 <UART_SetConfig+0x338>
 8003784:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003788:	d817      	bhi.n	80037ba <UART_SetConfig+0x33e>
 800378a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800378e:	d00b      	beq.n	80037a8 <UART_SetConfig+0x32c>
 8003790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003794:	d811      	bhi.n	80037ba <UART_SetConfig+0x33e>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <UART_SetConfig+0x326>
 800379a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800379e:	d006      	beq.n	80037ae <UART_SetConfig+0x332>
 80037a0:	e00b      	b.n	80037ba <UART_SetConfig+0x33e>
 80037a2:	2300      	movs	r3, #0
 80037a4:	77fb      	strb	r3, [r7, #31]
 80037a6:	e00d      	b.n	80037c4 <UART_SetConfig+0x348>
 80037a8:	2302      	movs	r3, #2
 80037aa:	77fb      	strb	r3, [r7, #31]
 80037ac:	e00a      	b.n	80037c4 <UART_SetConfig+0x348>
 80037ae:	2304      	movs	r3, #4
 80037b0:	77fb      	strb	r3, [r7, #31]
 80037b2:	e007      	b.n	80037c4 <UART_SetConfig+0x348>
 80037b4:	2308      	movs	r3, #8
 80037b6:	77fb      	strb	r3, [r7, #31]
 80037b8:	e004      	b.n	80037c4 <UART_SetConfig+0x348>
 80037ba:	2310      	movs	r3, #16
 80037bc:	77fb      	strb	r3, [r7, #31]
 80037be:	e001      	b.n	80037c4 <UART_SetConfig+0x348>
 80037c0:	2310      	movs	r3, #16
 80037c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037cc:	d15b      	bne.n	8003886 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80037ce:	7ffb      	ldrb	r3, [r7, #31]
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d828      	bhi.n	8003826 <UART_SetConfig+0x3aa>
 80037d4:	a201      	add	r2, pc, #4	; (adr r2, 80037dc <UART_SetConfig+0x360>)
 80037d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037da:	bf00      	nop
 80037dc:	08003801 	.word	0x08003801
 80037e0:	08003809 	.word	0x08003809
 80037e4:	08003811 	.word	0x08003811
 80037e8:	08003827 	.word	0x08003827
 80037ec:	08003817 	.word	0x08003817
 80037f0:	08003827 	.word	0x08003827
 80037f4:	08003827 	.word	0x08003827
 80037f8:	08003827 	.word	0x08003827
 80037fc:	0800381f 	.word	0x0800381f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003800:	f7fe ffcc 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 8003804:	61b8      	str	r0, [r7, #24]
        break;
 8003806:	e013      	b.n	8003830 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003808:	f7fe ffdc 	bl	80027c4 <HAL_RCC_GetPCLK2Freq>
 800380c:	61b8      	str	r0, [r7, #24]
        break;
 800380e:	e00f      	b.n	8003830 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003810:	4b4b      	ldr	r3, [pc, #300]	; (8003940 <UART_SetConfig+0x4c4>)
 8003812:	61bb      	str	r3, [r7, #24]
        break;
 8003814:	e00c      	b.n	8003830 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003816:	f7fe feaf 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 800381a:	61b8      	str	r0, [r7, #24]
        break;
 800381c:	e008      	b.n	8003830 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800381e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003822:	61bb      	str	r3, [r7, #24]
        break;
 8003824:	e004      	b.n	8003830 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003826:	2300      	movs	r3, #0
 8003828:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	77bb      	strb	r3, [r7, #30]
        break;
 800382e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d074      	beq.n	8003920 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	005a      	lsls	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	085b      	lsrs	r3, r3, #1
 8003840:	441a      	add	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	fbb2 f3f3 	udiv	r3, r2, r3
 800384a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	2b0f      	cmp	r3, #15
 8003850:	d916      	bls.n	8003880 <UART_SetConfig+0x404>
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003858:	d212      	bcs.n	8003880 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	b29b      	uxth	r3, r3
 800385e:	f023 030f 	bic.w	r3, r3, #15
 8003862:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	085b      	lsrs	r3, r3, #1
 8003868:	b29b      	uxth	r3, r3
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	b29a      	uxth	r2, r3
 8003870:	89fb      	ldrh	r3, [r7, #14]
 8003872:	4313      	orrs	r3, r2
 8003874:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	89fa      	ldrh	r2, [r7, #14]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	e04f      	b.n	8003920 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	77bb      	strb	r3, [r7, #30]
 8003884:	e04c      	b.n	8003920 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003886:	7ffb      	ldrb	r3, [r7, #31]
 8003888:	2b08      	cmp	r3, #8
 800388a:	d828      	bhi.n	80038de <UART_SetConfig+0x462>
 800388c:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <UART_SetConfig+0x418>)
 800388e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003892:	bf00      	nop
 8003894:	080038b9 	.word	0x080038b9
 8003898:	080038c1 	.word	0x080038c1
 800389c:	080038c9 	.word	0x080038c9
 80038a0:	080038df 	.word	0x080038df
 80038a4:	080038cf 	.word	0x080038cf
 80038a8:	080038df 	.word	0x080038df
 80038ac:	080038df 	.word	0x080038df
 80038b0:	080038df 	.word	0x080038df
 80038b4:	080038d7 	.word	0x080038d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b8:	f7fe ff70 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 80038bc:	61b8      	str	r0, [r7, #24]
        break;
 80038be:	e013      	b.n	80038e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038c0:	f7fe ff80 	bl	80027c4 <HAL_RCC_GetPCLK2Freq>
 80038c4:	61b8      	str	r0, [r7, #24]
        break;
 80038c6:	e00f      	b.n	80038e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c8:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <UART_SetConfig+0x4c4>)
 80038ca:	61bb      	str	r3, [r7, #24]
        break;
 80038cc:	e00c      	b.n	80038e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ce:	f7fe fe53 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 80038d2:	61b8      	str	r0, [r7, #24]
        break;
 80038d4:	e008      	b.n	80038e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038da:	61bb      	str	r3, [r7, #24]
        break;
 80038dc:	e004      	b.n	80038e8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	77bb      	strb	r3, [r7, #30]
        break;
 80038e6:	bf00      	nop
    }

    if (pclk != 0U)
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d018      	beq.n	8003920 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	085a      	lsrs	r2, r3, #1
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	441a      	add	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	2b0f      	cmp	r3, #15
 8003906:	d909      	bls.n	800391c <UART_SetConfig+0x4a0>
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800390e:	d205      	bcs.n	800391c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	b29a      	uxth	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	e001      	b.n	8003920 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800392c:	7fbb      	ldrb	r3, [r7, #30]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3720      	adds	r7, #32
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40007c00 	.word	0x40007c00
 800393c:	40023800 	.word	0x40023800
 8003940:	00f42400 	.word	0x00f42400

08003944 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01a      	beq.n	8003a5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a42:	d10a      	bne.n	8003a5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	605a      	str	r2, [r3, #4]
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a98:	f7fd fa6a 	bl	8000f70 <HAL_GetTick>
 8003a9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d10e      	bne.n	8003aca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f81b 	bl	8003af6 <UART_WaitOnFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e011      	b.n	8003aee <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2220      	movs	r2, #32
 8003ace:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b09c      	sub	sp, #112	; 0x70
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	603b      	str	r3, [r7, #0]
 8003b02:	4613      	mov	r3, r2
 8003b04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b06:	e0a7      	b.n	8003c58 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0e:	f000 80a3 	beq.w	8003c58 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b12:	f7fd fa2d 	bl	8000f70 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d302      	bcc.n	8003b28 <UART_WaitOnFlagUntilTimeout+0x32>
 8003b22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d13f      	bne.n	8003ba8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b30:	e853 3f00 	ldrex	r3, [r3]
 8003b34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b3c:	667b      	str	r3, [r7, #100]	; 0x64
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b48:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b4e:	e841 2300 	strex	r3, r2, [r1]
 8003b52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1e6      	bne.n	8003b28 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3308      	adds	r3, #8
 8003b60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b64:	e853 3f00 	ldrex	r3, [r3]
 8003b68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	663b      	str	r3, [r7, #96]	; 0x60
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3308      	adds	r3, #8
 8003b78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e5      	bne.n	8003b5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2220      	movs	r2, #32
 8003b92:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e068      	b.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d050      	beq.n	8003c58 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bc4:	d148      	bne.n	8003c58 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd8:	e853 3f00 	ldrex	r3, [r3]
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003be4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bee:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bf6:	e841 2300 	strex	r3, r2, [r1]
 8003bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1e6      	bne.n	8003bd0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3308      	adds	r3, #8
 8003c08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	e853 3f00 	ldrex	r3, [r3]
 8003c10:	613b      	str	r3, [r7, #16]
   return(result);
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f023 0301 	bic.w	r3, r3, #1
 8003c18:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3308      	adds	r3, #8
 8003c20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c22:	623a      	str	r2, [r7, #32]
 8003c24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c26:	69f9      	ldr	r1, [r7, #28]
 8003c28:	6a3a      	ldr	r2, [r7, #32]
 8003c2a:	e841 2300 	strex	r3, r2, [r1]
 8003c2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1e5      	bne.n	8003c02 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e010      	b.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69da      	ldr	r2, [r3, #28]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	4013      	ands	r3, r2
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	bf0c      	ite	eq
 8003c68:	2301      	moveq	r3, #1
 8003c6a:	2300      	movne	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	461a      	mov	r2, r3
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	f43f af48 	beq.w	8003b08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3770      	adds	r7, #112	; 0x70
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c84:	b084      	sub	sp, #16
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	f107 001c 	add.w	r0, r7, #28
 8003c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d120      	bne.n	8003cde <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	4b20      	ldr	r3, [pc, #128]	; (8003d30 <USB_CoreInit+0xac>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d105      	bne.n	8003cd2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fa96 	bl	8004204 <USB_CoreReset>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	73fb      	strb	r3, [r7, #15]
 8003cdc:	e010      	b.n	8003d00 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fa8a 	bl	8004204 <USB_CoreReset>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d10b      	bne.n	8003d1e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f043 0206 	orr.w	r2, r3, #6
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f043 0220 	orr.w	r2, r3, #32
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d2a:	b004      	add	sp, #16
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	ffbdffbf 	.word	0xffbdffbf

08003d34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f023 0201 	bic.w	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b084      	sub	sp, #16
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d115      	bne.n	8003da4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d84:	2001      	movs	r0, #1
 8003d86:	f7fd f8ff 	bl	8000f88 <HAL_Delay>
      ms++;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 fa29 	bl	80041e8 <USB_GetMode>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d01e      	beq.n	8003dda <USB_SetCurrentMode+0x84>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b31      	cmp	r3, #49	; 0x31
 8003da0:	d9f0      	bls.n	8003d84 <USB_SetCurrentMode+0x2e>
 8003da2:	e01a      	b.n	8003dda <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d115      	bne.n	8003dd6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003db6:	2001      	movs	r0, #1
 8003db8:	f7fd f8e6 	bl	8000f88 <HAL_Delay>
      ms++;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fa10 	bl	80041e8 <USB_GetMode>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <USB_SetCurrentMode+0x84>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b31      	cmp	r3, #49	; 0x31
 8003dd2:	d9f0      	bls.n	8003db6 <USB_SetCurrentMode+0x60>
 8003dd4:	e001      	b.n	8003dda <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e005      	b.n	8003de6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b32      	cmp	r3, #50	; 0x32
 8003dde:	d101      	bne.n	8003de4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003df0:	b084      	sub	sp, #16
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b086      	sub	sp, #24
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	e009      	b.n	8003e24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	3340      	adds	r3, #64	; 0x40
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	3301      	adds	r3, #1
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	2b0e      	cmp	r3, #14
 8003e28:	d9f2      	bls.n	8003e10 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d11c      	bne.n	8003e6a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e3e:	f043 0302 	orr.w	r3, r3, #2
 8003e42:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	e005      	b.n	8003e76 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2300      	movs	r3, #0
 8003e80:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e88:	4619      	mov	r1, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e90:	461a      	mov	r2, r3
 8003e92:	680b      	ldr	r3, [r1, #0]
 8003e94:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d10c      	bne.n	8003eb6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d104      	bne.n	8003eac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f965 	bl	8004174 <USB_SetDevSpeed>
 8003eaa:	e008      	b.n	8003ebe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003eac:	2101      	movs	r1, #1
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f960 	bl	8004174 <USB_SetDevSpeed>
 8003eb4:	e003      	b.n	8003ebe <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003eb6:	2103      	movs	r1, #3
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f95b 	bl	8004174 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ebe:	2110      	movs	r1, #16
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f8f3 	bl	80040ac <USB_FlushTxFifo>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f91f 	bl	8004114 <USB_FlushRxFifo>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2300      	movs	r3, #0
 8003eea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003efe:	461a      	mov	r2, r3
 8003f00:	2300      	movs	r3, #0
 8003f02:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	e043      	b.n	8003f92 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f20:	d118      	bne.n	8003f54 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f34:	461a      	mov	r2, r3
 8003f36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	e013      	b.n	8003f66 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	e008      	b.n	8003f66 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f60:	461a      	mov	r2, r3
 8003f62:	2300      	movs	r3, #0
 8003f64:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f72:	461a      	mov	r2, r3
 8003f74:	2300      	movs	r3, #0
 8003f76:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f84:	461a      	mov	r2, r3
 8003f86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d3b7      	bcc.n	8003f0a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	e043      	b.n	8004028 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fb6:	d118      	bne.n	8003fea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10a      	bne.n	8003fd4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	e013      	b.n	8003ffc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	e008      	b.n	8003ffc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004008:	461a      	mov	r2, r3
 800400a:	2300      	movs	r3, #0
 800400c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401a:	461a      	mov	r2, r3
 800401c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004020:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	3301      	adds	r3, #1
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	429a      	cmp	r2, r3
 800402e:	d3b7      	bcc.n	8003fa0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800403e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004042:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004050:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	2b00      	cmp	r3, #0
 8004056:	d105      	bne.n	8004064 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	f043 0210 	orr.w	r2, r3, #16
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699a      	ldr	r2, [r3, #24]
 8004068:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <USB_DevInit+0x2b4>)
 800406a:	4313      	orrs	r3, r2
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	f043 0208 	orr.w	r2, r3, #8
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004084:	2b01      	cmp	r3, #1
 8004086:	d105      	bne.n	8004094 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699a      	ldr	r2, [r3, #24]
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <USB_DevInit+0x2b8>)
 800408e:	4313      	orrs	r3, r2
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004094:	7dfb      	ldrb	r3, [r7, #23]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040a0:	b004      	add	sp, #16
 80040a2:	4770      	bx	lr
 80040a4:	803c3800 	.word	0x803c3800
 80040a8:	40000004 	.word	0x40000004

080040ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3301      	adds	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4a13      	ldr	r2, [pc, #76]	; (8004110 <USB_FlushTxFifo+0x64>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d901      	bls.n	80040cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e01b      	b.n	8004104 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	daf2      	bge.n	80040ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	019b      	lsls	r3, r3, #6
 80040dc:	f043 0220 	orr.w	r2, r3, #32
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3301      	adds	r3, #1
 80040e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4a08      	ldr	r2, [pc, #32]	; (8004110 <USB_FlushTxFifo+0x64>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d901      	bls.n	80040f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e006      	b.n	8004104 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d0f0      	beq.n	80040e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	00030d40 	.word	0x00030d40

08004114 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3301      	adds	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4a11      	ldr	r2, [pc, #68]	; (8004170 <USB_FlushRxFifo+0x5c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d901      	bls.n	8004132 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e018      	b.n	8004164 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	daf2      	bge.n	8004120 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2210      	movs	r2, #16
 8004142:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3301      	adds	r3, #1
 8004148:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4a08      	ldr	r2, [pc, #32]	; (8004170 <USB_FlushRxFifo+0x5c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d901      	bls.n	8004156 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e006      	b.n	8004164 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f003 0310 	and.w	r3, r3, #16
 800415e:	2b10      	cmp	r3, #16
 8004160:	d0f0      	beq.n	8004144 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	00030d40 	.word	0x00030d40

08004174 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	68f9      	ldr	r1, [r7, #12]
 8004190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004194:	4313      	orrs	r3, r2
 8004196:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b085      	sub	sp, #20
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80041c0:	f023 0303 	bic.w	r3, r3, #3
 80041c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041d4:	f043 0302 	orr.w	r3, r3, #2
 80041d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	f003 0301 	and.w	r3, r3, #1
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	3301      	adds	r3, #1
 8004214:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4a13      	ldr	r2, [pc, #76]	; (8004268 <USB_CoreReset+0x64>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d901      	bls.n	8004222 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e01b      	b.n	800425a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	2b00      	cmp	r3, #0
 8004228:	daf2      	bge.n	8004210 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f043 0201 	orr.w	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3301      	adds	r3, #1
 800423e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4a09      	ldr	r2, [pc, #36]	; (8004268 <USB_CoreReset+0x64>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d901      	bls.n	800424c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e006      	b.n	800425a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b01      	cmp	r3, #1
 8004256:	d0f0      	beq.n	800423a <USB_CoreReset+0x36>

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	00030d40 	.word	0x00030d40

0800426c <__io_putchar>:
//}
//


int __io_putchar(int ch)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8004274:	1d39      	adds	r1, r7, #4
 8004276:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800427a:	2201      	movs	r2, #1
 800427c:	4803      	ldr	r0, [pc, #12]	; (800428c <__io_putchar+0x20>)
 800427e:	f7ff f879 	bl	8003374 <HAL_UART_Transmit>
	return ch;
 8004282:	687b      	ldr	r3, [r7, #4]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20000304 	.word	0x20000304

08004290 <usermain>:
#include "usart.h"
#include "usb_otg.h"
#include "gpio.h"

void usermain(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
//	FLASH_OBProgramInitTypeDeg optionBytes;
//	HAL_FLASHEx_OBGetConfig(&optionBytes);
//	printf("Booting address of CM7 = %0BlX");
//
	 while (1) {
		 printf("hello\r\n");
 8004294:	4806      	ldr	r0, [pc, #24]	; (80042b0 <usermain+0x20>)
 8004296:	f000 f925 	bl	80044e4 <puts>
		 HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800429a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800429e:	4805      	ldr	r0, [pc, #20]	; (80042b4 <usermain+0x24>)
 80042a0:	f7fd fc67 	bl	8001b72 <HAL_GPIO_TogglePin>
		 HAL_Delay(500);
 80042a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042a8:	f7fc fe6e 	bl	8000f88 <HAL_Delay>
		 printf("hello\r\n");
 80042ac:	e7f2      	b.n	8004294 <usermain+0x4>
 80042ae:	bf00      	nop
 80042b0:	08004c28 	.word	0x08004c28
 80042b4:	40020400 	.word	0x40020400

080042b8 <std>:
 80042b8:	2300      	movs	r3, #0
 80042ba:	b510      	push	{r4, lr}
 80042bc:	4604      	mov	r4, r0
 80042be:	e9c0 3300 	strd	r3, r3, [r0]
 80042c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042c6:	6083      	str	r3, [r0, #8]
 80042c8:	8181      	strh	r1, [r0, #12]
 80042ca:	6643      	str	r3, [r0, #100]	; 0x64
 80042cc:	81c2      	strh	r2, [r0, #14]
 80042ce:	6183      	str	r3, [r0, #24]
 80042d0:	4619      	mov	r1, r3
 80042d2:	2208      	movs	r2, #8
 80042d4:	305c      	adds	r0, #92	; 0x5c
 80042d6:	f000 f9e5 	bl	80046a4 <memset>
 80042da:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <std+0x58>)
 80042dc:	6263      	str	r3, [r4, #36]	; 0x24
 80042de:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <std+0x5c>)
 80042e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80042e2:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <std+0x60>)
 80042e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042e6:	4b0d      	ldr	r3, [pc, #52]	; (800431c <std+0x64>)
 80042e8:	6323      	str	r3, [r4, #48]	; 0x30
 80042ea:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <std+0x68>)
 80042ec:	6224      	str	r4, [r4, #32]
 80042ee:	429c      	cmp	r4, r3
 80042f0:	d006      	beq.n	8004300 <std+0x48>
 80042f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80042f6:	4294      	cmp	r4, r2
 80042f8:	d002      	beq.n	8004300 <std+0x48>
 80042fa:	33d0      	adds	r3, #208	; 0xd0
 80042fc:	429c      	cmp	r4, r3
 80042fe:	d105      	bne.n	800430c <std+0x54>
 8004300:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004308:	f000 ba44 	b.w	8004794 <__retarget_lock_init_recursive>
 800430c:	bd10      	pop	{r4, pc}
 800430e:	bf00      	nop
 8004310:	080044f5 	.word	0x080044f5
 8004314:	08004517 	.word	0x08004517
 8004318:	0800454f 	.word	0x0800454f
 800431c:	08004573 	.word	0x08004573
 8004320:	20000898 	.word	0x20000898

08004324 <stdio_exit_handler>:
 8004324:	4a02      	ldr	r2, [pc, #8]	; (8004330 <stdio_exit_handler+0xc>)
 8004326:	4903      	ldr	r1, [pc, #12]	; (8004334 <stdio_exit_handler+0x10>)
 8004328:	4803      	ldr	r0, [pc, #12]	; (8004338 <stdio_exit_handler+0x14>)
 800432a:	f000 b869 	b.w	8004400 <_fwalk_sglue>
 800432e:	bf00      	nop
 8004330:	2000000c 	.word	0x2000000c
 8004334:	08004a99 	.word	0x08004a99
 8004338:	20000018 	.word	0x20000018

0800433c <cleanup_stdio>:
 800433c:	6841      	ldr	r1, [r0, #4]
 800433e:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <cleanup_stdio+0x34>)
 8004340:	4299      	cmp	r1, r3
 8004342:	b510      	push	{r4, lr}
 8004344:	4604      	mov	r4, r0
 8004346:	d001      	beq.n	800434c <cleanup_stdio+0x10>
 8004348:	f000 fba6 	bl	8004a98 <_fflush_r>
 800434c:	68a1      	ldr	r1, [r4, #8]
 800434e:	4b09      	ldr	r3, [pc, #36]	; (8004374 <cleanup_stdio+0x38>)
 8004350:	4299      	cmp	r1, r3
 8004352:	d002      	beq.n	800435a <cleanup_stdio+0x1e>
 8004354:	4620      	mov	r0, r4
 8004356:	f000 fb9f 	bl	8004a98 <_fflush_r>
 800435a:	68e1      	ldr	r1, [r4, #12]
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <cleanup_stdio+0x3c>)
 800435e:	4299      	cmp	r1, r3
 8004360:	d004      	beq.n	800436c <cleanup_stdio+0x30>
 8004362:	4620      	mov	r0, r4
 8004364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004368:	f000 bb96 	b.w	8004a98 <_fflush_r>
 800436c:	bd10      	pop	{r4, pc}
 800436e:	bf00      	nop
 8004370:	20000898 	.word	0x20000898
 8004374:	20000900 	.word	0x20000900
 8004378:	20000968 	.word	0x20000968

0800437c <global_stdio_init.part.0>:
 800437c:	b510      	push	{r4, lr}
 800437e:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <global_stdio_init.part.0+0x30>)
 8004380:	4c0b      	ldr	r4, [pc, #44]	; (80043b0 <global_stdio_init.part.0+0x34>)
 8004382:	4a0c      	ldr	r2, [pc, #48]	; (80043b4 <global_stdio_init.part.0+0x38>)
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	4620      	mov	r0, r4
 8004388:	2200      	movs	r2, #0
 800438a:	2104      	movs	r1, #4
 800438c:	f7ff ff94 	bl	80042b8 <std>
 8004390:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004394:	2201      	movs	r2, #1
 8004396:	2109      	movs	r1, #9
 8004398:	f7ff ff8e 	bl	80042b8 <std>
 800439c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80043a0:	2202      	movs	r2, #2
 80043a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043a6:	2112      	movs	r1, #18
 80043a8:	f7ff bf86 	b.w	80042b8 <std>
 80043ac:	200009d0 	.word	0x200009d0
 80043b0:	20000898 	.word	0x20000898
 80043b4:	08004325 	.word	0x08004325

080043b8 <__sfp_lock_acquire>:
 80043b8:	4801      	ldr	r0, [pc, #4]	; (80043c0 <__sfp_lock_acquire+0x8>)
 80043ba:	f000 b9ec 	b.w	8004796 <__retarget_lock_acquire_recursive>
 80043be:	bf00      	nop
 80043c0:	200009d9 	.word	0x200009d9

080043c4 <__sfp_lock_release>:
 80043c4:	4801      	ldr	r0, [pc, #4]	; (80043cc <__sfp_lock_release+0x8>)
 80043c6:	f000 b9e7 	b.w	8004798 <__retarget_lock_release_recursive>
 80043ca:	bf00      	nop
 80043cc:	200009d9 	.word	0x200009d9

080043d0 <__sinit>:
 80043d0:	b510      	push	{r4, lr}
 80043d2:	4604      	mov	r4, r0
 80043d4:	f7ff fff0 	bl	80043b8 <__sfp_lock_acquire>
 80043d8:	6a23      	ldr	r3, [r4, #32]
 80043da:	b11b      	cbz	r3, 80043e4 <__sinit+0x14>
 80043dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043e0:	f7ff bff0 	b.w	80043c4 <__sfp_lock_release>
 80043e4:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <__sinit+0x28>)
 80043e6:	6223      	str	r3, [r4, #32]
 80043e8:	4b04      	ldr	r3, [pc, #16]	; (80043fc <__sinit+0x2c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1f5      	bne.n	80043dc <__sinit+0xc>
 80043f0:	f7ff ffc4 	bl	800437c <global_stdio_init.part.0>
 80043f4:	e7f2      	b.n	80043dc <__sinit+0xc>
 80043f6:	bf00      	nop
 80043f8:	0800433d 	.word	0x0800433d
 80043fc:	200009d0 	.word	0x200009d0

08004400 <_fwalk_sglue>:
 8004400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004404:	4607      	mov	r7, r0
 8004406:	4688      	mov	r8, r1
 8004408:	4614      	mov	r4, r2
 800440a:	2600      	movs	r6, #0
 800440c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004410:	f1b9 0901 	subs.w	r9, r9, #1
 8004414:	d505      	bpl.n	8004422 <_fwalk_sglue+0x22>
 8004416:	6824      	ldr	r4, [r4, #0]
 8004418:	2c00      	cmp	r4, #0
 800441a:	d1f7      	bne.n	800440c <_fwalk_sglue+0xc>
 800441c:	4630      	mov	r0, r6
 800441e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004422:	89ab      	ldrh	r3, [r5, #12]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d907      	bls.n	8004438 <_fwalk_sglue+0x38>
 8004428:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800442c:	3301      	adds	r3, #1
 800442e:	d003      	beq.n	8004438 <_fwalk_sglue+0x38>
 8004430:	4629      	mov	r1, r5
 8004432:	4638      	mov	r0, r7
 8004434:	47c0      	blx	r8
 8004436:	4306      	orrs	r6, r0
 8004438:	3568      	adds	r5, #104	; 0x68
 800443a:	e7e9      	b.n	8004410 <_fwalk_sglue+0x10>

0800443c <_puts_r>:
 800443c:	6a03      	ldr	r3, [r0, #32]
 800443e:	b570      	push	{r4, r5, r6, lr}
 8004440:	6884      	ldr	r4, [r0, #8]
 8004442:	4605      	mov	r5, r0
 8004444:	460e      	mov	r6, r1
 8004446:	b90b      	cbnz	r3, 800444c <_puts_r+0x10>
 8004448:	f7ff ffc2 	bl	80043d0 <__sinit>
 800444c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800444e:	07db      	lsls	r3, r3, #31
 8004450:	d405      	bmi.n	800445e <_puts_r+0x22>
 8004452:	89a3      	ldrh	r3, [r4, #12]
 8004454:	0598      	lsls	r0, r3, #22
 8004456:	d402      	bmi.n	800445e <_puts_r+0x22>
 8004458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800445a:	f000 f99c 	bl	8004796 <__retarget_lock_acquire_recursive>
 800445e:	89a3      	ldrh	r3, [r4, #12]
 8004460:	0719      	lsls	r1, r3, #28
 8004462:	d513      	bpl.n	800448c <_puts_r+0x50>
 8004464:	6923      	ldr	r3, [r4, #16]
 8004466:	b18b      	cbz	r3, 800448c <_puts_r+0x50>
 8004468:	3e01      	subs	r6, #1
 800446a:	68a3      	ldr	r3, [r4, #8]
 800446c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004470:	3b01      	subs	r3, #1
 8004472:	60a3      	str	r3, [r4, #8]
 8004474:	b9e9      	cbnz	r1, 80044b2 <_puts_r+0x76>
 8004476:	2b00      	cmp	r3, #0
 8004478:	da2e      	bge.n	80044d8 <_puts_r+0x9c>
 800447a:	4622      	mov	r2, r4
 800447c:	210a      	movs	r1, #10
 800447e:	4628      	mov	r0, r5
 8004480:	f000 f87b 	bl	800457a <__swbuf_r>
 8004484:	3001      	adds	r0, #1
 8004486:	d007      	beq.n	8004498 <_puts_r+0x5c>
 8004488:	250a      	movs	r5, #10
 800448a:	e007      	b.n	800449c <_puts_r+0x60>
 800448c:	4621      	mov	r1, r4
 800448e:	4628      	mov	r0, r5
 8004490:	f000 f8b0 	bl	80045f4 <__swsetup_r>
 8004494:	2800      	cmp	r0, #0
 8004496:	d0e7      	beq.n	8004468 <_puts_r+0x2c>
 8004498:	f04f 35ff 	mov.w	r5, #4294967295
 800449c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800449e:	07da      	lsls	r2, r3, #31
 80044a0:	d405      	bmi.n	80044ae <_puts_r+0x72>
 80044a2:	89a3      	ldrh	r3, [r4, #12]
 80044a4:	059b      	lsls	r3, r3, #22
 80044a6:	d402      	bmi.n	80044ae <_puts_r+0x72>
 80044a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044aa:	f000 f975 	bl	8004798 <__retarget_lock_release_recursive>
 80044ae:	4628      	mov	r0, r5
 80044b0:	bd70      	pop	{r4, r5, r6, pc}
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	da04      	bge.n	80044c0 <_puts_r+0x84>
 80044b6:	69a2      	ldr	r2, [r4, #24]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	dc06      	bgt.n	80044ca <_puts_r+0x8e>
 80044bc:	290a      	cmp	r1, #10
 80044be:	d004      	beq.n	80044ca <_puts_r+0x8e>
 80044c0:	6823      	ldr	r3, [r4, #0]
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	6022      	str	r2, [r4, #0]
 80044c6:	7019      	strb	r1, [r3, #0]
 80044c8:	e7cf      	b.n	800446a <_puts_r+0x2e>
 80044ca:	4622      	mov	r2, r4
 80044cc:	4628      	mov	r0, r5
 80044ce:	f000 f854 	bl	800457a <__swbuf_r>
 80044d2:	3001      	adds	r0, #1
 80044d4:	d1c9      	bne.n	800446a <_puts_r+0x2e>
 80044d6:	e7df      	b.n	8004498 <_puts_r+0x5c>
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	250a      	movs	r5, #10
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	6022      	str	r2, [r4, #0]
 80044e0:	701d      	strb	r5, [r3, #0]
 80044e2:	e7db      	b.n	800449c <_puts_r+0x60>

080044e4 <puts>:
 80044e4:	4b02      	ldr	r3, [pc, #8]	; (80044f0 <puts+0xc>)
 80044e6:	4601      	mov	r1, r0
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	f7ff bfa7 	b.w	800443c <_puts_r>
 80044ee:	bf00      	nop
 80044f0:	20000064 	.word	0x20000064

080044f4 <__sread>:
 80044f4:	b510      	push	{r4, lr}
 80044f6:	460c      	mov	r4, r1
 80044f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044fc:	f000 f8fc 	bl	80046f8 <_read_r>
 8004500:	2800      	cmp	r0, #0
 8004502:	bfab      	itete	ge
 8004504:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004506:	89a3      	ldrhlt	r3, [r4, #12]
 8004508:	181b      	addge	r3, r3, r0
 800450a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800450e:	bfac      	ite	ge
 8004510:	6563      	strge	r3, [r4, #84]	; 0x54
 8004512:	81a3      	strhlt	r3, [r4, #12]
 8004514:	bd10      	pop	{r4, pc}

08004516 <__swrite>:
 8004516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800451a:	461f      	mov	r7, r3
 800451c:	898b      	ldrh	r3, [r1, #12]
 800451e:	05db      	lsls	r3, r3, #23
 8004520:	4605      	mov	r5, r0
 8004522:	460c      	mov	r4, r1
 8004524:	4616      	mov	r6, r2
 8004526:	d505      	bpl.n	8004534 <__swrite+0x1e>
 8004528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800452c:	2302      	movs	r3, #2
 800452e:	2200      	movs	r2, #0
 8004530:	f000 f8d0 	bl	80046d4 <_lseek_r>
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800453a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800453e:	81a3      	strh	r3, [r4, #12]
 8004540:	4632      	mov	r2, r6
 8004542:	463b      	mov	r3, r7
 8004544:	4628      	mov	r0, r5
 8004546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800454a:	f000 b8e7 	b.w	800471c <_write_r>

0800454e <__sseek>:
 800454e:	b510      	push	{r4, lr}
 8004550:	460c      	mov	r4, r1
 8004552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004556:	f000 f8bd 	bl	80046d4 <_lseek_r>
 800455a:	1c43      	adds	r3, r0, #1
 800455c:	89a3      	ldrh	r3, [r4, #12]
 800455e:	bf15      	itete	ne
 8004560:	6560      	strne	r0, [r4, #84]	; 0x54
 8004562:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004566:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800456a:	81a3      	strheq	r3, [r4, #12]
 800456c:	bf18      	it	ne
 800456e:	81a3      	strhne	r3, [r4, #12]
 8004570:	bd10      	pop	{r4, pc}

08004572 <__sclose>:
 8004572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004576:	f000 b89d 	b.w	80046b4 <_close_r>

0800457a <__swbuf_r>:
 800457a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457c:	460e      	mov	r6, r1
 800457e:	4614      	mov	r4, r2
 8004580:	4605      	mov	r5, r0
 8004582:	b118      	cbz	r0, 800458c <__swbuf_r+0x12>
 8004584:	6a03      	ldr	r3, [r0, #32]
 8004586:	b90b      	cbnz	r3, 800458c <__swbuf_r+0x12>
 8004588:	f7ff ff22 	bl	80043d0 <__sinit>
 800458c:	69a3      	ldr	r3, [r4, #24]
 800458e:	60a3      	str	r3, [r4, #8]
 8004590:	89a3      	ldrh	r3, [r4, #12]
 8004592:	071a      	lsls	r2, r3, #28
 8004594:	d525      	bpl.n	80045e2 <__swbuf_r+0x68>
 8004596:	6923      	ldr	r3, [r4, #16]
 8004598:	b31b      	cbz	r3, 80045e2 <__swbuf_r+0x68>
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	6922      	ldr	r2, [r4, #16]
 800459e:	1a98      	subs	r0, r3, r2
 80045a0:	6963      	ldr	r3, [r4, #20]
 80045a2:	b2f6      	uxtb	r6, r6
 80045a4:	4283      	cmp	r3, r0
 80045a6:	4637      	mov	r7, r6
 80045a8:	dc04      	bgt.n	80045b4 <__swbuf_r+0x3a>
 80045aa:	4621      	mov	r1, r4
 80045ac:	4628      	mov	r0, r5
 80045ae:	f000 fa73 	bl	8004a98 <_fflush_r>
 80045b2:	b9e0      	cbnz	r0, 80045ee <__swbuf_r+0x74>
 80045b4:	68a3      	ldr	r3, [r4, #8]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	60a3      	str	r3, [r4, #8]
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	6022      	str	r2, [r4, #0]
 80045c0:	701e      	strb	r6, [r3, #0]
 80045c2:	6962      	ldr	r2, [r4, #20]
 80045c4:	1c43      	adds	r3, r0, #1
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d004      	beq.n	80045d4 <__swbuf_r+0x5a>
 80045ca:	89a3      	ldrh	r3, [r4, #12]
 80045cc:	07db      	lsls	r3, r3, #31
 80045ce:	d506      	bpl.n	80045de <__swbuf_r+0x64>
 80045d0:	2e0a      	cmp	r6, #10
 80045d2:	d104      	bne.n	80045de <__swbuf_r+0x64>
 80045d4:	4621      	mov	r1, r4
 80045d6:	4628      	mov	r0, r5
 80045d8:	f000 fa5e 	bl	8004a98 <_fflush_r>
 80045dc:	b938      	cbnz	r0, 80045ee <__swbuf_r+0x74>
 80045de:	4638      	mov	r0, r7
 80045e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045e2:	4621      	mov	r1, r4
 80045e4:	4628      	mov	r0, r5
 80045e6:	f000 f805 	bl	80045f4 <__swsetup_r>
 80045ea:	2800      	cmp	r0, #0
 80045ec:	d0d5      	beq.n	800459a <__swbuf_r+0x20>
 80045ee:	f04f 37ff 	mov.w	r7, #4294967295
 80045f2:	e7f4      	b.n	80045de <__swbuf_r+0x64>

080045f4 <__swsetup_r>:
 80045f4:	b538      	push	{r3, r4, r5, lr}
 80045f6:	4b2a      	ldr	r3, [pc, #168]	; (80046a0 <__swsetup_r+0xac>)
 80045f8:	4605      	mov	r5, r0
 80045fa:	6818      	ldr	r0, [r3, #0]
 80045fc:	460c      	mov	r4, r1
 80045fe:	b118      	cbz	r0, 8004608 <__swsetup_r+0x14>
 8004600:	6a03      	ldr	r3, [r0, #32]
 8004602:	b90b      	cbnz	r3, 8004608 <__swsetup_r+0x14>
 8004604:	f7ff fee4 	bl	80043d0 <__sinit>
 8004608:	89a3      	ldrh	r3, [r4, #12]
 800460a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800460e:	0718      	lsls	r0, r3, #28
 8004610:	d422      	bmi.n	8004658 <__swsetup_r+0x64>
 8004612:	06d9      	lsls	r1, r3, #27
 8004614:	d407      	bmi.n	8004626 <__swsetup_r+0x32>
 8004616:	2309      	movs	r3, #9
 8004618:	602b      	str	r3, [r5, #0]
 800461a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800461e:	81a3      	strh	r3, [r4, #12]
 8004620:	f04f 30ff 	mov.w	r0, #4294967295
 8004624:	e034      	b.n	8004690 <__swsetup_r+0x9c>
 8004626:	0758      	lsls	r0, r3, #29
 8004628:	d512      	bpl.n	8004650 <__swsetup_r+0x5c>
 800462a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800462c:	b141      	cbz	r1, 8004640 <__swsetup_r+0x4c>
 800462e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004632:	4299      	cmp	r1, r3
 8004634:	d002      	beq.n	800463c <__swsetup_r+0x48>
 8004636:	4628      	mov	r0, r5
 8004638:	f000 f8b0 	bl	800479c <_free_r>
 800463c:	2300      	movs	r3, #0
 800463e:	6363      	str	r3, [r4, #52]	; 0x34
 8004640:	89a3      	ldrh	r3, [r4, #12]
 8004642:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004646:	81a3      	strh	r3, [r4, #12]
 8004648:	2300      	movs	r3, #0
 800464a:	6063      	str	r3, [r4, #4]
 800464c:	6923      	ldr	r3, [r4, #16]
 800464e:	6023      	str	r3, [r4, #0]
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	f043 0308 	orr.w	r3, r3, #8
 8004656:	81a3      	strh	r3, [r4, #12]
 8004658:	6923      	ldr	r3, [r4, #16]
 800465a:	b94b      	cbnz	r3, 8004670 <__swsetup_r+0x7c>
 800465c:	89a3      	ldrh	r3, [r4, #12]
 800465e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004666:	d003      	beq.n	8004670 <__swsetup_r+0x7c>
 8004668:	4621      	mov	r1, r4
 800466a:	4628      	mov	r0, r5
 800466c:	f000 fa62 	bl	8004b34 <__smakebuf_r>
 8004670:	89a0      	ldrh	r0, [r4, #12]
 8004672:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004676:	f010 0301 	ands.w	r3, r0, #1
 800467a:	d00a      	beq.n	8004692 <__swsetup_r+0x9e>
 800467c:	2300      	movs	r3, #0
 800467e:	60a3      	str	r3, [r4, #8]
 8004680:	6963      	ldr	r3, [r4, #20]
 8004682:	425b      	negs	r3, r3
 8004684:	61a3      	str	r3, [r4, #24]
 8004686:	6923      	ldr	r3, [r4, #16]
 8004688:	b943      	cbnz	r3, 800469c <__swsetup_r+0xa8>
 800468a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800468e:	d1c4      	bne.n	800461a <__swsetup_r+0x26>
 8004690:	bd38      	pop	{r3, r4, r5, pc}
 8004692:	0781      	lsls	r1, r0, #30
 8004694:	bf58      	it	pl
 8004696:	6963      	ldrpl	r3, [r4, #20]
 8004698:	60a3      	str	r3, [r4, #8]
 800469a:	e7f4      	b.n	8004686 <__swsetup_r+0x92>
 800469c:	2000      	movs	r0, #0
 800469e:	e7f7      	b.n	8004690 <__swsetup_r+0x9c>
 80046a0:	20000064 	.word	0x20000064

080046a4 <memset>:
 80046a4:	4402      	add	r2, r0
 80046a6:	4603      	mov	r3, r0
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d100      	bne.n	80046ae <memset+0xa>
 80046ac:	4770      	bx	lr
 80046ae:	f803 1b01 	strb.w	r1, [r3], #1
 80046b2:	e7f9      	b.n	80046a8 <memset+0x4>

080046b4 <_close_r>:
 80046b4:	b538      	push	{r3, r4, r5, lr}
 80046b6:	4d06      	ldr	r5, [pc, #24]	; (80046d0 <_close_r+0x1c>)
 80046b8:	2300      	movs	r3, #0
 80046ba:	4604      	mov	r4, r0
 80046bc:	4608      	mov	r0, r1
 80046be:	602b      	str	r3, [r5, #0]
 80046c0:	f7fc f9d1 	bl	8000a66 <_close>
 80046c4:	1c43      	adds	r3, r0, #1
 80046c6:	d102      	bne.n	80046ce <_close_r+0x1a>
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	b103      	cbz	r3, 80046ce <_close_r+0x1a>
 80046cc:	6023      	str	r3, [r4, #0]
 80046ce:	bd38      	pop	{r3, r4, r5, pc}
 80046d0:	200009d4 	.word	0x200009d4

080046d4 <_lseek_r>:
 80046d4:	b538      	push	{r3, r4, r5, lr}
 80046d6:	4d07      	ldr	r5, [pc, #28]	; (80046f4 <_lseek_r+0x20>)
 80046d8:	4604      	mov	r4, r0
 80046da:	4608      	mov	r0, r1
 80046dc:	4611      	mov	r1, r2
 80046de:	2200      	movs	r2, #0
 80046e0:	602a      	str	r2, [r5, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	f7fc f9e6 	bl	8000ab4 <_lseek>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d102      	bne.n	80046f2 <_lseek_r+0x1e>
 80046ec:	682b      	ldr	r3, [r5, #0]
 80046ee:	b103      	cbz	r3, 80046f2 <_lseek_r+0x1e>
 80046f0:	6023      	str	r3, [r4, #0]
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	200009d4 	.word	0x200009d4

080046f8 <_read_r>:
 80046f8:	b538      	push	{r3, r4, r5, lr}
 80046fa:	4d07      	ldr	r5, [pc, #28]	; (8004718 <_read_r+0x20>)
 80046fc:	4604      	mov	r4, r0
 80046fe:	4608      	mov	r0, r1
 8004700:	4611      	mov	r1, r2
 8004702:	2200      	movs	r2, #0
 8004704:	602a      	str	r2, [r5, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	f7fc f974 	bl	80009f4 <_read>
 800470c:	1c43      	adds	r3, r0, #1
 800470e:	d102      	bne.n	8004716 <_read_r+0x1e>
 8004710:	682b      	ldr	r3, [r5, #0]
 8004712:	b103      	cbz	r3, 8004716 <_read_r+0x1e>
 8004714:	6023      	str	r3, [r4, #0]
 8004716:	bd38      	pop	{r3, r4, r5, pc}
 8004718:	200009d4 	.word	0x200009d4

0800471c <_write_r>:
 800471c:	b538      	push	{r3, r4, r5, lr}
 800471e:	4d07      	ldr	r5, [pc, #28]	; (800473c <_write_r+0x20>)
 8004720:	4604      	mov	r4, r0
 8004722:	4608      	mov	r0, r1
 8004724:	4611      	mov	r1, r2
 8004726:	2200      	movs	r2, #0
 8004728:	602a      	str	r2, [r5, #0]
 800472a:	461a      	mov	r2, r3
 800472c:	f7fc f97f 	bl	8000a2e <_write>
 8004730:	1c43      	adds	r3, r0, #1
 8004732:	d102      	bne.n	800473a <_write_r+0x1e>
 8004734:	682b      	ldr	r3, [r5, #0]
 8004736:	b103      	cbz	r3, 800473a <_write_r+0x1e>
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	bd38      	pop	{r3, r4, r5, pc}
 800473c:	200009d4 	.word	0x200009d4

08004740 <__errno>:
 8004740:	4b01      	ldr	r3, [pc, #4]	; (8004748 <__errno+0x8>)
 8004742:	6818      	ldr	r0, [r3, #0]
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20000064 	.word	0x20000064

0800474c <__libc_init_array>:
 800474c:	b570      	push	{r4, r5, r6, lr}
 800474e:	4d0d      	ldr	r5, [pc, #52]	; (8004784 <__libc_init_array+0x38>)
 8004750:	4c0d      	ldr	r4, [pc, #52]	; (8004788 <__libc_init_array+0x3c>)
 8004752:	1b64      	subs	r4, r4, r5
 8004754:	10a4      	asrs	r4, r4, #2
 8004756:	2600      	movs	r6, #0
 8004758:	42a6      	cmp	r6, r4
 800475a:	d109      	bne.n	8004770 <__libc_init_array+0x24>
 800475c:	4d0b      	ldr	r5, [pc, #44]	; (800478c <__libc_init_array+0x40>)
 800475e:	4c0c      	ldr	r4, [pc, #48]	; (8004790 <__libc_init_array+0x44>)
 8004760:	f000 fa56 	bl	8004c10 <_init>
 8004764:	1b64      	subs	r4, r4, r5
 8004766:	10a4      	asrs	r4, r4, #2
 8004768:	2600      	movs	r6, #0
 800476a:	42a6      	cmp	r6, r4
 800476c:	d105      	bne.n	800477a <__libc_init_array+0x2e>
 800476e:	bd70      	pop	{r4, r5, r6, pc}
 8004770:	f855 3b04 	ldr.w	r3, [r5], #4
 8004774:	4798      	blx	r3
 8004776:	3601      	adds	r6, #1
 8004778:	e7ee      	b.n	8004758 <__libc_init_array+0xc>
 800477a:	f855 3b04 	ldr.w	r3, [r5], #4
 800477e:	4798      	blx	r3
 8004780:	3601      	adds	r6, #1
 8004782:	e7f2      	b.n	800476a <__libc_init_array+0x1e>
 8004784:	08004c50 	.word	0x08004c50
 8004788:	08004c50 	.word	0x08004c50
 800478c:	08004c50 	.word	0x08004c50
 8004790:	08004c54 	.word	0x08004c54

08004794 <__retarget_lock_init_recursive>:
 8004794:	4770      	bx	lr

08004796 <__retarget_lock_acquire_recursive>:
 8004796:	4770      	bx	lr

08004798 <__retarget_lock_release_recursive>:
 8004798:	4770      	bx	lr
	...

0800479c <_free_r>:
 800479c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800479e:	2900      	cmp	r1, #0
 80047a0:	d044      	beq.n	800482c <_free_r+0x90>
 80047a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047a6:	9001      	str	r0, [sp, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f1a1 0404 	sub.w	r4, r1, #4
 80047ae:	bfb8      	it	lt
 80047b0:	18e4      	addlt	r4, r4, r3
 80047b2:	f000 f8df 	bl	8004974 <__malloc_lock>
 80047b6:	4a1e      	ldr	r2, [pc, #120]	; (8004830 <_free_r+0x94>)
 80047b8:	9801      	ldr	r0, [sp, #4]
 80047ba:	6813      	ldr	r3, [r2, #0]
 80047bc:	b933      	cbnz	r3, 80047cc <_free_r+0x30>
 80047be:	6063      	str	r3, [r4, #4]
 80047c0:	6014      	str	r4, [r2, #0]
 80047c2:	b003      	add	sp, #12
 80047c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047c8:	f000 b8da 	b.w	8004980 <__malloc_unlock>
 80047cc:	42a3      	cmp	r3, r4
 80047ce:	d908      	bls.n	80047e2 <_free_r+0x46>
 80047d0:	6825      	ldr	r5, [r4, #0]
 80047d2:	1961      	adds	r1, r4, r5
 80047d4:	428b      	cmp	r3, r1
 80047d6:	bf01      	itttt	eq
 80047d8:	6819      	ldreq	r1, [r3, #0]
 80047da:	685b      	ldreq	r3, [r3, #4]
 80047dc:	1949      	addeq	r1, r1, r5
 80047de:	6021      	streq	r1, [r4, #0]
 80047e0:	e7ed      	b.n	80047be <_free_r+0x22>
 80047e2:	461a      	mov	r2, r3
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	b10b      	cbz	r3, 80047ec <_free_r+0x50>
 80047e8:	42a3      	cmp	r3, r4
 80047ea:	d9fa      	bls.n	80047e2 <_free_r+0x46>
 80047ec:	6811      	ldr	r1, [r2, #0]
 80047ee:	1855      	adds	r5, r2, r1
 80047f0:	42a5      	cmp	r5, r4
 80047f2:	d10b      	bne.n	800480c <_free_r+0x70>
 80047f4:	6824      	ldr	r4, [r4, #0]
 80047f6:	4421      	add	r1, r4
 80047f8:	1854      	adds	r4, r2, r1
 80047fa:	42a3      	cmp	r3, r4
 80047fc:	6011      	str	r1, [r2, #0]
 80047fe:	d1e0      	bne.n	80047c2 <_free_r+0x26>
 8004800:	681c      	ldr	r4, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	6053      	str	r3, [r2, #4]
 8004806:	440c      	add	r4, r1
 8004808:	6014      	str	r4, [r2, #0]
 800480a:	e7da      	b.n	80047c2 <_free_r+0x26>
 800480c:	d902      	bls.n	8004814 <_free_r+0x78>
 800480e:	230c      	movs	r3, #12
 8004810:	6003      	str	r3, [r0, #0]
 8004812:	e7d6      	b.n	80047c2 <_free_r+0x26>
 8004814:	6825      	ldr	r5, [r4, #0]
 8004816:	1961      	adds	r1, r4, r5
 8004818:	428b      	cmp	r3, r1
 800481a:	bf04      	itt	eq
 800481c:	6819      	ldreq	r1, [r3, #0]
 800481e:	685b      	ldreq	r3, [r3, #4]
 8004820:	6063      	str	r3, [r4, #4]
 8004822:	bf04      	itt	eq
 8004824:	1949      	addeq	r1, r1, r5
 8004826:	6021      	streq	r1, [r4, #0]
 8004828:	6054      	str	r4, [r2, #4]
 800482a:	e7ca      	b.n	80047c2 <_free_r+0x26>
 800482c:	b003      	add	sp, #12
 800482e:	bd30      	pop	{r4, r5, pc}
 8004830:	200009dc 	.word	0x200009dc

08004834 <sbrk_aligned>:
 8004834:	b570      	push	{r4, r5, r6, lr}
 8004836:	4e0e      	ldr	r6, [pc, #56]	; (8004870 <sbrk_aligned+0x3c>)
 8004838:	460c      	mov	r4, r1
 800483a:	6831      	ldr	r1, [r6, #0]
 800483c:	4605      	mov	r5, r0
 800483e:	b911      	cbnz	r1, 8004846 <sbrk_aligned+0x12>
 8004840:	f000 f9d6 	bl	8004bf0 <_sbrk_r>
 8004844:	6030      	str	r0, [r6, #0]
 8004846:	4621      	mov	r1, r4
 8004848:	4628      	mov	r0, r5
 800484a:	f000 f9d1 	bl	8004bf0 <_sbrk_r>
 800484e:	1c43      	adds	r3, r0, #1
 8004850:	d00a      	beq.n	8004868 <sbrk_aligned+0x34>
 8004852:	1cc4      	adds	r4, r0, #3
 8004854:	f024 0403 	bic.w	r4, r4, #3
 8004858:	42a0      	cmp	r0, r4
 800485a:	d007      	beq.n	800486c <sbrk_aligned+0x38>
 800485c:	1a21      	subs	r1, r4, r0
 800485e:	4628      	mov	r0, r5
 8004860:	f000 f9c6 	bl	8004bf0 <_sbrk_r>
 8004864:	3001      	adds	r0, #1
 8004866:	d101      	bne.n	800486c <sbrk_aligned+0x38>
 8004868:	f04f 34ff 	mov.w	r4, #4294967295
 800486c:	4620      	mov	r0, r4
 800486e:	bd70      	pop	{r4, r5, r6, pc}
 8004870:	200009e0 	.word	0x200009e0

08004874 <_malloc_r>:
 8004874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004878:	1ccd      	adds	r5, r1, #3
 800487a:	f025 0503 	bic.w	r5, r5, #3
 800487e:	3508      	adds	r5, #8
 8004880:	2d0c      	cmp	r5, #12
 8004882:	bf38      	it	cc
 8004884:	250c      	movcc	r5, #12
 8004886:	2d00      	cmp	r5, #0
 8004888:	4607      	mov	r7, r0
 800488a:	db01      	blt.n	8004890 <_malloc_r+0x1c>
 800488c:	42a9      	cmp	r1, r5
 800488e:	d905      	bls.n	800489c <_malloc_r+0x28>
 8004890:	230c      	movs	r3, #12
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	2600      	movs	r6, #0
 8004896:	4630      	mov	r0, r6
 8004898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800489c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004970 <_malloc_r+0xfc>
 80048a0:	f000 f868 	bl	8004974 <__malloc_lock>
 80048a4:	f8d8 3000 	ldr.w	r3, [r8]
 80048a8:	461c      	mov	r4, r3
 80048aa:	bb5c      	cbnz	r4, 8004904 <_malloc_r+0x90>
 80048ac:	4629      	mov	r1, r5
 80048ae:	4638      	mov	r0, r7
 80048b0:	f7ff ffc0 	bl	8004834 <sbrk_aligned>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	4604      	mov	r4, r0
 80048b8:	d155      	bne.n	8004966 <_malloc_r+0xf2>
 80048ba:	f8d8 4000 	ldr.w	r4, [r8]
 80048be:	4626      	mov	r6, r4
 80048c0:	2e00      	cmp	r6, #0
 80048c2:	d145      	bne.n	8004950 <_malloc_r+0xdc>
 80048c4:	2c00      	cmp	r4, #0
 80048c6:	d048      	beq.n	800495a <_malloc_r+0xe6>
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	4631      	mov	r1, r6
 80048cc:	4638      	mov	r0, r7
 80048ce:	eb04 0903 	add.w	r9, r4, r3
 80048d2:	f000 f98d 	bl	8004bf0 <_sbrk_r>
 80048d6:	4581      	cmp	r9, r0
 80048d8:	d13f      	bne.n	800495a <_malloc_r+0xe6>
 80048da:	6821      	ldr	r1, [r4, #0]
 80048dc:	1a6d      	subs	r5, r5, r1
 80048de:	4629      	mov	r1, r5
 80048e0:	4638      	mov	r0, r7
 80048e2:	f7ff ffa7 	bl	8004834 <sbrk_aligned>
 80048e6:	3001      	adds	r0, #1
 80048e8:	d037      	beq.n	800495a <_malloc_r+0xe6>
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	442b      	add	r3, r5
 80048ee:	6023      	str	r3, [r4, #0]
 80048f0:	f8d8 3000 	ldr.w	r3, [r8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d038      	beq.n	800496a <_malloc_r+0xf6>
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	42a2      	cmp	r2, r4
 80048fc:	d12b      	bne.n	8004956 <_malloc_r+0xe2>
 80048fe:	2200      	movs	r2, #0
 8004900:	605a      	str	r2, [r3, #4]
 8004902:	e00f      	b.n	8004924 <_malloc_r+0xb0>
 8004904:	6822      	ldr	r2, [r4, #0]
 8004906:	1b52      	subs	r2, r2, r5
 8004908:	d41f      	bmi.n	800494a <_malloc_r+0xd6>
 800490a:	2a0b      	cmp	r2, #11
 800490c:	d917      	bls.n	800493e <_malloc_r+0xca>
 800490e:	1961      	adds	r1, r4, r5
 8004910:	42a3      	cmp	r3, r4
 8004912:	6025      	str	r5, [r4, #0]
 8004914:	bf18      	it	ne
 8004916:	6059      	strne	r1, [r3, #4]
 8004918:	6863      	ldr	r3, [r4, #4]
 800491a:	bf08      	it	eq
 800491c:	f8c8 1000 	streq.w	r1, [r8]
 8004920:	5162      	str	r2, [r4, r5]
 8004922:	604b      	str	r3, [r1, #4]
 8004924:	4638      	mov	r0, r7
 8004926:	f104 060b 	add.w	r6, r4, #11
 800492a:	f000 f829 	bl	8004980 <__malloc_unlock>
 800492e:	f026 0607 	bic.w	r6, r6, #7
 8004932:	1d23      	adds	r3, r4, #4
 8004934:	1af2      	subs	r2, r6, r3
 8004936:	d0ae      	beq.n	8004896 <_malloc_r+0x22>
 8004938:	1b9b      	subs	r3, r3, r6
 800493a:	50a3      	str	r3, [r4, r2]
 800493c:	e7ab      	b.n	8004896 <_malloc_r+0x22>
 800493e:	42a3      	cmp	r3, r4
 8004940:	6862      	ldr	r2, [r4, #4]
 8004942:	d1dd      	bne.n	8004900 <_malloc_r+0x8c>
 8004944:	f8c8 2000 	str.w	r2, [r8]
 8004948:	e7ec      	b.n	8004924 <_malloc_r+0xb0>
 800494a:	4623      	mov	r3, r4
 800494c:	6864      	ldr	r4, [r4, #4]
 800494e:	e7ac      	b.n	80048aa <_malloc_r+0x36>
 8004950:	4634      	mov	r4, r6
 8004952:	6876      	ldr	r6, [r6, #4]
 8004954:	e7b4      	b.n	80048c0 <_malloc_r+0x4c>
 8004956:	4613      	mov	r3, r2
 8004958:	e7cc      	b.n	80048f4 <_malloc_r+0x80>
 800495a:	230c      	movs	r3, #12
 800495c:	603b      	str	r3, [r7, #0]
 800495e:	4638      	mov	r0, r7
 8004960:	f000 f80e 	bl	8004980 <__malloc_unlock>
 8004964:	e797      	b.n	8004896 <_malloc_r+0x22>
 8004966:	6025      	str	r5, [r4, #0]
 8004968:	e7dc      	b.n	8004924 <_malloc_r+0xb0>
 800496a:	605b      	str	r3, [r3, #4]
 800496c:	deff      	udf	#255	; 0xff
 800496e:	bf00      	nop
 8004970:	200009dc 	.word	0x200009dc

08004974 <__malloc_lock>:
 8004974:	4801      	ldr	r0, [pc, #4]	; (800497c <__malloc_lock+0x8>)
 8004976:	f7ff bf0e 	b.w	8004796 <__retarget_lock_acquire_recursive>
 800497a:	bf00      	nop
 800497c:	200009d8 	.word	0x200009d8

08004980 <__malloc_unlock>:
 8004980:	4801      	ldr	r0, [pc, #4]	; (8004988 <__malloc_unlock+0x8>)
 8004982:	f7ff bf09 	b.w	8004798 <__retarget_lock_release_recursive>
 8004986:	bf00      	nop
 8004988:	200009d8 	.word	0x200009d8

0800498c <__sflush_r>:
 800498c:	898a      	ldrh	r2, [r1, #12]
 800498e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004992:	4605      	mov	r5, r0
 8004994:	0710      	lsls	r0, r2, #28
 8004996:	460c      	mov	r4, r1
 8004998:	d458      	bmi.n	8004a4c <__sflush_r+0xc0>
 800499a:	684b      	ldr	r3, [r1, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	dc05      	bgt.n	80049ac <__sflush_r+0x20>
 80049a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	dc02      	bgt.n	80049ac <__sflush_r+0x20>
 80049a6:	2000      	movs	r0, #0
 80049a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049ae:	2e00      	cmp	r6, #0
 80049b0:	d0f9      	beq.n	80049a6 <__sflush_r+0x1a>
 80049b2:	2300      	movs	r3, #0
 80049b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049b8:	682f      	ldr	r7, [r5, #0]
 80049ba:	6a21      	ldr	r1, [r4, #32]
 80049bc:	602b      	str	r3, [r5, #0]
 80049be:	d032      	beq.n	8004a26 <__sflush_r+0x9a>
 80049c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049c2:	89a3      	ldrh	r3, [r4, #12]
 80049c4:	075a      	lsls	r2, r3, #29
 80049c6:	d505      	bpl.n	80049d4 <__sflush_r+0x48>
 80049c8:	6863      	ldr	r3, [r4, #4]
 80049ca:	1ac0      	subs	r0, r0, r3
 80049cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049ce:	b10b      	cbz	r3, 80049d4 <__sflush_r+0x48>
 80049d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049d2:	1ac0      	subs	r0, r0, r3
 80049d4:	2300      	movs	r3, #0
 80049d6:	4602      	mov	r2, r0
 80049d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049da:	6a21      	ldr	r1, [r4, #32]
 80049dc:	4628      	mov	r0, r5
 80049de:	47b0      	blx	r6
 80049e0:	1c43      	adds	r3, r0, #1
 80049e2:	89a3      	ldrh	r3, [r4, #12]
 80049e4:	d106      	bne.n	80049f4 <__sflush_r+0x68>
 80049e6:	6829      	ldr	r1, [r5, #0]
 80049e8:	291d      	cmp	r1, #29
 80049ea:	d82b      	bhi.n	8004a44 <__sflush_r+0xb8>
 80049ec:	4a29      	ldr	r2, [pc, #164]	; (8004a94 <__sflush_r+0x108>)
 80049ee:	410a      	asrs	r2, r1
 80049f0:	07d6      	lsls	r6, r2, #31
 80049f2:	d427      	bmi.n	8004a44 <__sflush_r+0xb8>
 80049f4:	2200      	movs	r2, #0
 80049f6:	6062      	str	r2, [r4, #4]
 80049f8:	04d9      	lsls	r1, r3, #19
 80049fa:	6922      	ldr	r2, [r4, #16]
 80049fc:	6022      	str	r2, [r4, #0]
 80049fe:	d504      	bpl.n	8004a0a <__sflush_r+0x7e>
 8004a00:	1c42      	adds	r2, r0, #1
 8004a02:	d101      	bne.n	8004a08 <__sflush_r+0x7c>
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	b903      	cbnz	r3, 8004a0a <__sflush_r+0x7e>
 8004a08:	6560      	str	r0, [r4, #84]	; 0x54
 8004a0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a0c:	602f      	str	r7, [r5, #0]
 8004a0e:	2900      	cmp	r1, #0
 8004a10:	d0c9      	beq.n	80049a6 <__sflush_r+0x1a>
 8004a12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a16:	4299      	cmp	r1, r3
 8004a18:	d002      	beq.n	8004a20 <__sflush_r+0x94>
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f7ff febe 	bl	800479c <_free_r>
 8004a20:	2000      	movs	r0, #0
 8004a22:	6360      	str	r0, [r4, #52]	; 0x34
 8004a24:	e7c0      	b.n	80049a8 <__sflush_r+0x1c>
 8004a26:	2301      	movs	r3, #1
 8004a28:	4628      	mov	r0, r5
 8004a2a:	47b0      	blx	r6
 8004a2c:	1c41      	adds	r1, r0, #1
 8004a2e:	d1c8      	bne.n	80049c2 <__sflush_r+0x36>
 8004a30:	682b      	ldr	r3, [r5, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0c5      	beq.n	80049c2 <__sflush_r+0x36>
 8004a36:	2b1d      	cmp	r3, #29
 8004a38:	d001      	beq.n	8004a3e <__sflush_r+0xb2>
 8004a3a:	2b16      	cmp	r3, #22
 8004a3c:	d101      	bne.n	8004a42 <__sflush_r+0xb6>
 8004a3e:	602f      	str	r7, [r5, #0]
 8004a40:	e7b1      	b.n	80049a6 <__sflush_r+0x1a>
 8004a42:	89a3      	ldrh	r3, [r4, #12]
 8004a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a48:	81a3      	strh	r3, [r4, #12]
 8004a4a:	e7ad      	b.n	80049a8 <__sflush_r+0x1c>
 8004a4c:	690f      	ldr	r7, [r1, #16]
 8004a4e:	2f00      	cmp	r7, #0
 8004a50:	d0a9      	beq.n	80049a6 <__sflush_r+0x1a>
 8004a52:	0793      	lsls	r3, r2, #30
 8004a54:	680e      	ldr	r6, [r1, #0]
 8004a56:	bf08      	it	eq
 8004a58:	694b      	ldreq	r3, [r1, #20]
 8004a5a:	600f      	str	r7, [r1, #0]
 8004a5c:	bf18      	it	ne
 8004a5e:	2300      	movne	r3, #0
 8004a60:	eba6 0807 	sub.w	r8, r6, r7
 8004a64:	608b      	str	r3, [r1, #8]
 8004a66:	f1b8 0f00 	cmp.w	r8, #0
 8004a6a:	dd9c      	ble.n	80049a6 <__sflush_r+0x1a>
 8004a6c:	6a21      	ldr	r1, [r4, #32]
 8004a6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a70:	4643      	mov	r3, r8
 8004a72:	463a      	mov	r2, r7
 8004a74:	4628      	mov	r0, r5
 8004a76:	47b0      	blx	r6
 8004a78:	2800      	cmp	r0, #0
 8004a7a:	dc06      	bgt.n	8004a8a <__sflush_r+0xfe>
 8004a7c:	89a3      	ldrh	r3, [r4, #12]
 8004a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a82:	81a3      	strh	r3, [r4, #12]
 8004a84:	f04f 30ff 	mov.w	r0, #4294967295
 8004a88:	e78e      	b.n	80049a8 <__sflush_r+0x1c>
 8004a8a:	4407      	add	r7, r0
 8004a8c:	eba8 0800 	sub.w	r8, r8, r0
 8004a90:	e7e9      	b.n	8004a66 <__sflush_r+0xda>
 8004a92:	bf00      	nop
 8004a94:	dfbffffe 	.word	0xdfbffffe

08004a98 <_fflush_r>:
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	690b      	ldr	r3, [r1, #16]
 8004a9c:	4605      	mov	r5, r0
 8004a9e:	460c      	mov	r4, r1
 8004aa0:	b913      	cbnz	r3, 8004aa8 <_fflush_r+0x10>
 8004aa2:	2500      	movs	r5, #0
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	bd38      	pop	{r3, r4, r5, pc}
 8004aa8:	b118      	cbz	r0, 8004ab2 <_fflush_r+0x1a>
 8004aaa:	6a03      	ldr	r3, [r0, #32]
 8004aac:	b90b      	cbnz	r3, 8004ab2 <_fflush_r+0x1a>
 8004aae:	f7ff fc8f 	bl	80043d0 <__sinit>
 8004ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f3      	beq.n	8004aa2 <_fflush_r+0xa>
 8004aba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004abc:	07d0      	lsls	r0, r2, #31
 8004abe:	d404      	bmi.n	8004aca <_fflush_r+0x32>
 8004ac0:	0599      	lsls	r1, r3, #22
 8004ac2:	d402      	bmi.n	8004aca <_fflush_r+0x32>
 8004ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ac6:	f7ff fe66 	bl	8004796 <__retarget_lock_acquire_recursive>
 8004aca:	4628      	mov	r0, r5
 8004acc:	4621      	mov	r1, r4
 8004ace:	f7ff ff5d 	bl	800498c <__sflush_r>
 8004ad2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ad4:	07da      	lsls	r2, r3, #31
 8004ad6:	4605      	mov	r5, r0
 8004ad8:	d4e4      	bmi.n	8004aa4 <_fflush_r+0xc>
 8004ada:	89a3      	ldrh	r3, [r4, #12]
 8004adc:	059b      	lsls	r3, r3, #22
 8004ade:	d4e1      	bmi.n	8004aa4 <_fflush_r+0xc>
 8004ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ae2:	f7ff fe59 	bl	8004798 <__retarget_lock_release_recursive>
 8004ae6:	e7dd      	b.n	8004aa4 <_fflush_r+0xc>

08004ae8 <__swhatbuf_r>:
 8004ae8:	b570      	push	{r4, r5, r6, lr}
 8004aea:	460c      	mov	r4, r1
 8004aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af0:	2900      	cmp	r1, #0
 8004af2:	b096      	sub	sp, #88	; 0x58
 8004af4:	4615      	mov	r5, r2
 8004af6:	461e      	mov	r6, r3
 8004af8:	da0d      	bge.n	8004b16 <__swhatbuf_r+0x2e>
 8004afa:	89a3      	ldrh	r3, [r4, #12]
 8004afc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b00:	f04f 0100 	mov.w	r1, #0
 8004b04:	bf0c      	ite	eq
 8004b06:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004b0a:	2340      	movne	r3, #64	; 0x40
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	6031      	str	r1, [r6, #0]
 8004b10:	602b      	str	r3, [r5, #0]
 8004b12:	b016      	add	sp, #88	; 0x58
 8004b14:	bd70      	pop	{r4, r5, r6, pc}
 8004b16:	466a      	mov	r2, sp
 8004b18:	f000 f848 	bl	8004bac <_fstat_r>
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	dbec      	blt.n	8004afa <__swhatbuf_r+0x12>
 8004b20:	9901      	ldr	r1, [sp, #4]
 8004b22:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004b26:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004b2a:	4259      	negs	r1, r3
 8004b2c:	4159      	adcs	r1, r3
 8004b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b32:	e7eb      	b.n	8004b0c <__swhatbuf_r+0x24>

08004b34 <__smakebuf_r>:
 8004b34:	898b      	ldrh	r3, [r1, #12]
 8004b36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b38:	079d      	lsls	r5, r3, #30
 8004b3a:	4606      	mov	r6, r0
 8004b3c:	460c      	mov	r4, r1
 8004b3e:	d507      	bpl.n	8004b50 <__smakebuf_r+0x1c>
 8004b40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	6123      	str	r3, [r4, #16]
 8004b48:	2301      	movs	r3, #1
 8004b4a:	6163      	str	r3, [r4, #20]
 8004b4c:	b002      	add	sp, #8
 8004b4e:	bd70      	pop	{r4, r5, r6, pc}
 8004b50:	ab01      	add	r3, sp, #4
 8004b52:	466a      	mov	r2, sp
 8004b54:	f7ff ffc8 	bl	8004ae8 <__swhatbuf_r>
 8004b58:	9900      	ldr	r1, [sp, #0]
 8004b5a:	4605      	mov	r5, r0
 8004b5c:	4630      	mov	r0, r6
 8004b5e:	f7ff fe89 	bl	8004874 <_malloc_r>
 8004b62:	b948      	cbnz	r0, 8004b78 <__smakebuf_r+0x44>
 8004b64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b68:	059a      	lsls	r2, r3, #22
 8004b6a:	d4ef      	bmi.n	8004b4c <__smakebuf_r+0x18>
 8004b6c:	f023 0303 	bic.w	r3, r3, #3
 8004b70:	f043 0302 	orr.w	r3, r3, #2
 8004b74:	81a3      	strh	r3, [r4, #12]
 8004b76:	e7e3      	b.n	8004b40 <__smakebuf_r+0xc>
 8004b78:	89a3      	ldrh	r3, [r4, #12]
 8004b7a:	6020      	str	r0, [r4, #0]
 8004b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b80:	81a3      	strh	r3, [r4, #12]
 8004b82:	9b00      	ldr	r3, [sp, #0]
 8004b84:	6163      	str	r3, [r4, #20]
 8004b86:	9b01      	ldr	r3, [sp, #4]
 8004b88:	6120      	str	r0, [r4, #16]
 8004b8a:	b15b      	cbz	r3, 8004ba4 <__smakebuf_r+0x70>
 8004b8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b90:	4630      	mov	r0, r6
 8004b92:	f000 f81d 	bl	8004bd0 <_isatty_r>
 8004b96:	b128      	cbz	r0, 8004ba4 <__smakebuf_r+0x70>
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	f023 0303 	bic.w	r3, r3, #3
 8004b9e:	f043 0301 	orr.w	r3, r3, #1
 8004ba2:	81a3      	strh	r3, [r4, #12]
 8004ba4:	89a3      	ldrh	r3, [r4, #12]
 8004ba6:	431d      	orrs	r5, r3
 8004ba8:	81a5      	strh	r5, [r4, #12]
 8004baa:	e7cf      	b.n	8004b4c <__smakebuf_r+0x18>

08004bac <_fstat_r>:
 8004bac:	b538      	push	{r3, r4, r5, lr}
 8004bae:	4d07      	ldr	r5, [pc, #28]	; (8004bcc <_fstat_r+0x20>)
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	4604      	mov	r4, r0
 8004bb4:	4608      	mov	r0, r1
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	602b      	str	r3, [r5, #0]
 8004bba:	f7fb ff60 	bl	8000a7e <_fstat>
 8004bbe:	1c43      	adds	r3, r0, #1
 8004bc0:	d102      	bne.n	8004bc8 <_fstat_r+0x1c>
 8004bc2:	682b      	ldr	r3, [r5, #0]
 8004bc4:	b103      	cbz	r3, 8004bc8 <_fstat_r+0x1c>
 8004bc6:	6023      	str	r3, [r4, #0]
 8004bc8:	bd38      	pop	{r3, r4, r5, pc}
 8004bca:	bf00      	nop
 8004bcc:	200009d4 	.word	0x200009d4

08004bd0 <_isatty_r>:
 8004bd0:	b538      	push	{r3, r4, r5, lr}
 8004bd2:	4d06      	ldr	r5, [pc, #24]	; (8004bec <_isatty_r+0x1c>)
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	4604      	mov	r4, r0
 8004bd8:	4608      	mov	r0, r1
 8004bda:	602b      	str	r3, [r5, #0]
 8004bdc:	f7fb ff5f 	bl	8000a9e <_isatty>
 8004be0:	1c43      	adds	r3, r0, #1
 8004be2:	d102      	bne.n	8004bea <_isatty_r+0x1a>
 8004be4:	682b      	ldr	r3, [r5, #0]
 8004be6:	b103      	cbz	r3, 8004bea <_isatty_r+0x1a>
 8004be8:	6023      	str	r3, [r4, #0]
 8004bea:	bd38      	pop	{r3, r4, r5, pc}
 8004bec:	200009d4 	.word	0x200009d4

08004bf0 <_sbrk_r>:
 8004bf0:	b538      	push	{r3, r4, r5, lr}
 8004bf2:	4d06      	ldr	r5, [pc, #24]	; (8004c0c <_sbrk_r+0x1c>)
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	4608      	mov	r0, r1
 8004bfa:	602b      	str	r3, [r5, #0]
 8004bfc:	f7fb ff68 	bl	8000ad0 <_sbrk>
 8004c00:	1c43      	adds	r3, r0, #1
 8004c02:	d102      	bne.n	8004c0a <_sbrk_r+0x1a>
 8004c04:	682b      	ldr	r3, [r5, #0]
 8004c06:	b103      	cbz	r3, 8004c0a <_sbrk_r+0x1a>
 8004c08:	6023      	str	r3, [r4, #0]
 8004c0a:	bd38      	pop	{r3, r4, r5, pc}
 8004c0c:	200009d4 	.word	0x200009d4

08004c10 <_init>:
 8004c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c12:	bf00      	nop
 8004c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c16:	bc08      	pop	{r3}
 8004c18:	469e      	mov	lr, r3
 8004c1a:	4770      	bx	lr

08004c1c <_fini>:
 8004c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1e:	bf00      	nop
 8004c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c22:	bc08      	pop	{r3}
 8004c24:	469e      	mov	lr, r3
 8004c26:	4770      	bx	lr
