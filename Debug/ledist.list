
ledist.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004350  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004518  08004518  00014518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004530  08004530  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08004530  08004530  00014530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004538  08004538  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004538  08004538  00014538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800453c  0800453c  0001453c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  0800454c  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  080045ec  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006ec  2000014c  0800468c  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000838  0800468c  00020838  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 15 .debug_info   00015bae  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000027c9  00000000  00000000  00035d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000011f8  00000000  00000000  00038538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000e12  00000000  00000000  00039730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00027d86  00000000  00000000  0003a542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001519f  00000000  00000000  000622c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fa794  00000000  00000000  00077467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004d70  00000000  00000000  00171bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  0017696c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000014c 	.word	0x2000014c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004500 	.word	0x08004500

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000150 	.word	0x20000150
 8000204:	08004500 	.word	0x08004500

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fc78 	bl	8000dfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f823 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f981 	bl	8000818 <MX_GPIO_Init>
  MX_ETH_Init();
 8000516:	f000 f89b 	bl	8000650 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800051a:	f000 f91f 	bl	800075c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800051e:	f000 f94d 	bl	80007bc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 8000522:	f000 f8e3 	bl	80006ec <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000526:	480a      	ldr	r0, [pc, #40]	; (8000550 <main+0x4c>)
 8000528:	f002 fd6c 	bl	8003004 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  GPIO_PinState bLed3 = GPIO_PIN_RESET;
 800052c:	2300      	movs	r3, #0
 800052e:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
	  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,bLed3);
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	461a      	mov	r2, r3
 8000534:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000538:	4806      	ldr	r0, [pc, #24]	; (8000554 <main+0x50>)
 800053a:	f001 fac5 	bl	8001ac8 <HAL_GPIO_WritePin>
	  bLed3 = !bLed3;
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b00      	cmp	r3, #0
 8000542:	bf0c      	ite	eq
 8000544:	2301      	moveq	r3, #1
 8000546:	2300      	movne	r3, #0
 8000548:	b2db      	uxtb	r3, r3
 800054a:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,bLed3);
 800054c:	e7f0      	b.n	8000530 <main+0x2c>
 800054e:	bf00      	nop
 8000550:	20000250 	.word	0x20000250
 8000554:	40020400 	.word	0x40020400

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f003 ff9e 	bl	80044a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800057c:	f001 fc20 	bl	8001dc0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	4b27      	ldr	r3, [pc, #156]	; (8000620 <SystemClock_Config+0xc8>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a26      	ldr	r2, [pc, #152]	; (8000620 <SystemClock_Config+0xc8>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b24      	ldr	r3, [pc, #144]	; (8000620 <SystemClock_Config+0xc8>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <SystemClock_Config+0xcc>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a0:	4a20      	ldr	r2, [pc, #128]	; (8000624 <SystemClock_Config+0xcc>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <SystemClock_Config+0xcc>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b4:	2301      	movs	r3, #1
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c8:	2304      	movs	r3, #4
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005cc:	2348      	movs	r3, #72	; 0x48
 80005ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005d4:	2303      	movs	r3, #3
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 fbff 	bl	8001de0 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e8:	f000 f9b8 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2302      	movs	r3, #2
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	2102      	movs	r1, #2
 8000608:	4618      	mov	r0, r3
 800060a:	f001 fe8d 	bl	8002328 <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000614:	f000 f9a2 	bl	800095c <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3750      	adds	r7, #80	; 0x50
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	if (htim == &htim6)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a05      	ldr	r2, [pc, #20]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d103      	bne.n	8000640 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
	   HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000638:	2101      	movs	r1, #1
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800063c:	f001 fa5d 	bl	8001afa <HAL_GPIO_TogglePin>
	}
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000250 	.word	0x20000250
 800064c:	40020400 	.word	0x40020400

08000650 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <MX_ETH_Init+0x84>)
 8000656:	4a20      	ldr	r2, [pc, #128]	; (80006d8 <MX_ETH_Init+0x88>)
 8000658:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800065a:	4b20      	ldr	r3, [pc, #128]	; (80006dc <MX_ETH_Init+0x8c>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <MX_ETH_Init+0x8c>)
 8000662:	2280      	movs	r2, #128	; 0x80
 8000664:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <MX_ETH_Init+0x8c>)
 8000668:	22e1      	movs	r2, #225	; 0xe1
 800066a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <MX_ETH_Init+0x8c>)
 800066e:	2200      	movs	r2, #0
 8000670:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <MX_ETH_Init+0x8c>)
 8000674:	2200      	movs	r2, #0
 8000676:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <MX_ETH_Init+0x8c>)
 800067a:	2200      	movs	r2, #0
 800067c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_ETH_Init+0x84>)
 8000680:	4a16      	ldr	r2, [pc, #88]	; (80006dc <MX_ETH_Init+0x8c>)
 8000682:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_ETH_Init+0x84>)
 8000686:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800068a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_ETH_Init+0x84>)
 800068e:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <MX_ETH_Init+0x90>)
 8000690:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_ETH_Init+0x84>)
 8000694:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <MX_ETH_Init+0x94>)
 8000696:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000698:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_ETH_Init+0x84>)
 800069a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800069e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <MX_ETH_Init+0x84>)
 80006a2:	f000 fd3f 	bl	8001124 <HAL_ETH_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006ac:	f000 f956 	bl	800095c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006b0:	2238      	movs	r2, #56	; 0x38
 80006b2:	2100      	movs	r1, #0
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <MX_ETH_Init+0x98>)
 80006b6:	f003 fef7 	bl	80044a8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_ETH_Init+0x98>)
 80006bc:	2221      	movs	r2, #33	; 0x21
 80006be:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_ETH_Init+0x98>)
 80006c2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006c6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <MX_ETH_Init+0x98>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200001a0 	.word	0x200001a0
 80006d8:	40028000 	.word	0x40028000
 80006dc:	2000082c 	.word	0x2000082c
 80006e0:	200000ac 	.word	0x200000ac
 80006e4:	2000000c 	.word	0x2000000c
 80006e8:	20000168 	.word	0x20000168

080006ec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_TIM6_Init+0x68>)
 80006fe:	4a16      	ldr	r2, [pc, #88]	; (8000758 <MX_TIM6_Init+0x6c>)
 8000700:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4799;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_TIM6_Init+0x68>)
 8000704:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000708:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_TIM6_Init+0x68>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8000710:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_TIM6_Init+0x68>)
 8000712:	f242 720f 	movw	r2, #9999	; 0x270f
 8000716:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_TIM6_Init+0x68>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800071e:	480d      	ldr	r0, [pc, #52]	; (8000754 <MX_TIM6_Init+0x68>)
 8000720:	f002 fc18 	bl	8002f54 <HAL_TIM_Base_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800072a:	f000 f917 	bl	800095c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4619      	mov	r1, r3
 800073a:	4806      	ldr	r0, [pc, #24]	; (8000754 <MX_TIM6_Init+0x68>)
 800073c:	f002 fec2 	bl	80034c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000746:	f000 f909 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000250 	.word	0x20000250
 8000758:	40001000 	.word	0x40001000

0800075c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 8000762:	4a15      	ldr	r2, [pc, #84]	; (80007b8 <MX_USART3_UART_Init+0x5c>)
 8000764:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 8000768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800076c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 80007a0:	f002 ff3c 	bl	800361c <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007aa:	f000 f8d7 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000029c 	.word	0x2000029c
 80007b8:	40004800 	.word	0x40004800

080007bc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ca:	2206      	movs	r2, #6
 80007cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d0:	2202      	movs	r2, #2
 80007d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007dc:	2202      	movs	r2, #2
 80007de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000800:	f001 f995 	bl	8001b2e <HAL_PCD_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800080a:	f000 f8a7 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000324 	.word	0x20000324

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	4b47      	ldr	r3, [pc, #284]	; (800094c <MX_GPIO_Init+0x134>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a46      	ldr	r2, [pc, #280]	; (800094c <MX_GPIO_Init+0x134>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b44      	ldr	r3, [pc, #272]	; (800094c <MX_GPIO_Init+0x134>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	4b41      	ldr	r3, [pc, #260]	; (800094c <MX_GPIO_Init+0x134>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a40      	ldr	r2, [pc, #256]	; (800094c <MX_GPIO_Init+0x134>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b3e      	ldr	r3, [pc, #248]	; (800094c <MX_GPIO_Init+0x134>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b3b      	ldr	r3, [pc, #236]	; (800094c <MX_GPIO_Init+0x134>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a3a      	ldr	r2, [pc, #232]	; (800094c <MX_GPIO_Init+0x134>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b38      	ldr	r3, [pc, #224]	; (800094c <MX_GPIO_Init+0x134>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b35      	ldr	r3, [pc, #212]	; (800094c <MX_GPIO_Init+0x134>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a34      	ldr	r2, [pc, #208]	; (800094c <MX_GPIO_Init+0x134>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b32      	ldr	r3, [pc, #200]	; (800094c <MX_GPIO_Init+0x134>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	4b2f      	ldr	r3, [pc, #188]	; (800094c <MX_GPIO_Init+0x134>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a2e      	ldr	r2, [pc, #184]	; (800094c <MX_GPIO_Init+0x134>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b2c      	ldr	r3, [pc, #176]	; (800094c <MX_GPIO_Init+0x134>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a6:	4b29      	ldr	r3, [pc, #164]	; (800094c <MX_GPIO_Init+0x134>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a28      	ldr	r2, [pc, #160]	; (800094c <MX_GPIO_Init+0x134>)
 80008ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b26      	ldr	r3, [pc, #152]	; (800094c <MX_GPIO_Init+0x134>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f244 0181 	movw	r1, #16513	; 0x4081
 80008c4:	4822      	ldr	r0, [pc, #136]	; (8000950 <MX_GPIO_Init+0x138>)
 80008c6:	f001 f8ff 	bl	8001ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2140      	movs	r1, #64	; 0x40
 80008ce:	4821      	ldr	r0, [pc, #132]	; (8000954 <MX_GPIO_Init+0x13c>)
 80008d0:	f001 f8fa 	bl	8001ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	481b      	ldr	r0, [pc, #108]	; (8000958 <MX_GPIO_Init+0x140>)
 80008ec:	f000 ff40 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008f0:	f244 0381 	movw	r3, #16513	; 0x4081
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4811      	ldr	r0, [pc, #68]	; (8000950 <MX_GPIO_Init+0x138>)
 800090a:	f000 ff31 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800090e:	2340      	movs	r3, #64	; 0x40
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	480b      	ldr	r0, [pc, #44]	; (8000954 <MX_GPIO_Init+0x13c>)
 8000926:	f000 ff23 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800092a:	2380      	movs	r3, #128	; 0x80
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_GPIO_Init+0x13c>)
 800093e:	f000 ff17 	bl	8001770 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000942:	bf00      	nop
 8000944:	3730      	adds	r7, #48	; 0x30
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	40020400 	.word	0x40020400
 8000954:	40021800 	.word	0x40021800
 8000958:	40020800 	.word	0x40020800

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x8>
	...

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_MspInit+0x44>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <HAL_MspInit+0x44>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <HAL_MspInit+0x44>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <HAL_MspInit+0x44>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	4a08      	ldr	r2, [pc, #32]	; (80009ac <HAL_MspInit+0x44>)
 800098c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000990:	6453      	str	r3, [r2, #68]	; 0x44
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_MspInit+0x44>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08e      	sub	sp, #56	; 0x38
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a4e      	ldr	r2, [pc, #312]	; (8000b08 <HAL_ETH_MspInit+0x158>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	f040 8096 	bne.w	8000b00 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80009d4:	4b4d      	ldr	r3, [pc, #308]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	4a4c      	ldr	r2, [pc, #304]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 80009da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009de:	6313      	str	r3, [r2, #48]	; 0x30
 80009e0:	4b4a      	ldr	r3, [pc, #296]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009e8:	623b      	str	r3, [r7, #32]
 80009ea:	6a3b      	ldr	r3, [r7, #32]
 80009ec:	4b47      	ldr	r3, [pc, #284]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f0:	4a46      	ldr	r2, [pc, #280]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 80009f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009f6:	6313      	str	r3, [r2, #48]	; 0x30
 80009f8:	4b44      	ldr	r3, [pc, #272]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a00:	61fb      	str	r3, [r7, #28]
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	4b41      	ldr	r3, [pc, #260]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a08:	4a40      	ldr	r2, [pc, #256]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a10:	4b3e      	ldr	r3, [pc, #248]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a18:	61bb      	str	r3, [r7, #24]
 8000a1a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1c:	4b3b      	ldr	r3, [pc, #236]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	4a3a      	ldr	r2, [pc, #232]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a22:	f043 0304 	orr.w	r3, r3, #4
 8000a26:	6313      	str	r3, [r2, #48]	; 0x30
 8000a28:	4b38      	ldr	r3, [pc, #224]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b35      	ldr	r3, [pc, #212]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	4a34      	ldr	r2, [pc, #208]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a40:	4b32      	ldr	r3, [pc, #200]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	4a2e      	ldr	r2, [pc, #184]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a52:	f043 0302 	orr.w	r3, r3, #2
 8000a56:	6313      	str	r3, [r2, #48]	; 0x30
 8000a58:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5c:	f003 0302 	and.w	r3, r3, #2
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a64:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a68:	4a28      	ldr	r2, [pc, #160]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a70:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <HAL_ETH_MspInit+0x15c>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a7c:	2332      	movs	r3, #50	; 0x32
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a8c:	230b      	movs	r3, #11
 8000a8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a94:	4619      	mov	r1, r3
 8000a96:	481e      	ldr	r0, [pc, #120]	; (8000b10 <HAL_ETH_MspInit+0x160>)
 8000a98:	f000 fe6a 	bl	8001770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a9c:	2386      	movs	r3, #134	; 0x86
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aac:	230b      	movs	r3, #11
 8000aae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4817      	ldr	r0, [pc, #92]	; (8000b14 <HAL_ETH_MspInit+0x164>)
 8000ab8:	f000 fe5a 	bl	8001770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ace:	230b      	movs	r3, #11
 8000ad0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480f      	ldr	r0, [pc, #60]	; (8000b18 <HAL_ETH_MspInit+0x168>)
 8000ada:	f000 fe49 	bl	8001770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ade:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af0:	230b      	movs	r3, #11
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af8:	4619      	mov	r1, r3
 8000afa:	4808      	ldr	r0, [pc, #32]	; (8000b1c <HAL_ETH_MspInit+0x16c>)
 8000afc:	f000 fe38 	bl	8001770 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b00:	bf00      	nop
 8000b02:	3738      	adds	r7, #56	; 0x38
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40028000 	.word	0x40028000
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020800 	.word	0x40020800
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	40021800 	.word	0x40021800

08000b20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <HAL_TIM_Base_MspInit+0x44>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d113      	bne.n	8000b5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_TIM_Base_MspInit+0x48>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a0c      	ldr	r2, [pc, #48]	; (8000b68 <HAL_TIM_Base_MspInit+0x48>)
 8000b38:	f043 0310 	orr.w	r3, r3, #16
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_TIM_Base_MspInit+0x48>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f003 0310 	and.w	r3, r3, #16
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2036      	movs	r0, #54	; 0x36
 8000b50:	f000 fab1 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b54:	2036      	movs	r0, #54	; 0x36
 8000b56:	f000 faca 	bl	80010ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40001000 	.word	0x40001000
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b0aa      	sub	sp, #168	; 0xa8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	2284      	movs	r2, #132	; 0x84
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f003 fc8b 	bl	80044a8 <memset>
  if(huart->Instance==USART3)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a22      	ldr	r2, [pc, #136]	; (8000c20 <HAL_UART_MspInit+0xb4>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d13c      	bne.n	8000c16 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	4618      	mov	r0, r3
 8000bac:	f001 fde2 	bl	8002774 <HAL_RCCEx_PeriphCLKConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bb6:	f7ff fed1 	bl	800095c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bba:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <HAL_UART_MspInit+0xb8>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a19      	ldr	r2, [pc, #100]	; (8000c24 <HAL_UART_MspInit+0xb8>)
 8000bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <HAL_UART_MspInit+0xb8>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_UART_MspInit+0xb8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a13      	ldr	r2, [pc, #76]	; (8000c24 <HAL_UART_MspInit+0xb8>)
 8000bd8:	f043 0308 	orr.w	r3, r3, #8
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_UART_MspInit+0xb8>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c04:	2307      	movs	r3, #7
 8000c06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <HAL_UART_MspInit+0xbc>)
 8000c12:	f000 fdad 	bl	8001770 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	37a8      	adds	r7, #168	; 0xa8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40004800 	.word	0x40004800
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020c00 	.word	0x40020c00

08000c2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0ac      	sub	sp, #176	; 0xb0
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c44:	f107 0318 	add.w	r3, r7, #24
 8000c48:	2284      	movs	r2, #132	; 0x84
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f003 fc2b 	bl	80044a8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c5a:	d159      	bne.n	8000d10 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000c60:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c68:	f107 0318 	add.w	r3, r7, #24
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 fd81 	bl	8002774 <HAL_RCCEx_PeriphCLKConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000c78:	f7ff fe70 	bl	800095c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <HAL_PCD_MspInit+0xec>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	4a25      	ldr	r2, [pc, #148]	; (8000d18 <HAL_PCD_MspInit+0xec>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	6313      	str	r3, [r2, #48]	; 0x30
 8000c88:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <HAL_PCD_MspInit+0xec>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c94:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cae:	230a      	movs	r3, #10
 8000cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4818      	ldr	r0, [pc, #96]	; (8000d1c <HAL_PCD_MspInit+0xf0>)
 8000cbc:	f000 fd58 	bl	8001770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4810      	ldr	r0, [pc, #64]	; (8000d1c <HAL_PCD_MspInit+0xf0>)
 8000cdc:	f000 fd48 	bl	8001770 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_PCD_MspInit+0xec>)
 8000ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce4:	4a0c      	ldr	r2, [pc, #48]	; (8000d18 <HAL_PCD_MspInit+0xec>)
 8000ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cea:	6353      	str	r3, [r2, #52]	; 0x34
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_PCD_MspInit+0xec>)
 8000cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <HAL_PCD_MspInit+0xec>)
 8000cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <HAL_PCD_MspInit+0xec>)
 8000cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d02:	6453      	str	r3, [r2, #68]	; 0x44
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <HAL_PCD_MspInit+0xec>)
 8000d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d10:	bf00      	nop
 8000d12:	37b0      	adds	r7, #176	; 0xb0
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020000 	.word	0x40020000

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d24:	e7fe      	b.n	8000d24 <NMI_Handler+0x4>

08000d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <MemManage_Handler+0x4>

08000d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6c:	f000 f884 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <TIM6_DAC_IRQHandler+0x10>)
 8000d7a:	f002 f9bb 	bl	80030f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000250 	.word	0x20000250

08000d88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000db2:	490e      	ldr	r1, [pc, #56]	; (8000dec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000db4:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dc8:	4c0b      	ldr	r4, [pc, #44]	; (8000df8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dd6:	f7ff ffd7 	bl	8000d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dda:	f003 fb6d 	bl	80044b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dde:	f7ff fb91 	bl	8000504 <main>
  bx  lr    
 8000de2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000de4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000df0:	08004540 	.word	0x08004540
  ldr r2, =_sbss
 8000df4:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000df8:	20000838 	.word	0x20000838

08000dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC_IRQHandler>

08000dfe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e02:	2003      	movs	r0, #3
 8000e04:	f000 f94c 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f000 f805 	bl	8000e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e0e:	f7ff fdab 	bl	8000968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_InitTick+0x54>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_InitTick+0x58>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f967 	bl	800110a <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00e      	b.n	8000e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b0f      	cmp	r3, #15
 8000e4a:	d80a      	bhi.n	8000e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f000 f92f 	bl	80010b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <HAL_InitTick+0x5c>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e000      	b.n	8000e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	20000008 	.word	0x20000008
 8000e74:	20000004 	.word	0x20000004

08000e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x20>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x24>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <HAL_IncTick+0x24>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000834 	.word	0x20000834

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000834 	.word	0x20000834

08000eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec0:	f7ff ffee 	bl	8000ea0 <HAL_GetTick>
 8000ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed0:	d005      	beq.n	8000ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <HAL_Delay+0x44>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ede:	bf00      	nop
 8000ee0:	f7ff ffde 	bl	8000ea0 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d8f7      	bhi.n	8000ee0 <HAL_Delay+0x28>
  {
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008

08000f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <__NVIC_SetPriorityGrouping+0x40>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <__NVIC_SetPriorityGrouping+0x40>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00
 8000f44:	05fa0000 	.word	0x05fa0000

08000f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db0b      	blt.n	8000f8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f003 021f 	and.w	r2, r3, #31
 8000f7c:	4907      	ldr	r1, [pc, #28]	; (8000f9c <__NVIC_EnableIRQ+0x38>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	2001      	movs	r0, #1
 8000f86:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	; (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	; (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
         );
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	; 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800106c:	d301      	bcc.n	8001072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106e:	2301      	movs	r3, #1
 8001070:	e00f      	b.n	8001092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <SysTick_Config+0x40>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107a:	210f      	movs	r1, #15
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f7ff ff8e 	bl	8000fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <SysTick_Config+0x40>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <SysTick_Config+0x40>)
 800108c:	2207      	movs	r2, #7
 800108e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e000e010 	.word	0xe000e010

080010a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff29 	bl	8000f00 <__NVIC_SetPriorityGrouping>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c8:	f7ff ff3e 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 80010cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f7ff ff8e 	bl	8000ff4 <NVIC_EncodePriority>
 80010d8:	4602      	mov	r2, r0
 80010da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5d 	bl	8000fa0 <__NVIC_SetPriority>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff31 	bl	8000f64 <__NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffa2 	bl	800105c <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e06a      	b.n	800120c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800113c:	2b00      	cmp	r3, #0
 800113e:	d106      	bne.n	800114e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2223      	movs	r2, #35	; 0x23
 8001144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff fc31 	bl	80009b0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	4b31      	ldr	r3, [pc, #196]	; (8001214 <HAL_ETH_Init+0xf0>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	4a30      	ldr	r2, [pc, #192]	; (8001214 <HAL_ETH_Init+0xf0>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001158:	6453      	str	r3, [r2, #68]	; 0x44
 800115a:	4b2e      	ldr	r3, [pc, #184]	; (8001214 <HAL_ETH_Init+0xf0>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001166:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <HAL_ETH_Init+0xf4>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	4a2b      	ldr	r2, [pc, #172]	; (8001218 <HAL_ETH_Init+0xf4>)
 800116c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001170:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001172:	4b29      	ldr	r3, [pc, #164]	; (8001218 <HAL_ETH_Init+0xf4>)
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	4927      	ldr	r1, [pc, #156]	; (8001218 <HAL_ETH_Init+0xf4>)
 800117c:	4313      	orrs	r3, r2
 800117e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <HAL_ETH_Init+0xf4>)
 8001182:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	6812      	ldr	r2, [r2, #0]
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800119a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800119c:	f7ff fe80 	bl	8000ea0 <HAL_GetTick>
 80011a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011a2:	e011      	b.n	80011c8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80011a4:	f7ff fe7c 	bl	8000ea0 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011b2:	d909      	bls.n	80011c8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2204      	movs	r2, #4
 80011b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	22e0      	movs	r2, #224	; 0xe0
 80011c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e021      	b.n	800120c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1e4      	bne.n	80011a4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 f958 	bl	8001490 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 f9ff 	bl	80015e4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 fa55 	bl	8001696 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	461a      	mov	r2, r3
 80011f2:	2100      	movs	r1, #0
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 f9bd 	bl	8001574 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2210      	movs	r2, #16
 8001206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40023800 	.word	0x40023800
 8001218:	40013800 	.word	0x40013800

0800121c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	4b51      	ldr	r3, [pc, #324]	; (8001378 <ETH_SetMACConfig+0x15c>)
 8001232:	4013      	ands	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	7c1b      	ldrb	r3, [r3, #16]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d102      	bne.n	8001244 <ETH_SetMACConfig+0x28>
 800123e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001242:	e000      	b.n	8001246 <ETH_SetMACConfig+0x2a>
 8001244:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	7c5b      	ldrb	r3, [r3, #17]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d102      	bne.n	8001254 <ETH_SetMACConfig+0x38>
 800124e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001252:	e000      	b.n	8001256 <ETH_SetMACConfig+0x3a>
 8001254:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001256:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800125c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	7fdb      	ldrb	r3, [r3, #31]
 8001262:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001264:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800126a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	7f92      	ldrb	r2, [r2, #30]
 8001270:	2a00      	cmp	r2, #0
 8001272:	d102      	bne.n	800127a <ETH_SetMACConfig+0x5e>
 8001274:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001278:	e000      	b.n	800127c <ETH_SetMACConfig+0x60>
 800127a:	2200      	movs	r2, #0
                        macconf->Speed |
 800127c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	7f1b      	ldrb	r3, [r3, #28]
 8001282:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001284:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800128a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	791b      	ldrb	r3, [r3, #4]
 8001290:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001292:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	f892 2020 	ldrb.w	r2, [r2, #32]
 800129a:	2a00      	cmp	r2, #0
 800129c:	d102      	bne.n	80012a4 <ETH_SetMACConfig+0x88>
 800129e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a2:	e000      	b.n	80012a6 <ETH_SetMACConfig+0x8a>
 80012a4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80012a6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	7bdb      	ldrb	r3, [r3, #15]
 80012ac:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80012ae:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80012b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80012bc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012be:	4313      	orrs	r3, r2
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012d6:	2001      	movs	r0, #1
 80012d8:	f7ff fdee 	bl	8000eb8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	f64f 7341 	movw	r3, #65345	; 0xff41
 80012f2:	4013      	ands	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012fa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001302:	2a00      	cmp	r2, #0
 8001304:	d101      	bne.n	800130a <ETH_SetMACConfig+0xee>
 8001306:	2280      	movs	r2, #128	; 0x80
 8001308:	e000      	b.n	800130c <ETH_SetMACConfig+0xf0>
 800130a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800130c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001312:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800131a:	2a01      	cmp	r2, #1
 800131c:	d101      	bne.n	8001322 <ETH_SetMACConfig+0x106>
 800131e:	2208      	movs	r2, #8
 8001320:	e000      	b.n	8001324 <ETH_SetMACConfig+0x108>
 8001322:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001324:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800132c:	2a01      	cmp	r2, #1
 800132e:	d101      	bne.n	8001334 <ETH_SetMACConfig+0x118>
 8001330:	2204      	movs	r2, #4
 8001332:	e000      	b.n	8001336 <ETH_SetMACConfig+0x11a>
 8001334:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001336:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800133e:	2a01      	cmp	r2, #1
 8001340:	d101      	bne.n	8001346 <ETH_SetMACConfig+0x12a>
 8001342:	2202      	movs	r2, #2
 8001344:	e000      	b.n	8001348 <ETH_SetMACConfig+0x12c>
 8001346:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001348:	4313      	orrs	r3, r2
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	4313      	orrs	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001360:	2001      	movs	r0, #1
 8001362:	f7ff fda9 	bl	8000eb8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	619a      	str	r2, [r3, #24]
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	ff20810f 	.word	0xff20810f

0800137c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	4b3d      	ldr	r3, [pc, #244]	; (800148c <ETH_SetDMAConfig+0x110>)
 8001396:	4013      	ands	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	7b1b      	ldrb	r3, [r3, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <ETH_SetDMAConfig+0x2c>
 80013a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013a6:	e000      	b.n	80013aa <ETH_SetDMAConfig+0x2e>
 80013a8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	7b5b      	ldrb	r3, [r3, #13]
 80013ae:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80013b0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	7f52      	ldrb	r2, [r2, #29]
 80013b6:	2a00      	cmp	r2, #0
 80013b8:	d102      	bne.n	80013c0 <ETH_SetDMAConfig+0x44>
 80013ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013be:	e000      	b.n	80013c2 <ETH_SetDMAConfig+0x46>
 80013c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80013c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	7b9b      	ldrb	r3, [r3, #14]
 80013c8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80013ca:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80013d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	7f1b      	ldrb	r3, [r3, #28]
 80013d6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80013d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	7f9b      	ldrb	r3, [r3, #30]
 80013de:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80013e0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80013e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013ee:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80013f0:	4313      	orrs	r3, r2
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001400:	461a      	mov	r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001412:	2001      	movs	r0, #1
 8001414:	f7ff fd50 	bl	8000eb8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001420:	461a      	mov	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	791b      	ldrb	r3, [r3, #4]
 800142a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001430:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001436:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800143c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001444:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001446:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800144e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001454:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800145e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001462:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001470:	2001      	movs	r0, #1
 8001472:	f7ff fd21 	bl	8000eb8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800147e:	461a      	mov	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	f8de3f23 	.word	0xf8de3f23

08001490 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b0a6      	sub	sp, #152	; 0x98
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001498:	2301      	movs	r3, #1
 800149a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800149e:	2301      	movs	r3, #1
 80014a0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80014a4:	2300      	movs	r3, #0
 80014a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80014ae:	2301      	movs	r3, #1
 80014b0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80014ba:	2301      	movs	r3, #1
 80014bc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80014cc:	2300      	movs	r3, #0
 80014ce:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80014f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014f6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80014f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001504:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001508:	4619      	mov	r1, r3
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fe86 	bl	800121c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001510:	2301      	movs	r3, #1
 8001512:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001514:	2301      	movs	r3, #1
 8001516:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001518:	2301      	movs	r3, #1
 800151a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800151e:	2301      	movs	r3, #1
 8001520:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001532:	2300      	movs	r3, #0
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001536:	2301      	movs	r3, #1
 8001538:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800153c:	2301      	movs	r3, #1
 800153e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001544:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001546:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800154a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800154c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001550:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001552:	2301      	movs	r3, #1
 8001554:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001558:	2300      	movs	r3, #0
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	4619      	mov	r1, r3
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ff08 	bl	800137c <ETH_SetDMAConfig>
}
 800156c:	bf00      	nop
 800156e:	3798      	adds	r7, #152	; 0x98
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001574:	b480      	push	{r7}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3305      	adds	r3, #5
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	3204      	adds	r2, #4
 800158c:	7812      	ldrb	r2, [r2, #0]
 800158e:	4313      	orrs	r3, r2
 8001590:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <ETH_MACAddressConfig+0x68>)
 8001596:	4413      	add	r3, r2
 8001598:	461a      	mov	r2, r3
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3303      	adds	r3, #3
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	061a      	lsls	r2, r3, #24
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3302      	adds	r3, #2
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	041b      	lsls	r3, r3, #16
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3301      	adds	r3, #1
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	4313      	orrs	r3, r2
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	7812      	ldrb	r2, [r2, #0]
 80015be:	4313      	orrs	r3, r2
 80015c0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <ETH_MACAddressConfig+0x6c>)
 80015c6:	4413      	add	r3, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	6013      	str	r3, [r2, #0]
}
 80015ce:	bf00      	nop
 80015d0:	371c      	adds	r7, #28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40028040 	.word	0x40028040
 80015e0:	40028044 	.word	0x40028044

080015e4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	e03e      	b.n	8001670 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68d9      	ldr	r1, [r3, #12]
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	440b      	add	r3, r1
 8001602:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	2200      	movs	r2, #0
 800160e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	2200      	movs	r2, #0
 800161a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	3206      	adds	r2, #6
 8001624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d80c      	bhi.n	8001654 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68d9      	ldr	r1, [r3, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	440b      	add	r3, r1
 800164c:	461a      	mov	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	e004      	b.n	800165e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	461a      	mov	r2, r3
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3301      	adds	r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b03      	cmp	r3, #3
 8001674:	d9bd      	bls.n	80015f2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001688:	611a      	str	r2, [r3, #16]
}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001696:	b480      	push	{r7}
 8001698:	b085      	sub	sp, #20
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	e046      	b.n	8001732 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6919      	ldr	r1, [r3, #16]
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2200      	movs	r2, #0
 80016c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80016e0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80016e8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80016f6:	68b9      	ldr	r1, [r7, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	3212      	adds	r2, #18
 80016fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d80c      	bhi.n	8001722 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6919      	ldr	r1, [r3, #16]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	440b      	add	r3, r1
 800171a:	461a      	mov	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	e004      	b.n	800172c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	461a      	mov	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	3301      	adds	r3, #1
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2b03      	cmp	r3, #3
 8001736:	d9b5      	bls.n	80016a4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691a      	ldr	r2, [r3, #16]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001762:	60da      	str	r2, [r3, #12]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	e175      	b.n	8001a7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001790:	2201      	movs	r2, #1
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	f040 8164 	bne.w	8001a76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d005      	beq.n	80017c6 <HAL_GPIO_Init+0x56>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d130      	bne.n	8001828 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	2203      	movs	r2, #3
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017fc:	2201      	movs	r2, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 0201 	and.w	r2, r3, #1
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b03      	cmp	r3, #3
 8001832:	d017      	beq.n	8001864 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	2203      	movs	r2, #3
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d123      	bne.n	80018b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	08da      	lsrs	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3208      	adds	r2, #8
 8001878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	220f      	movs	r2, #15
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	691a      	ldr	r2, [r3, #16]
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	08da      	lsrs	r2, r3, #3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3208      	adds	r2, #8
 80018b2:	69b9      	ldr	r1, [r7, #24]
 80018b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	2203      	movs	r2, #3
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0203 	and.w	r2, r3, #3
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 80be 	beq.w	8001a76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	4b66      	ldr	r3, [pc, #408]	; (8001a94 <HAL_GPIO_Init+0x324>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	4a65      	ldr	r2, [pc, #404]	; (8001a94 <HAL_GPIO_Init+0x324>)
 8001900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001904:	6453      	str	r3, [r2, #68]	; 0x44
 8001906:	4b63      	ldr	r3, [pc, #396]	; (8001a94 <HAL_GPIO_Init+0x324>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001912:	4a61      	ldr	r2, [pc, #388]	; (8001a98 <HAL_GPIO_Init+0x328>)
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	3302      	adds	r3, #2
 800191a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	220f      	movs	r2, #15
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a58      	ldr	r2, [pc, #352]	; (8001a9c <HAL_GPIO_Init+0x32c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d037      	beq.n	80019ae <HAL_GPIO_Init+0x23e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a57      	ldr	r2, [pc, #348]	; (8001aa0 <HAL_GPIO_Init+0x330>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d031      	beq.n	80019aa <HAL_GPIO_Init+0x23a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a56      	ldr	r2, [pc, #344]	; (8001aa4 <HAL_GPIO_Init+0x334>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d02b      	beq.n	80019a6 <HAL_GPIO_Init+0x236>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a55      	ldr	r2, [pc, #340]	; (8001aa8 <HAL_GPIO_Init+0x338>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d025      	beq.n	80019a2 <HAL_GPIO_Init+0x232>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a54      	ldr	r2, [pc, #336]	; (8001aac <HAL_GPIO_Init+0x33c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d01f      	beq.n	800199e <HAL_GPIO_Init+0x22e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a53      	ldr	r2, [pc, #332]	; (8001ab0 <HAL_GPIO_Init+0x340>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d019      	beq.n	800199a <HAL_GPIO_Init+0x22a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a52      	ldr	r2, [pc, #328]	; (8001ab4 <HAL_GPIO_Init+0x344>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_GPIO_Init+0x226>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a51      	ldr	r2, [pc, #324]	; (8001ab8 <HAL_GPIO_Init+0x348>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00d      	beq.n	8001992 <HAL_GPIO_Init+0x222>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a50      	ldr	r2, [pc, #320]	; (8001abc <HAL_GPIO_Init+0x34c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d007      	beq.n	800198e <HAL_GPIO_Init+0x21e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4f      	ldr	r2, [pc, #316]	; (8001ac0 <HAL_GPIO_Init+0x350>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d101      	bne.n	800198a <HAL_GPIO_Init+0x21a>
 8001986:	2309      	movs	r3, #9
 8001988:	e012      	b.n	80019b0 <HAL_GPIO_Init+0x240>
 800198a:	230a      	movs	r3, #10
 800198c:	e010      	b.n	80019b0 <HAL_GPIO_Init+0x240>
 800198e:	2308      	movs	r3, #8
 8001990:	e00e      	b.n	80019b0 <HAL_GPIO_Init+0x240>
 8001992:	2307      	movs	r3, #7
 8001994:	e00c      	b.n	80019b0 <HAL_GPIO_Init+0x240>
 8001996:	2306      	movs	r3, #6
 8001998:	e00a      	b.n	80019b0 <HAL_GPIO_Init+0x240>
 800199a:	2305      	movs	r3, #5
 800199c:	e008      	b.n	80019b0 <HAL_GPIO_Init+0x240>
 800199e:	2304      	movs	r3, #4
 80019a0:	e006      	b.n	80019b0 <HAL_GPIO_Init+0x240>
 80019a2:	2303      	movs	r3, #3
 80019a4:	e004      	b.n	80019b0 <HAL_GPIO_Init+0x240>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e002      	b.n	80019b0 <HAL_GPIO_Init+0x240>
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <HAL_GPIO_Init+0x240>
 80019ae:	2300      	movs	r3, #0
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	f002 0203 	and.w	r2, r2, #3
 80019b6:	0092      	lsls	r2, r2, #2
 80019b8:	4093      	lsls	r3, r2
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019c0:	4935      	ldr	r1, [pc, #212]	; (8001a98 <HAL_GPIO_Init+0x328>)
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	089b      	lsrs	r3, r3, #2
 80019c6:	3302      	adds	r3, #2
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ce:	4b3d      	ldr	r3, [pc, #244]	; (8001ac4 <HAL_GPIO_Init+0x354>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019f2:	4a34      	ldr	r2, [pc, #208]	; (8001ac4 <HAL_GPIO_Init+0x354>)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019f8:	4b32      	ldr	r3, [pc, #200]	; (8001ac4 <HAL_GPIO_Init+0x354>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a1c:	4a29      	ldr	r2, [pc, #164]	; (8001ac4 <HAL_GPIO_Init+0x354>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a22:	4b28      	ldr	r3, [pc, #160]	; (8001ac4 <HAL_GPIO_Init+0x354>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a46:	4a1f      	ldr	r2, [pc, #124]	; (8001ac4 <HAL_GPIO_Init+0x354>)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <HAL_GPIO_Init+0x354>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a70:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <HAL_GPIO_Init+0x354>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	61fb      	str	r3, [r7, #28]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	2b0f      	cmp	r3, #15
 8001a80:	f67f ae86 	bls.w	8001790 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a84:	bf00      	nop
 8001a86:	bf00      	nop
 8001a88:	3724      	adds	r7, #36	; 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40013800 	.word	0x40013800
 8001a9c:	40020000 	.word	0x40020000
 8001aa0:	40020400 	.word	0x40020400
 8001aa4:	40020800 	.word	0x40020800
 8001aa8:	40020c00 	.word	0x40020c00
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40021400 	.word	0x40021400
 8001ab4:	40021800 	.word	0x40021800
 8001ab8:	40021c00 	.word	0x40021c00
 8001abc:	40022000 	.word	0x40022000
 8001ac0:	40022400 	.word	0x40022400
 8001ac4:	40013c00 	.word	0x40013c00

08001ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	807b      	strh	r3, [r7, #2]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ad8:	787b      	ldrb	r3, [r7, #1]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ade:	887a      	ldrh	r2, [r7, #2]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ae4:	e003      	b.n	8001aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ae6:	887b      	ldrh	r3, [r7, #2]
 8001ae8:	041a      	lsls	r2, r3, #16
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	619a      	str	r2, [r3, #24]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b085      	sub	sp, #20
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	460b      	mov	r3, r1
 8001b04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b0c:	887a      	ldrh	r2, [r7, #2]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4013      	ands	r3, r2
 8001b12:	041a      	lsls	r2, r3, #16
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	400b      	ands	r3, r1
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	619a      	str	r2, [r3, #24]
}
 8001b22:	bf00      	nop
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b30:	b08f      	sub	sp, #60	; 0x3c
 8001b32:	af0a      	add	r7, sp, #40	; 0x28
 8001b34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e116      	b.n	8001d6e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d106      	bne.n	8001b60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff f866 	bl	8000c2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2203      	movs	r2, #3
 8001b64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f002 f9f6 	bl	8003f70 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	687e      	ldr	r6, [r7, #4]
 8001b8c:	466d      	mov	r5, sp
 8001b8e:	f106 0410 	add.w	r4, r6, #16
 8001b92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ba2:	1d33      	adds	r3, r6, #4
 8001ba4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ba6:	6838      	ldr	r0, [r7, #0]
 8001ba8:	f002 f98a 	bl	8003ec0 <USB_CoreInit>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e0d7      	b.n	8001d6e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f002 f9e4 	bl	8003f92 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]
 8001bce:	e04a      	b.n	8001c66 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bd0:	7bfa      	ldrb	r2, [r7, #15]
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4413      	add	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	333d      	adds	r3, #61	; 0x3d
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001be4:	7bfa      	ldrb	r2, [r7, #15]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	333c      	adds	r3, #60	; 0x3c
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bf8:	7bfa      	ldrb	r2, [r7, #15]
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	b298      	uxth	r0, r3
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	3344      	adds	r3, #68	; 0x44
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	3340      	adds	r3, #64	; 0x40
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	3348      	adds	r3, #72	; 0x48
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c38:	7bfa      	ldrb	r2, [r7, #15]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	334c      	adds	r3, #76	; 0x4c
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c4c:	7bfa      	ldrb	r2, [r7, #15]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4413      	add	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	3354      	adds	r3, #84	; 0x54
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	3301      	adds	r3, #1
 8001c64:	73fb      	strb	r3, [r7, #15]
 8001c66:	7bfa      	ldrb	r2, [r7, #15]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d3af      	bcc.n	8001bd0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	e044      	b.n	8001d00 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c76:	7bfa      	ldrb	r2, [r7, #15]
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	440b      	add	r3, r1
 8001c84:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001c9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ca0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
 8001d00:	7bfa      	ldrb	r2, [r7, #15]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d3b5      	bcc.n	8001c76 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	687e      	ldr	r6, [r7, #4]
 8001d12:	466d      	mov	r5, sp
 8001d14:	f106 0410 	add.w	r4, r6, #16
 8001d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d24:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d28:	1d33      	adds	r3, r6, #4
 8001d2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d2c:	6838      	ldr	r0, [r7, #0]
 8001d2e:	f002 f97d 	bl	800402c <USB_DevInit>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e014      	b.n	8001d6e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d102      	bne.n	8001d62 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f80b 	bl	8001d78 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f002 fb3b 	bl	80043e2 <USB_DevDisconnect>

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_PCDEx_ActivateLPM+0x44>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	10000003 	.word	0x10000003

08001dc0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dce:	6013      	str	r3, [r2, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40007000 	.word	0x40007000

08001de0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e291      	b.n	800231a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8087 	beq.w	8001f12 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e04:	4b96      	ldr	r3, [pc, #600]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d00c      	beq.n	8001e2a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e10:	4b93      	ldr	r3, [pc, #588]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 030c 	and.w	r3, r3, #12
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d112      	bne.n	8001e42 <HAL_RCC_OscConfig+0x62>
 8001e1c:	4b90      	ldr	r3, [pc, #576]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e28:	d10b      	bne.n	8001e42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2a:	4b8d      	ldr	r3, [pc, #564]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d06c      	beq.n	8001f10 <HAL_RCC_OscConfig+0x130>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d168      	bne.n	8001f10 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e26b      	b.n	800231a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e4a:	d106      	bne.n	8001e5a <HAL_RCC_OscConfig+0x7a>
 8001e4c:	4b84      	ldr	r3, [pc, #528]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a83      	ldr	r2, [pc, #524]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	e02e      	b.n	8001eb8 <HAL_RCC_OscConfig+0xd8>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x9c>
 8001e62:	4b7f      	ldr	r3, [pc, #508]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a7e      	ldr	r2, [pc, #504]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b7c      	ldr	r3, [pc, #496]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a7b      	ldr	r2, [pc, #492]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001e74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e01d      	b.n	8001eb8 <HAL_RCC_OscConfig+0xd8>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e84:	d10c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0xc0>
 8001e86:	4b76      	ldr	r3, [pc, #472]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a75      	ldr	r2, [pc, #468]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	4b73      	ldr	r3, [pc, #460]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a72      	ldr	r2, [pc, #456]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e00b      	b.n	8001eb8 <HAL_RCC_OscConfig+0xd8>
 8001ea0:	4b6f      	ldr	r3, [pc, #444]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a6e      	ldr	r2, [pc, #440]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	4b6c      	ldr	r3, [pc, #432]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a6b      	ldr	r2, [pc, #428]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d013      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7fe ffee 	bl	8000ea0 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7fe ffea 	bl	8000ea0 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	; 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e21f      	b.n	800231a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	4b61      	ldr	r3, [pc, #388]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0xe8>
 8001ee6:	e014      	b.n	8001f12 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7fe ffda 	bl	8000ea0 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7fe ffd6 	bl	8000ea0 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	; 0x64
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e20b      	b.n	800231a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f02:	4b57      	ldr	r3, [pc, #348]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x110>
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d069      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f1e:	4b50      	ldr	r3, [pc, #320]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00b      	beq.n	8001f42 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f2a:	4b4d      	ldr	r3, [pc, #308]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d11c      	bne.n	8001f70 <HAL_RCC_OscConfig+0x190>
 8001f36:	4b4a      	ldr	r3, [pc, #296]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d116      	bne.n	8001f70 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f42:	4b47      	ldr	r3, [pc, #284]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d005      	beq.n	8001f5a <HAL_RCC_OscConfig+0x17a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e1df      	b.n	800231a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5a:	4b41      	ldr	r3, [pc, #260]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	493d      	ldr	r1, [pc, #244]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6e:	e040      	b.n	8001ff2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d023      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f78:	4b39      	ldr	r3, [pc, #228]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a38      	ldr	r2, [pc, #224]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7fe ff8c 	bl	8000ea0 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8c:	f7fe ff88 	bl	8000ea0 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e1bd      	b.n	800231a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9e:	4b30      	ldr	r3, [pc, #192]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001faa:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4929      	ldr	r1, [pc, #164]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]
 8001fbe:	e018      	b.n	8001ff2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a26      	ldr	r2, [pc, #152]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001fc6:	f023 0301 	bic.w	r3, r3, #1
 8001fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7fe ff68 	bl	8000ea0 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd4:	f7fe ff64 	bl	8000ea0 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e199      	b.n	800231a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d038      	beq.n	8002070 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d019      	beq.n	800203a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8002008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800200a:	4a15      	ldr	r2, [pc, #84]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002012:	f7fe ff45 	bl	8000ea0 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201a:	f7fe ff41 	bl	8000ea0 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e176      	b.n	800231a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 800202e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x23a>
 8002038:	e01a      	b.n	8002070 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 800203c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203e:	4a08      	ldr	r2, [pc, #32]	; (8002060 <HAL_RCC_OscConfig+0x280>)
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002046:	f7fe ff2b 	bl	8000ea0 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204c:	e00a      	b.n	8002064 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204e:	f7fe ff27 	bl	8000ea0 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d903      	bls.n	8002064 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e15c      	b.n	800231a <HAL_RCC_OscConfig+0x53a>
 8002060:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002064:	4b91      	ldr	r3, [pc, #580]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 8002066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1ee      	bne.n	800204e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80a4 	beq.w	80021c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207e:	4b8b      	ldr	r3, [pc, #556]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10d      	bne.n	80020a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	4b88      	ldr	r3, [pc, #544]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	4a87      	ldr	r2, [pc, #540]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 8002090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002094:	6413      	str	r3, [r2, #64]	; 0x40
 8002096:	4b85      	ldr	r3, [pc, #532]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a2:	2301      	movs	r3, #1
 80020a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a6:	4b82      	ldr	r3, [pc, #520]	; (80022b0 <HAL_RCC_OscConfig+0x4d0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d118      	bne.n	80020e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80020b2:	4b7f      	ldr	r3, [pc, #508]	; (80022b0 <HAL_RCC_OscConfig+0x4d0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a7e      	ldr	r2, [pc, #504]	; (80022b0 <HAL_RCC_OscConfig+0x4d0>)
 80020b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020be:	f7fe feef 	bl	8000ea0 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c6:	f7fe feeb 	bl	8000ea0 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b64      	cmp	r3, #100	; 0x64
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e120      	b.n	800231a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d8:	4b75      	ldr	r3, [pc, #468]	; (80022b0 <HAL_RCC_OscConfig+0x4d0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d106      	bne.n	80020fa <HAL_RCC_OscConfig+0x31a>
 80020ec:	4b6f      	ldr	r3, [pc, #444]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 80020ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f0:	4a6e      	ldr	r2, [pc, #440]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6713      	str	r3, [r2, #112]	; 0x70
 80020f8:	e02d      	b.n	8002156 <HAL_RCC_OscConfig+0x376>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10c      	bne.n	800211c <HAL_RCC_OscConfig+0x33c>
 8002102:	4b6a      	ldr	r3, [pc, #424]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002106:	4a69      	ldr	r2, [pc, #420]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	6713      	str	r3, [r2, #112]	; 0x70
 800210e:	4b67      	ldr	r3, [pc, #412]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	4a66      	ldr	r2, [pc, #408]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 8002114:	f023 0304 	bic.w	r3, r3, #4
 8002118:	6713      	str	r3, [r2, #112]	; 0x70
 800211a:	e01c      	b.n	8002156 <HAL_RCC_OscConfig+0x376>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b05      	cmp	r3, #5
 8002122:	d10c      	bne.n	800213e <HAL_RCC_OscConfig+0x35e>
 8002124:	4b61      	ldr	r3, [pc, #388]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002128:	4a60      	ldr	r2, [pc, #384]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 800212a:	f043 0304 	orr.w	r3, r3, #4
 800212e:	6713      	str	r3, [r2, #112]	; 0x70
 8002130:	4b5e      	ldr	r3, [pc, #376]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	4a5d      	ldr	r2, [pc, #372]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6713      	str	r3, [r2, #112]	; 0x70
 800213c:	e00b      	b.n	8002156 <HAL_RCC_OscConfig+0x376>
 800213e:	4b5b      	ldr	r3, [pc, #364]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002142:	4a5a      	ldr	r2, [pc, #360]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 8002144:	f023 0301 	bic.w	r3, r3, #1
 8002148:	6713      	str	r3, [r2, #112]	; 0x70
 800214a:	4b58      	ldr	r3, [pc, #352]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214e:	4a57      	ldr	r2, [pc, #348]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 8002150:	f023 0304 	bic.w	r3, r3, #4
 8002154:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d015      	beq.n	800218a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215e:	f7fe fe9f 	bl	8000ea0 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002164:	e00a      	b.n	800217c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002166:	f7fe fe9b 	bl	8000ea0 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	f241 3288 	movw	r2, #5000	; 0x1388
 8002174:	4293      	cmp	r3, r2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e0ce      	b.n	800231a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217c:	4b4b      	ldr	r3, [pc, #300]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0ee      	beq.n	8002166 <HAL_RCC_OscConfig+0x386>
 8002188:	e014      	b.n	80021b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218a:	f7fe fe89 	bl	8000ea0 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002190:	e00a      	b.n	80021a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7fe fe85 	bl	8000ea0 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e0b8      	b.n	800231a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a8:	4b40      	ldr	r3, [pc, #256]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1ee      	bne.n	8002192 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021b4:	7dfb      	ldrb	r3, [r7, #23]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d105      	bne.n	80021c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ba:	4b3c      	ldr	r3, [pc, #240]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a3b      	ldr	r2, [pc, #236]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 80021c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 80a4 	beq.w	8002318 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021d0:	4b36      	ldr	r3, [pc, #216]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d06b      	beq.n	80022b4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d149      	bne.n	8002278 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e4:	4b31      	ldr	r3, [pc, #196]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a30      	ldr	r2, [pc, #192]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 80021ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7fe fe56 	bl	8000ea0 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f8:	f7fe fe52 	bl	8000ea0 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e087      	b.n	800231a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220a:	4b28      	ldr	r3, [pc, #160]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69da      	ldr	r2, [r3, #28]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	019b      	lsls	r3, r3, #6
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	085b      	lsrs	r3, r3, #1
 800222e:	3b01      	subs	r3, #1
 8002230:	041b      	lsls	r3, r3, #16
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002238:	061b      	lsls	r3, r3, #24
 800223a:	4313      	orrs	r3, r2
 800223c:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 800223e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002242:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a18      	ldr	r2, [pc, #96]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 800224a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800224e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7fe fe26 	bl	8000ea0 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002258:	f7fe fe22 	bl	8000ea0 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e057      	b.n	800231a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0x478>
 8002276:	e04f      	b.n	8002318 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 800227e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7fe fe0c 	bl	8000ea0 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228c:	f7fe fe08 	bl	8000ea0 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e03d      	b.n	800231a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229e:	4b03      	ldr	r3, [pc, #12]	; (80022ac <HAL_RCC_OscConfig+0x4cc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x4ac>
 80022aa:	e035      	b.n	8002318 <HAL_RCC_OscConfig+0x538>
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80022b4:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <HAL_RCC_OscConfig+0x544>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d028      	beq.n	8002314 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d121      	bne.n	8002314 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022da:	429a      	cmp	r2, r3
 80022dc:	d11a      	bne.n	8002314 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022e4:	4013      	ands	r3, r2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d111      	bne.n	8002314 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fa:	085b      	lsrs	r3, r3, #1
 80022fc:	3b01      	subs	r3, #1
 80022fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002300:	429a      	cmp	r2, r3
 8002302:	d107      	bne.n	8002314 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800

08002328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0d0      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002340:	4b6a      	ldr	r3, [pc, #424]	; (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 030f 	and.w	r3, r3, #15
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d910      	bls.n	8002370 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b67      	ldr	r3, [pc, #412]	; (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 020f 	bic.w	r2, r3, #15
 8002356:	4965      	ldr	r1, [pc, #404]	; (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b63      	ldr	r3, [pc, #396]	; (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0b8      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d020      	beq.n	80023be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002388:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <HAL_RCC_ClockConfig+0x1c8>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4a58      	ldr	r2, [pc, #352]	; (80024f0 <HAL_RCC_ClockConfig+0x1c8>)
 800238e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002392:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023a0:	4b53      	ldr	r3, [pc, #332]	; (80024f0 <HAL_RCC_ClockConfig+0x1c8>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	4a52      	ldr	r2, [pc, #328]	; (80024f0 <HAL_RCC_ClockConfig+0x1c8>)
 80023a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ac:	4b50      	ldr	r3, [pc, #320]	; (80024f0 <HAL_RCC_ClockConfig+0x1c8>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	494d      	ldr	r1, [pc, #308]	; (80024f0 <HAL_RCC_ClockConfig+0x1c8>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d040      	beq.n	800244c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <HAL_RCC_ClockConfig+0x1c8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d115      	bne.n	800240a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e07f      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d107      	bne.n	80023fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ea:	4b41      	ldr	r3, [pc, #260]	; (80024f0 <HAL_RCC_ClockConfig+0x1c8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d109      	bne.n	800240a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e073      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fa:	4b3d      	ldr	r3, [pc, #244]	; (80024f0 <HAL_RCC_ClockConfig+0x1c8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e06b      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800240a:	4b39      	ldr	r3, [pc, #228]	; (80024f0 <HAL_RCC_ClockConfig+0x1c8>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f023 0203 	bic.w	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	4936      	ldr	r1, [pc, #216]	; (80024f0 <HAL_RCC_ClockConfig+0x1c8>)
 8002418:	4313      	orrs	r3, r2
 800241a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800241c:	f7fe fd40 	bl	8000ea0 <HAL_GetTick>
 8002420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002422:	e00a      	b.n	800243a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002424:	f7fe fd3c 	bl	8000ea0 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e053      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	4b2d      	ldr	r3, [pc, #180]	; (80024f0 <HAL_RCC_ClockConfig+0x1c8>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 020c 	and.w	r2, r3, #12
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	429a      	cmp	r2, r3
 800244a:	d1eb      	bne.n	8002424 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800244c:	4b27      	ldr	r3, [pc, #156]	; (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d210      	bcs.n	800247c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245a:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 020f 	bic.w	r2, r3, #15
 8002462:	4922      	ldr	r1, [pc, #136]	; (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	4313      	orrs	r3, r2
 8002468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246a:	4b20      	ldr	r3, [pc, #128]	; (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e032      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_RCC_ClockConfig+0x1c8>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4916      	ldr	r1, [pc, #88]	; (80024f0 <HAL_RCC_ClockConfig+0x1c8>)
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d009      	beq.n	80024ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_RCC_ClockConfig+0x1c8>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	490e      	ldr	r1, [pc, #56]	; (80024f0 <HAL_RCC_ClockConfig+0x1c8>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ba:	f000 f821 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80024be:	4602      	mov	r2, r0
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_RCC_ClockConfig+0x1c8>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	490a      	ldr	r1, [pc, #40]	; (80024f4 <HAL_RCC_ClockConfig+0x1cc>)
 80024cc:	5ccb      	ldrb	r3, [r1, r3]
 80024ce:	fa22 f303 	lsr.w	r3, r2, r3
 80024d2:	4a09      	ldr	r2, [pc, #36]	; (80024f8 <HAL_RCC_ClockConfig+0x1d0>)
 80024d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024d6:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCC_ClockConfig+0x1d4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fc9c 	bl	8000e18 <HAL_InitTick>

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40023c00 	.word	0x40023c00
 80024f0:	40023800 	.word	0x40023800
 80024f4:	08004518 	.word	0x08004518
 80024f8:	20000000 	.word	0x20000000
 80024fc:	20000004 	.word	0x20000004

08002500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002504:	b094      	sub	sp, #80	; 0x50
 8002506:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	647b      	str	r3, [r7, #68]	; 0x44
 800250c:	2300      	movs	r3, #0
 800250e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002510:	2300      	movs	r3, #0
 8002512:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002518:	4b79      	ldr	r3, [pc, #484]	; (8002700 <HAL_RCC_GetSysClockFreq+0x200>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b08      	cmp	r3, #8
 8002522:	d00d      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x40>
 8002524:	2b08      	cmp	r3, #8
 8002526:	f200 80e1 	bhi.w	80026ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0x34>
 800252e:	2b04      	cmp	r3, #4
 8002530:	d003      	beq.n	800253a <HAL_RCC_GetSysClockFreq+0x3a>
 8002532:	e0db      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002534:	4b73      	ldr	r3, [pc, #460]	; (8002704 <HAL_RCC_GetSysClockFreq+0x204>)
 8002536:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002538:	e0db      	b.n	80026f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800253a:	4b73      	ldr	r3, [pc, #460]	; (8002708 <HAL_RCC_GetSysClockFreq+0x208>)
 800253c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800253e:	e0d8      	b.n	80026f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002540:	4b6f      	ldr	r3, [pc, #444]	; (8002700 <HAL_RCC_GetSysClockFreq+0x200>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002548:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800254a:	4b6d      	ldr	r3, [pc, #436]	; (8002700 <HAL_RCC_GetSysClockFreq+0x200>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d063      	beq.n	800261e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002556:	4b6a      	ldr	r3, [pc, #424]	; (8002700 <HAL_RCC_GetSysClockFreq+0x200>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	099b      	lsrs	r3, r3, #6
 800255c:	2200      	movs	r2, #0
 800255e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002560:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002568:	633b      	str	r3, [r7, #48]	; 0x30
 800256a:	2300      	movs	r3, #0
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
 800256e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002572:	4622      	mov	r2, r4
 8002574:	462b      	mov	r3, r5
 8002576:	f04f 0000 	mov.w	r0, #0
 800257a:	f04f 0100 	mov.w	r1, #0
 800257e:	0159      	lsls	r1, r3, #5
 8002580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002584:	0150      	lsls	r0, r2, #5
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4621      	mov	r1, r4
 800258c:	1a51      	subs	r1, r2, r1
 800258e:	6139      	str	r1, [r7, #16]
 8002590:	4629      	mov	r1, r5
 8002592:	eb63 0301 	sbc.w	r3, r3, r1
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025a4:	4659      	mov	r1, fp
 80025a6:	018b      	lsls	r3, r1, #6
 80025a8:	4651      	mov	r1, sl
 80025aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ae:	4651      	mov	r1, sl
 80025b0:	018a      	lsls	r2, r1, #6
 80025b2:	4651      	mov	r1, sl
 80025b4:	ebb2 0801 	subs.w	r8, r2, r1
 80025b8:	4659      	mov	r1, fp
 80025ba:	eb63 0901 	sbc.w	r9, r3, r1
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025d2:	4690      	mov	r8, r2
 80025d4:	4699      	mov	r9, r3
 80025d6:	4623      	mov	r3, r4
 80025d8:	eb18 0303 	adds.w	r3, r8, r3
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	462b      	mov	r3, r5
 80025e0:	eb49 0303 	adc.w	r3, r9, r3
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025f2:	4629      	mov	r1, r5
 80025f4:	024b      	lsls	r3, r1, #9
 80025f6:	4621      	mov	r1, r4
 80025f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025fc:	4621      	mov	r1, r4
 80025fe:	024a      	lsls	r2, r1, #9
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002606:	2200      	movs	r2, #0
 8002608:	62bb      	str	r3, [r7, #40]	; 0x28
 800260a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800260c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002610:	f7fd fdfa 	bl	8000208 <__aeabi_uldivmod>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4613      	mov	r3, r2
 800261a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800261c:	e058      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261e:	4b38      	ldr	r3, [pc, #224]	; (8002700 <HAL_RCC_GetSysClockFreq+0x200>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	099b      	lsrs	r3, r3, #6
 8002624:	2200      	movs	r2, #0
 8002626:	4618      	mov	r0, r3
 8002628:	4611      	mov	r1, r2
 800262a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800262e:	623b      	str	r3, [r7, #32]
 8002630:	2300      	movs	r3, #0
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
 8002634:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002638:	4642      	mov	r2, r8
 800263a:	464b      	mov	r3, r9
 800263c:	f04f 0000 	mov.w	r0, #0
 8002640:	f04f 0100 	mov.w	r1, #0
 8002644:	0159      	lsls	r1, r3, #5
 8002646:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800264a:	0150      	lsls	r0, r2, #5
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4641      	mov	r1, r8
 8002652:	ebb2 0a01 	subs.w	sl, r2, r1
 8002656:	4649      	mov	r1, r9
 8002658:	eb63 0b01 	sbc.w	fp, r3, r1
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002668:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800266c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002670:	ebb2 040a 	subs.w	r4, r2, sl
 8002674:	eb63 050b 	sbc.w	r5, r3, fp
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	00eb      	lsls	r3, r5, #3
 8002682:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002686:	00e2      	lsls	r2, r4, #3
 8002688:	4614      	mov	r4, r2
 800268a:	461d      	mov	r5, r3
 800268c:	4643      	mov	r3, r8
 800268e:	18e3      	adds	r3, r4, r3
 8002690:	603b      	str	r3, [r7, #0]
 8002692:	464b      	mov	r3, r9
 8002694:	eb45 0303 	adc.w	r3, r5, r3
 8002698:	607b      	str	r3, [r7, #4]
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026a6:	4629      	mov	r1, r5
 80026a8:	028b      	lsls	r3, r1, #10
 80026aa:	4621      	mov	r1, r4
 80026ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026b0:	4621      	mov	r1, r4
 80026b2:	028a      	lsls	r2, r1, #10
 80026b4:	4610      	mov	r0, r2
 80026b6:	4619      	mov	r1, r3
 80026b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ba:	2200      	movs	r2, #0
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	61fa      	str	r2, [r7, #28]
 80026c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026c4:	f7fd fda0 	bl	8000208 <__aeabi_uldivmod>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4613      	mov	r3, r2
 80026ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	0c1b      	lsrs	r3, r3, #16
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	3301      	adds	r3, #1
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80026e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026ea:	e002      	b.n	80026f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <HAL_RCC_GetSysClockFreq+0x204>)
 80026ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3750      	adds	r7, #80	; 0x50
 80026f8:	46bd      	mov	sp, r7
 80026fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
 8002704:	00f42400 	.word	0x00f42400
 8002708:	007a1200 	.word	0x007a1200

0800270c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <HAL_RCC_GetHCLKFreq+0x14>)
 8002712:	681b      	ldr	r3, [r3, #0]
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000000 	.word	0x20000000

08002724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002728:	f7ff fff0 	bl	800270c <HAL_RCC_GetHCLKFreq>
 800272c:	4602      	mov	r2, r0
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	0a9b      	lsrs	r3, r3, #10
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	4903      	ldr	r1, [pc, #12]	; (8002748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800273a:	5ccb      	ldrb	r3, [r1, r3]
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40023800 	.word	0x40023800
 8002748:	08004528 	.word	0x08004528

0800274c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002750:	f7ff ffdc 	bl	800270c <HAL_RCC_GetHCLKFreq>
 8002754:	4602      	mov	r2, r0
 8002756:	4b05      	ldr	r3, [pc, #20]	; (800276c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	0b5b      	lsrs	r3, r3, #13
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	4903      	ldr	r1, [pc, #12]	; (8002770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002762:	5ccb      	ldrb	r3, [r1, r3]
 8002764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002768:	4618      	mov	r0, r3
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40023800 	.word	0x40023800
 8002770:	08004528 	.word	0x08004528

08002774 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d012      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800279c:	4b69      	ldr	r3, [pc, #420]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4a68      	ldr	r2, [pc, #416]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027a6:	6093      	str	r3, [r2, #8]
 80027a8:	4b66      	ldr	r3, [pc, #408]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b0:	4964      	ldr	r1, [pc, #400]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80027be:	2301      	movs	r3, #1
 80027c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d017      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027ce:	4b5d      	ldr	r3, [pc, #372]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027dc:	4959      	ldr	r1, [pc, #356]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027ec:	d101      	bne.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80027ee:	2301      	movs	r3, #1
 80027f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80027fa:	2301      	movs	r3, #1
 80027fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d017      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800280a:	4b4e      	ldr	r3, [pc, #312]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002810:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	494a      	ldr	r1, [pc, #296]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002828:	d101      	bne.n	800282e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800282a:	2301      	movs	r3, #1
 800282c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002836:	2301      	movs	r3, #1
 8002838:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002846:	2301      	movs	r3, #1
 8002848:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 808b 	beq.w	800296e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002858:	4b3a      	ldr	r3, [pc, #232]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	4a39      	ldr	r2, [pc, #228]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800285e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002862:	6413      	str	r3, [r2, #64]	; 0x40
 8002864:	4b37      	ldr	r3, [pc, #220]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002870:	4b35      	ldr	r3, [pc, #212]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a34      	ldr	r2, [pc, #208]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800287c:	f7fe fb10 	bl	8000ea0 <HAL_GetTick>
 8002880:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002884:	f7fe fb0c 	bl	8000ea0 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	; 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e357      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002896:	4b2c      	ldr	r3, [pc, #176]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028a2:	4b28      	ldr	r3, [pc, #160]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d035      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d02e      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028c0:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ca:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028d6:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80028e2:	4a18      	ldr	r2, [pc, #96]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028e8:	4b16      	ldr	r3, [pc, #88]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d114      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7fe fad4 	bl	8000ea0 <HAL_GetTick>
 80028f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fa:	e00a      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7fe fad0 	bl	8000ea0 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	; 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e319      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002912:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0ee      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002926:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800292a:	d111      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002938:	4b04      	ldr	r3, [pc, #16]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800293a:	400b      	ands	r3, r1
 800293c:	4901      	ldr	r1, [pc, #4]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
 8002942:	e00b      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002944:	40023800 	.word	0x40023800
 8002948:	40007000 	.word	0x40007000
 800294c:	0ffffcff 	.word	0x0ffffcff
 8002950:	4baa      	ldr	r3, [pc, #680]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	4aa9      	ldr	r2, [pc, #676]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002956:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800295a:	6093      	str	r3, [r2, #8]
 800295c:	4ba7      	ldr	r3, [pc, #668]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800295e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002968:	49a4      	ldr	r1, [pc, #656]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800296a:	4313      	orrs	r3, r2
 800296c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	d010      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800297a:	4ba0      	ldr	r3, [pc, #640]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800297c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002980:	4a9e      	ldr	r2, [pc, #632]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002986:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800298a:	4b9c      	ldr	r3, [pc, #624]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800298c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002994:	4999      	ldr	r1, [pc, #612]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00a      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029a8:	4b94      	ldr	r3, [pc, #592]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029b6:	4991      	ldr	r1, [pc, #580]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029ca:	4b8c      	ldr	r3, [pc, #560]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029d8:	4988      	ldr	r1, [pc, #544]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029ec:	4b83      	ldr	r3, [pc, #524]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029fa:	4980      	ldr	r1, [pc, #512]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a0e:	4b7b      	ldr	r3, [pc, #492]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1c:	4977      	ldr	r1, [pc, #476]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a30:	4b72      	ldr	r3, [pc, #456]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a36:	f023 0203 	bic.w	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	496f      	ldr	r1, [pc, #444]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a52:	4b6a      	ldr	r3, [pc, #424]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a58:	f023 020c 	bic.w	r2, r3, #12
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a60:	4966      	ldr	r1, [pc, #408]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a74:	4b61      	ldr	r3, [pc, #388]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a82:	495e      	ldr	r1, [pc, #376]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a96:	4b59      	ldr	r3, [pc, #356]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa4:	4955      	ldr	r1, [pc, #340]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ab8:	4b50      	ldr	r3, [pc, #320]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac6:	494d      	ldr	r1, [pc, #308]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002ada:	4b48      	ldr	r3, [pc, #288]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae8:	4944      	ldr	r1, [pc, #272]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002afc:	4b3f      	ldr	r3, [pc, #252]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0a:	493c      	ldr	r1, [pc, #240]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b1e:	4b37      	ldr	r3, [pc, #220]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2c:	4933      	ldr	r1, [pc, #204]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00a      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b40:	4b2e      	ldr	r3, [pc, #184]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b4e:	492b      	ldr	r1, [pc, #172]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d011      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b62:	4b26      	ldr	r3, [pc, #152]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	4922      	ldr	r1, [pc, #136]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b80:	d101      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b82:	2301      	movs	r3, #1
 8002b84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b92:	2301      	movs	r3, #1
 8002b94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ba2:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb0:	4912      	ldr	r1, [pc, #72]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00b      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bc4:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bd4:	4909      	ldr	r1, [pc, #36]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d006      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80d9 	beq.w	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bf0:	4b02      	ldr	r3, [pc, #8]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a01      	ldr	r2, [pc, #4]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bf6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bfa:	e001      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c02:	f7fe f94d 	bl	8000ea0 <HAL_GetTick>
 8002c06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c08:	e008      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c0a:	f7fe f949 	bl	8000ea0 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b64      	cmp	r3, #100	; 0x64
 8002c16:	d901      	bls.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e194      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c1c:	4b6c      	ldr	r3, [pc, #432]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1f0      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d021      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d11d      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c3c:	4b64      	ldr	r3, [pc, #400]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c42:	0c1b      	lsrs	r3, r3, #16
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c4a:	4b61      	ldr	r3, [pc, #388]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c50:	0e1b      	lsrs	r3, r3, #24
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	019a      	lsls	r2, r3, #6
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	041b      	lsls	r3, r3, #16
 8002c62:	431a      	orrs	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	061b      	lsls	r3, r3, #24
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	071b      	lsls	r3, r3, #28
 8002c70:	4957      	ldr	r1, [pc, #348]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d004      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d02e      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ca2:	d129      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ca4:	4b4a      	ldr	r3, [pc, #296]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002caa:	0c1b      	lsrs	r3, r3, #16
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cb2:	4b47      	ldr	r3, [pc, #284]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb8:	0f1b      	lsrs	r3, r3, #28
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	019a      	lsls	r2, r3, #6
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	041b      	lsls	r3, r3, #16
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	061b      	lsls	r3, r3, #24
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	071b      	lsls	r3, r3, #28
 8002cd8:	493d      	ldr	r1, [pc, #244]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ce0:	4b3b      	ldr	r3, [pc, #236]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ce6:	f023 021f 	bic.w	r2, r3, #31
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	4937      	ldr	r1, [pc, #220]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d01d      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d04:	4b32      	ldr	r3, [pc, #200]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d0a:	0e1b      	lsrs	r3, r3, #24
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d12:	4b2f      	ldr	r3, [pc, #188]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d18:	0f1b      	lsrs	r3, r3, #28
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	019a      	lsls	r2, r3, #6
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	041b      	lsls	r3, r3, #16
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	061b      	lsls	r3, r3, #24
 8002d32:	431a      	orrs	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	071b      	lsls	r3, r3, #28
 8002d38:	4925      	ldr	r1, [pc, #148]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d011      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	019a      	lsls	r2, r3, #6
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	041b      	lsls	r3, r3, #16
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	061b      	lsls	r3, r3, #24
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	071b      	lsls	r3, r3, #28
 8002d68:	4919      	ldr	r1, [pc, #100]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d70:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a16      	ldr	r2, [pc, #88]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d7c:	f7fe f890 	bl	8000ea0 <HAL_GetTick>
 8002d80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d84:	f7fe f88c 	bl	8000ea0 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e0d7      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d96:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	f040 80cd 	bne.w	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a08      	ldr	r2, [pc, #32]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db6:	f7fe f873 	bl	8000ea0 <HAL_GetTick>
 8002dba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002dbe:	f7fe f86f 	bl	8000ea0 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b64      	cmp	r3, #100	; 0x64
 8002dca:	d903      	bls.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e0ba      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002dd0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002dd4:	4b5e      	ldr	r3, [pc, #376]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002de0:	d0ed      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d02e      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d12a      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e0a:	4b51      	ldr	r3, [pc, #324]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e10:	0c1b      	lsrs	r3, r3, #16
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e18:	4b4d      	ldr	r3, [pc, #308]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1e:	0f1b      	lsrs	r3, r3, #28
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	019a      	lsls	r2, r3, #6
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	041b      	lsls	r3, r3, #16
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	061b      	lsls	r3, r3, #24
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	071b      	lsls	r3, r3, #28
 8002e3e:	4944      	ldr	r1, [pc, #272]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e46:	4b42      	ldr	r3, [pc, #264]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e54:	3b01      	subs	r3, #1
 8002e56:	021b      	lsls	r3, r3, #8
 8002e58:	493d      	ldr	r1, [pc, #244]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d022      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e74:	d11d      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e76:	4b36      	ldr	r3, [pc, #216]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7c:	0e1b      	lsrs	r3, r3, #24
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e84:	4b32      	ldr	r3, [pc, #200]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8a:	0f1b      	lsrs	r3, r3, #28
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	019a      	lsls	r2, r3, #6
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	041b      	lsls	r3, r3, #16
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	061b      	lsls	r3, r3, #24
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	071b      	lsls	r3, r3, #28
 8002eaa:	4929      	ldr	r1, [pc, #164]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d028      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ebe:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec4:	0e1b      	lsrs	r3, r3, #24
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ecc:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed2:	0c1b      	lsrs	r3, r3, #16
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	019a      	lsls	r2, r3, #6
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	041b      	lsls	r3, r3, #16
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	061b      	lsls	r3, r3, #24
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	071b      	lsls	r3, r3, #28
 8002ef2:	4917      	ldr	r1, [pc, #92]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002efa:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	4911      	ldr	r1, [pc, #68]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f10:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a0e      	ldr	r2, [pc, #56]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f1c:	f7fd ffc0 	bl	8000ea0 <HAL_GetTick>
 8002f20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f24:	f7fd ffbc 	bl	8000ea0 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b64      	cmp	r3, #100	; 0x64
 8002f30:	d901      	bls.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e007      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f36:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f42:	d1ef      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3720      	adds	r7, #32
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800

08002f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e049      	b.n	8002ffa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d106      	bne.n	8002f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7fd fdd0 	bl	8000b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	4619      	mov	r1, r3
 8002f92:	4610      	mov	r0, r2
 8002f94:	f000 f9f6 	bl	8003384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	d001      	beq.n	800301c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e054      	b.n	80030c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a26      	ldr	r2, [pc, #152]	; (80030d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d022      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x80>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003046:	d01d      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x80>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a22      	ldr	r2, [pc, #136]	; (80030d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d018      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x80>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a21      	ldr	r2, [pc, #132]	; (80030dc <HAL_TIM_Base_Start_IT+0xd8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d013      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x80>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1f      	ldr	r2, [pc, #124]	; (80030e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00e      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x80>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a1e      	ldr	r2, [pc, #120]	; (80030e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d009      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x80>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a1c      	ldr	r2, [pc, #112]	; (80030e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d004      	beq.n	8003084 <HAL_TIM_Base_Start_IT+0x80>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a1b      	ldr	r2, [pc, #108]	; (80030ec <HAL_TIM_Base_Start_IT+0xe8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d115      	bne.n	80030b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <HAL_TIM_Base_Start_IT+0xec>)
 800308c:	4013      	ands	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b06      	cmp	r3, #6
 8003094:	d015      	beq.n	80030c2 <HAL_TIM_Base_Start_IT+0xbe>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309c:	d011      	beq.n	80030c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0201 	orr.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ae:	e008      	b.n	80030c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	e000      	b.n	80030c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40010000 	.word	0x40010000
 80030d8:	40000400 	.word	0x40000400
 80030dc:	40000800 	.word	0x40000800
 80030e0:	40000c00 	.word	0x40000c00
 80030e4:	40010400 	.word	0x40010400
 80030e8:	40014000 	.word	0x40014000
 80030ec:	40001800 	.word	0x40001800
 80030f0:	00010007 	.word	0x00010007

080030f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b02      	cmp	r3, #2
 8003108:	d122      	bne.n	8003150 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b02      	cmp	r3, #2
 8003116:	d11b      	bne.n	8003150 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0202 	mvn.w	r2, #2
 8003120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f905 	bl	8003346 <HAL_TIM_IC_CaptureCallback>
 800313c:	e005      	b.n	800314a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f8f7 	bl	8003332 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f908 	bl	800335a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b04      	cmp	r3, #4
 800315c:	d122      	bne.n	80031a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b04      	cmp	r3, #4
 800316a:	d11b      	bne.n	80031a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0204 	mvn.w	r2, #4
 8003174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2202      	movs	r2, #2
 800317a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f8db 	bl	8003346 <HAL_TIM_IC_CaptureCallback>
 8003190:	e005      	b.n	800319e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f8cd 	bl	8003332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f8de 	bl	800335a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d122      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d11b      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0208 	mvn.w	r2, #8
 80031c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2204      	movs	r2, #4
 80031ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f8b1 	bl	8003346 <HAL_TIM_IC_CaptureCallback>
 80031e4:	e005      	b.n	80031f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f8a3 	bl	8003332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f8b4 	bl	800335a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	2b10      	cmp	r3, #16
 8003204:	d122      	bne.n	800324c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	2b10      	cmp	r3, #16
 8003212:	d11b      	bne.n	800324c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0210 	mvn.w	r2, #16
 800321c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2208      	movs	r2, #8
 8003222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f887 	bl	8003346 <HAL_TIM_IC_CaptureCallback>
 8003238:	e005      	b.n	8003246 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f879 	bl	8003332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f88a 	bl	800335a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b01      	cmp	r3, #1
 8003258:	d10e      	bne.n	8003278 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b01      	cmp	r3, #1
 8003266:	d107      	bne.n	8003278 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0201 	mvn.w	r2, #1
 8003270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fd f9d8 	bl	8000628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003282:	2b80      	cmp	r3, #128	; 0x80
 8003284:	d10e      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003290:	2b80      	cmp	r3, #128	; 0x80
 8003292:	d107      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800329c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f9a8 	bl	80035f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b2:	d10e      	bne.n	80032d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032be:	2b80      	cmp	r3, #128	; 0x80
 80032c0:	d107      	bne.n	80032d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f99b 	bl	8003608 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032dc:	2b40      	cmp	r3, #64	; 0x40
 80032de:	d10e      	bne.n	80032fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ea:	2b40      	cmp	r3, #64	; 0x40
 80032ec:	d107      	bne.n	80032fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f838 	bl	800336e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b20      	cmp	r3, #32
 800330a:	d10e      	bne.n	800332a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b20      	cmp	r3, #32
 8003318:	d107      	bne.n	800332a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f06f 0220 	mvn.w	r2, #32
 8003322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f95b 	bl	80035e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a40      	ldr	r2, [pc, #256]	; (8003498 <TIM_Base_SetConfig+0x114>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d013      	beq.n	80033c4 <TIM_Base_SetConfig+0x40>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a2:	d00f      	beq.n	80033c4 <TIM_Base_SetConfig+0x40>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a3d      	ldr	r2, [pc, #244]	; (800349c <TIM_Base_SetConfig+0x118>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00b      	beq.n	80033c4 <TIM_Base_SetConfig+0x40>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a3c      	ldr	r2, [pc, #240]	; (80034a0 <TIM_Base_SetConfig+0x11c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d007      	beq.n	80033c4 <TIM_Base_SetConfig+0x40>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a3b      	ldr	r2, [pc, #236]	; (80034a4 <TIM_Base_SetConfig+0x120>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d003      	beq.n	80033c4 <TIM_Base_SetConfig+0x40>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a3a      	ldr	r2, [pc, #232]	; (80034a8 <TIM_Base_SetConfig+0x124>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d108      	bne.n	80033d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a2f      	ldr	r2, [pc, #188]	; (8003498 <TIM_Base_SetConfig+0x114>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d02b      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e4:	d027      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a2c      	ldr	r2, [pc, #176]	; (800349c <TIM_Base_SetConfig+0x118>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d023      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a2b      	ldr	r2, [pc, #172]	; (80034a0 <TIM_Base_SetConfig+0x11c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01f      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a2a      	ldr	r2, [pc, #168]	; (80034a4 <TIM_Base_SetConfig+0x120>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d01b      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a29      	ldr	r2, [pc, #164]	; (80034a8 <TIM_Base_SetConfig+0x124>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d017      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a28      	ldr	r2, [pc, #160]	; (80034ac <TIM_Base_SetConfig+0x128>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d013      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a27      	ldr	r2, [pc, #156]	; (80034b0 <TIM_Base_SetConfig+0x12c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00f      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a26      	ldr	r2, [pc, #152]	; (80034b4 <TIM_Base_SetConfig+0x130>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00b      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a25      	ldr	r2, [pc, #148]	; (80034b8 <TIM_Base_SetConfig+0x134>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d007      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a24      	ldr	r2, [pc, #144]	; (80034bc <TIM_Base_SetConfig+0x138>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d003      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a23      	ldr	r2, [pc, #140]	; (80034c0 <TIM_Base_SetConfig+0x13c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d108      	bne.n	8003448 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <TIM_Base_SetConfig+0x114>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d003      	beq.n	800347c <TIM_Base_SetConfig+0xf8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a0c      	ldr	r2, [pc, #48]	; (80034a8 <TIM_Base_SetConfig+0x124>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d103      	bne.n	8003484 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	615a      	str	r2, [r3, #20]
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40010000 	.word	0x40010000
 800349c:	40000400 	.word	0x40000400
 80034a0:	40000800 	.word	0x40000800
 80034a4:	40000c00 	.word	0x40000c00
 80034a8:	40010400 	.word	0x40010400
 80034ac:	40014000 	.word	0x40014000
 80034b0:	40014400 	.word	0x40014400
 80034b4:	40014800 	.word	0x40014800
 80034b8:	40001800 	.word	0x40001800
 80034bc:	40001c00 	.word	0x40001c00
 80034c0:	40002000 	.word	0x40002000

080034c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034d8:	2302      	movs	r3, #2
 80034da:	e06d      	b.n	80035b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a30      	ldr	r2, [pc, #192]	; (80035c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d004      	beq.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a2f      	ldr	r2, [pc, #188]	; (80035c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d108      	bne.n	8003522 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003516:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003528:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4313      	orrs	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a20      	ldr	r2, [pc, #128]	; (80035c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d022      	beq.n	800358c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354e:	d01d      	beq.n	800358c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a1d      	ldr	r2, [pc, #116]	; (80035cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d018      	beq.n	800358c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a1c      	ldr	r2, [pc, #112]	; (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d013      	beq.n	800358c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a1a      	ldr	r2, [pc, #104]	; (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00e      	beq.n	800358c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a15      	ldr	r2, [pc, #84]	; (80035c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d009      	beq.n	800358c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a16      	ldr	r2, [pc, #88]	; (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d004      	beq.n	800358c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a15      	ldr	r2, [pc, #84]	; (80035dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d10c      	bne.n	80035a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003592:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	4313      	orrs	r3, r2
 800359c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	40010000 	.word	0x40010000
 80035c8:	40010400 	.word	0x40010400
 80035cc:	40000400 	.word	0x40000400
 80035d0:	40000800 	.word	0x40000800
 80035d4:	40000c00 	.word	0x40000c00
 80035d8:	40014000 	.word	0x40014000
 80035dc:	40001800 	.word	0x40001800

080035e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e040      	b.n	80036b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fd fa94 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2224      	movs	r2, #36	; 0x24
 8003648:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0201 	bic.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f82c 	bl	80036b8 <UART_SetConfig>
 8003660:	4603      	mov	r3, r0
 8003662:	2b01      	cmp	r3, #1
 8003664:	d101      	bne.n	800366a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e022      	b.n	80036b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fa84 	bl	8003b80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003686:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003696:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fb0b 	bl	8003cc4 <UART_CheckIdleState>
 80036ae:	4603      	mov	r3, r0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4ba6      	ldr	r3, [pc, #664]	; (800397c <UART_SetConfig+0x2c4>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	6979      	ldr	r1, [r7, #20]
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	430a      	orrs	r2, r1
 8003728:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a94      	ldr	r2, [pc, #592]	; (8003980 <UART_SetConfig+0x2c8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d120      	bne.n	8003776 <UART_SetConfig+0xbe>
 8003734:	4b93      	ldr	r3, [pc, #588]	; (8003984 <UART_SetConfig+0x2cc>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b03      	cmp	r3, #3
 8003740:	d816      	bhi.n	8003770 <UART_SetConfig+0xb8>
 8003742:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <UART_SetConfig+0x90>)
 8003744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003748:	08003759 	.word	0x08003759
 800374c:	08003765 	.word	0x08003765
 8003750:	0800375f 	.word	0x0800375f
 8003754:	0800376b 	.word	0x0800376b
 8003758:	2301      	movs	r3, #1
 800375a:	77fb      	strb	r3, [r7, #31]
 800375c:	e150      	b.n	8003a00 <UART_SetConfig+0x348>
 800375e:	2302      	movs	r3, #2
 8003760:	77fb      	strb	r3, [r7, #31]
 8003762:	e14d      	b.n	8003a00 <UART_SetConfig+0x348>
 8003764:	2304      	movs	r3, #4
 8003766:	77fb      	strb	r3, [r7, #31]
 8003768:	e14a      	b.n	8003a00 <UART_SetConfig+0x348>
 800376a:	2308      	movs	r3, #8
 800376c:	77fb      	strb	r3, [r7, #31]
 800376e:	e147      	b.n	8003a00 <UART_SetConfig+0x348>
 8003770:	2310      	movs	r3, #16
 8003772:	77fb      	strb	r3, [r7, #31]
 8003774:	e144      	b.n	8003a00 <UART_SetConfig+0x348>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a83      	ldr	r2, [pc, #524]	; (8003988 <UART_SetConfig+0x2d0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d132      	bne.n	80037e6 <UART_SetConfig+0x12e>
 8003780:	4b80      	ldr	r3, [pc, #512]	; (8003984 <UART_SetConfig+0x2cc>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b0c      	cmp	r3, #12
 800378c:	d828      	bhi.n	80037e0 <UART_SetConfig+0x128>
 800378e:	a201      	add	r2, pc, #4	; (adr r2, 8003794 <UART_SetConfig+0xdc>)
 8003790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003794:	080037c9 	.word	0x080037c9
 8003798:	080037e1 	.word	0x080037e1
 800379c:	080037e1 	.word	0x080037e1
 80037a0:	080037e1 	.word	0x080037e1
 80037a4:	080037d5 	.word	0x080037d5
 80037a8:	080037e1 	.word	0x080037e1
 80037ac:	080037e1 	.word	0x080037e1
 80037b0:	080037e1 	.word	0x080037e1
 80037b4:	080037cf 	.word	0x080037cf
 80037b8:	080037e1 	.word	0x080037e1
 80037bc:	080037e1 	.word	0x080037e1
 80037c0:	080037e1 	.word	0x080037e1
 80037c4:	080037db 	.word	0x080037db
 80037c8:	2300      	movs	r3, #0
 80037ca:	77fb      	strb	r3, [r7, #31]
 80037cc:	e118      	b.n	8003a00 <UART_SetConfig+0x348>
 80037ce:	2302      	movs	r3, #2
 80037d0:	77fb      	strb	r3, [r7, #31]
 80037d2:	e115      	b.n	8003a00 <UART_SetConfig+0x348>
 80037d4:	2304      	movs	r3, #4
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e112      	b.n	8003a00 <UART_SetConfig+0x348>
 80037da:	2308      	movs	r3, #8
 80037dc:	77fb      	strb	r3, [r7, #31]
 80037de:	e10f      	b.n	8003a00 <UART_SetConfig+0x348>
 80037e0:	2310      	movs	r3, #16
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e10c      	b.n	8003a00 <UART_SetConfig+0x348>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a68      	ldr	r2, [pc, #416]	; (800398c <UART_SetConfig+0x2d4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d120      	bne.n	8003832 <UART_SetConfig+0x17a>
 80037f0:	4b64      	ldr	r3, [pc, #400]	; (8003984 <UART_SetConfig+0x2cc>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037fa:	2b30      	cmp	r3, #48	; 0x30
 80037fc:	d013      	beq.n	8003826 <UART_SetConfig+0x16e>
 80037fe:	2b30      	cmp	r3, #48	; 0x30
 8003800:	d814      	bhi.n	800382c <UART_SetConfig+0x174>
 8003802:	2b20      	cmp	r3, #32
 8003804:	d009      	beq.n	800381a <UART_SetConfig+0x162>
 8003806:	2b20      	cmp	r3, #32
 8003808:	d810      	bhi.n	800382c <UART_SetConfig+0x174>
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <UART_SetConfig+0x15c>
 800380e:	2b10      	cmp	r3, #16
 8003810:	d006      	beq.n	8003820 <UART_SetConfig+0x168>
 8003812:	e00b      	b.n	800382c <UART_SetConfig+0x174>
 8003814:	2300      	movs	r3, #0
 8003816:	77fb      	strb	r3, [r7, #31]
 8003818:	e0f2      	b.n	8003a00 <UART_SetConfig+0x348>
 800381a:	2302      	movs	r3, #2
 800381c:	77fb      	strb	r3, [r7, #31]
 800381e:	e0ef      	b.n	8003a00 <UART_SetConfig+0x348>
 8003820:	2304      	movs	r3, #4
 8003822:	77fb      	strb	r3, [r7, #31]
 8003824:	e0ec      	b.n	8003a00 <UART_SetConfig+0x348>
 8003826:	2308      	movs	r3, #8
 8003828:	77fb      	strb	r3, [r7, #31]
 800382a:	e0e9      	b.n	8003a00 <UART_SetConfig+0x348>
 800382c:	2310      	movs	r3, #16
 800382e:	77fb      	strb	r3, [r7, #31]
 8003830:	e0e6      	b.n	8003a00 <UART_SetConfig+0x348>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a56      	ldr	r2, [pc, #344]	; (8003990 <UART_SetConfig+0x2d8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d120      	bne.n	800387e <UART_SetConfig+0x1c6>
 800383c:	4b51      	ldr	r3, [pc, #324]	; (8003984 <UART_SetConfig+0x2cc>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003846:	2bc0      	cmp	r3, #192	; 0xc0
 8003848:	d013      	beq.n	8003872 <UART_SetConfig+0x1ba>
 800384a:	2bc0      	cmp	r3, #192	; 0xc0
 800384c:	d814      	bhi.n	8003878 <UART_SetConfig+0x1c0>
 800384e:	2b80      	cmp	r3, #128	; 0x80
 8003850:	d009      	beq.n	8003866 <UART_SetConfig+0x1ae>
 8003852:	2b80      	cmp	r3, #128	; 0x80
 8003854:	d810      	bhi.n	8003878 <UART_SetConfig+0x1c0>
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <UART_SetConfig+0x1a8>
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d006      	beq.n	800386c <UART_SetConfig+0x1b4>
 800385e:	e00b      	b.n	8003878 <UART_SetConfig+0x1c0>
 8003860:	2300      	movs	r3, #0
 8003862:	77fb      	strb	r3, [r7, #31]
 8003864:	e0cc      	b.n	8003a00 <UART_SetConfig+0x348>
 8003866:	2302      	movs	r3, #2
 8003868:	77fb      	strb	r3, [r7, #31]
 800386a:	e0c9      	b.n	8003a00 <UART_SetConfig+0x348>
 800386c:	2304      	movs	r3, #4
 800386e:	77fb      	strb	r3, [r7, #31]
 8003870:	e0c6      	b.n	8003a00 <UART_SetConfig+0x348>
 8003872:	2308      	movs	r3, #8
 8003874:	77fb      	strb	r3, [r7, #31]
 8003876:	e0c3      	b.n	8003a00 <UART_SetConfig+0x348>
 8003878:	2310      	movs	r3, #16
 800387a:	77fb      	strb	r3, [r7, #31]
 800387c:	e0c0      	b.n	8003a00 <UART_SetConfig+0x348>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a44      	ldr	r2, [pc, #272]	; (8003994 <UART_SetConfig+0x2dc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d125      	bne.n	80038d4 <UART_SetConfig+0x21c>
 8003888:	4b3e      	ldr	r3, [pc, #248]	; (8003984 <UART_SetConfig+0x2cc>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003896:	d017      	beq.n	80038c8 <UART_SetConfig+0x210>
 8003898:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800389c:	d817      	bhi.n	80038ce <UART_SetConfig+0x216>
 800389e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a2:	d00b      	beq.n	80038bc <UART_SetConfig+0x204>
 80038a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a8:	d811      	bhi.n	80038ce <UART_SetConfig+0x216>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <UART_SetConfig+0x1fe>
 80038ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b2:	d006      	beq.n	80038c2 <UART_SetConfig+0x20a>
 80038b4:	e00b      	b.n	80038ce <UART_SetConfig+0x216>
 80038b6:	2300      	movs	r3, #0
 80038b8:	77fb      	strb	r3, [r7, #31]
 80038ba:	e0a1      	b.n	8003a00 <UART_SetConfig+0x348>
 80038bc:	2302      	movs	r3, #2
 80038be:	77fb      	strb	r3, [r7, #31]
 80038c0:	e09e      	b.n	8003a00 <UART_SetConfig+0x348>
 80038c2:	2304      	movs	r3, #4
 80038c4:	77fb      	strb	r3, [r7, #31]
 80038c6:	e09b      	b.n	8003a00 <UART_SetConfig+0x348>
 80038c8:	2308      	movs	r3, #8
 80038ca:	77fb      	strb	r3, [r7, #31]
 80038cc:	e098      	b.n	8003a00 <UART_SetConfig+0x348>
 80038ce:	2310      	movs	r3, #16
 80038d0:	77fb      	strb	r3, [r7, #31]
 80038d2:	e095      	b.n	8003a00 <UART_SetConfig+0x348>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a2f      	ldr	r2, [pc, #188]	; (8003998 <UART_SetConfig+0x2e0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d125      	bne.n	800392a <UART_SetConfig+0x272>
 80038de:	4b29      	ldr	r3, [pc, #164]	; (8003984 <UART_SetConfig+0x2cc>)
 80038e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038ec:	d017      	beq.n	800391e <UART_SetConfig+0x266>
 80038ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038f2:	d817      	bhi.n	8003924 <UART_SetConfig+0x26c>
 80038f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f8:	d00b      	beq.n	8003912 <UART_SetConfig+0x25a>
 80038fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038fe:	d811      	bhi.n	8003924 <UART_SetConfig+0x26c>
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <UART_SetConfig+0x254>
 8003904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003908:	d006      	beq.n	8003918 <UART_SetConfig+0x260>
 800390a:	e00b      	b.n	8003924 <UART_SetConfig+0x26c>
 800390c:	2301      	movs	r3, #1
 800390e:	77fb      	strb	r3, [r7, #31]
 8003910:	e076      	b.n	8003a00 <UART_SetConfig+0x348>
 8003912:	2302      	movs	r3, #2
 8003914:	77fb      	strb	r3, [r7, #31]
 8003916:	e073      	b.n	8003a00 <UART_SetConfig+0x348>
 8003918:	2304      	movs	r3, #4
 800391a:	77fb      	strb	r3, [r7, #31]
 800391c:	e070      	b.n	8003a00 <UART_SetConfig+0x348>
 800391e:	2308      	movs	r3, #8
 8003920:	77fb      	strb	r3, [r7, #31]
 8003922:	e06d      	b.n	8003a00 <UART_SetConfig+0x348>
 8003924:	2310      	movs	r3, #16
 8003926:	77fb      	strb	r3, [r7, #31]
 8003928:	e06a      	b.n	8003a00 <UART_SetConfig+0x348>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a1b      	ldr	r2, [pc, #108]	; (800399c <UART_SetConfig+0x2e4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d138      	bne.n	80039a6 <UART_SetConfig+0x2ee>
 8003934:	4b13      	ldr	r3, [pc, #76]	; (8003984 <UART_SetConfig+0x2cc>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800393e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003942:	d017      	beq.n	8003974 <UART_SetConfig+0x2bc>
 8003944:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003948:	d82a      	bhi.n	80039a0 <UART_SetConfig+0x2e8>
 800394a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800394e:	d00b      	beq.n	8003968 <UART_SetConfig+0x2b0>
 8003950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003954:	d824      	bhi.n	80039a0 <UART_SetConfig+0x2e8>
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <UART_SetConfig+0x2aa>
 800395a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395e:	d006      	beq.n	800396e <UART_SetConfig+0x2b6>
 8003960:	e01e      	b.n	80039a0 <UART_SetConfig+0x2e8>
 8003962:	2300      	movs	r3, #0
 8003964:	77fb      	strb	r3, [r7, #31]
 8003966:	e04b      	b.n	8003a00 <UART_SetConfig+0x348>
 8003968:	2302      	movs	r3, #2
 800396a:	77fb      	strb	r3, [r7, #31]
 800396c:	e048      	b.n	8003a00 <UART_SetConfig+0x348>
 800396e:	2304      	movs	r3, #4
 8003970:	77fb      	strb	r3, [r7, #31]
 8003972:	e045      	b.n	8003a00 <UART_SetConfig+0x348>
 8003974:	2308      	movs	r3, #8
 8003976:	77fb      	strb	r3, [r7, #31]
 8003978:	e042      	b.n	8003a00 <UART_SetConfig+0x348>
 800397a:	bf00      	nop
 800397c:	efff69f3 	.word	0xefff69f3
 8003980:	40011000 	.word	0x40011000
 8003984:	40023800 	.word	0x40023800
 8003988:	40004400 	.word	0x40004400
 800398c:	40004800 	.word	0x40004800
 8003990:	40004c00 	.word	0x40004c00
 8003994:	40005000 	.word	0x40005000
 8003998:	40011400 	.word	0x40011400
 800399c:	40007800 	.word	0x40007800
 80039a0:	2310      	movs	r3, #16
 80039a2:	77fb      	strb	r3, [r7, #31]
 80039a4:	e02c      	b.n	8003a00 <UART_SetConfig+0x348>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a72      	ldr	r2, [pc, #456]	; (8003b74 <UART_SetConfig+0x4bc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d125      	bne.n	80039fc <UART_SetConfig+0x344>
 80039b0:	4b71      	ldr	r3, [pc, #452]	; (8003b78 <UART_SetConfig+0x4c0>)
 80039b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80039be:	d017      	beq.n	80039f0 <UART_SetConfig+0x338>
 80039c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80039c4:	d817      	bhi.n	80039f6 <UART_SetConfig+0x33e>
 80039c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ca:	d00b      	beq.n	80039e4 <UART_SetConfig+0x32c>
 80039cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d0:	d811      	bhi.n	80039f6 <UART_SetConfig+0x33e>
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <UART_SetConfig+0x326>
 80039d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039da:	d006      	beq.n	80039ea <UART_SetConfig+0x332>
 80039dc:	e00b      	b.n	80039f6 <UART_SetConfig+0x33e>
 80039de:	2300      	movs	r3, #0
 80039e0:	77fb      	strb	r3, [r7, #31]
 80039e2:	e00d      	b.n	8003a00 <UART_SetConfig+0x348>
 80039e4:	2302      	movs	r3, #2
 80039e6:	77fb      	strb	r3, [r7, #31]
 80039e8:	e00a      	b.n	8003a00 <UART_SetConfig+0x348>
 80039ea:	2304      	movs	r3, #4
 80039ec:	77fb      	strb	r3, [r7, #31]
 80039ee:	e007      	b.n	8003a00 <UART_SetConfig+0x348>
 80039f0:	2308      	movs	r3, #8
 80039f2:	77fb      	strb	r3, [r7, #31]
 80039f4:	e004      	b.n	8003a00 <UART_SetConfig+0x348>
 80039f6:	2310      	movs	r3, #16
 80039f8:	77fb      	strb	r3, [r7, #31]
 80039fa:	e001      	b.n	8003a00 <UART_SetConfig+0x348>
 80039fc:	2310      	movs	r3, #16
 80039fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a08:	d15b      	bne.n	8003ac2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003a0a:	7ffb      	ldrb	r3, [r7, #31]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d828      	bhi.n	8003a62 <UART_SetConfig+0x3aa>
 8003a10:	a201      	add	r2, pc, #4	; (adr r2, 8003a18 <UART_SetConfig+0x360>)
 8003a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a16:	bf00      	nop
 8003a18:	08003a3d 	.word	0x08003a3d
 8003a1c:	08003a45 	.word	0x08003a45
 8003a20:	08003a4d 	.word	0x08003a4d
 8003a24:	08003a63 	.word	0x08003a63
 8003a28:	08003a53 	.word	0x08003a53
 8003a2c:	08003a63 	.word	0x08003a63
 8003a30:	08003a63 	.word	0x08003a63
 8003a34:	08003a63 	.word	0x08003a63
 8003a38:	08003a5b 	.word	0x08003a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a3c:	f7fe fe72 	bl	8002724 <HAL_RCC_GetPCLK1Freq>
 8003a40:	61b8      	str	r0, [r7, #24]
        break;
 8003a42:	e013      	b.n	8003a6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a44:	f7fe fe82 	bl	800274c <HAL_RCC_GetPCLK2Freq>
 8003a48:	61b8      	str	r0, [r7, #24]
        break;
 8003a4a:	e00f      	b.n	8003a6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a4c:	4b4b      	ldr	r3, [pc, #300]	; (8003b7c <UART_SetConfig+0x4c4>)
 8003a4e:	61bb      	str	r3, [r7, #24]
        break;
 8003a50:	e00c      	b.n	8003a6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a52:	f7fe fd55 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8003a56:	61b8      	str	r0, [r7, #24]
        break;
 8003a58:	e008      	b.n	8003a6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a5e:	61bb      	str	r3, [r7, #24]
        break;
 8003a60:	e004      	b.n	8003a6c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	77bb      	strb	r3, [r7, #30]
        break;
 8003a6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d074      	beq.n	8003b5c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	005a      	lsls	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	085b      	lsrs	r3, r3, #1
 8003a7c:	441a      	add	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	2b0f      	cmp	r3, #15
 8003a8c:	d916      	bls.n	8003abc <UART_SetConfig+0x404>
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a94:	d212      	bcs.n	8003abc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	f023 030f 	bic.w	r3, r3, #15
 8003a9e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	085b      	lsrs	r3, r3, #1
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	89fb      	ldrh	r3, [r7, #14]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	89fa      	ldrh	r2, [r7, #14]
 8003ab8:	60da      	str	r2, [r3, #12]
 8003aba:	e04f      	b.n	8003b5c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	77bb      	strb	r3, [r7, #30]
 8003ac0:	e04c      	b.n	8003b5c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ac2:	7ffb      	ldrb	r3, [r7, #31]
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d828      	bhi.n	8003b1a <UART_SetConfig+0x462>
 8003ac8:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <UART_SetConfig+0x418>)
 8003aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ace:	bf00      	nop
 8003ad0:	08003af5 	.word	0x08003af5
 8003ad4:	08003afd 	.word	0x08003afd
 8003ad8:	08003b05 	.word	0x08003b05
 8003adc:	08003b1b 	.word	0x08003b1b
 8003ae0:	08003b0b 	.word	0x08003b0b
 8003ae4:	08003b1b 	.word	0x08003b1b
 8003ae8:	08003b1b 	.word	0x08003b1b
 8003aec:	08003b1b 	.word	0x08003b1b
 8003af0:	08003b13 	.word	0x08003b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af4:	f7fe fe16 	bl	8002724 <HAL_RCC_GetPCLK1Freq>
 8003af8:	61b8      	str	r0, [r7, #24]
        break;
 8003afa:	e013      	b.n	8003b24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003afc:	f7fe fe26 	bl	800274c <HAL_RCC_GetPCLK2Freq>
 8003b00:	61b8      	str	r0, [r7, #24]
        break;
 8003b02:	e00f      	b.n	8003b24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b04:	4b1d      	ldr	r3, [pc, #116]	; (8003b7c <UART_SetConfig+0x4c4>)
 8003b06:	61bb      	str	r3, [r7, #24]
        break;
 8003b08:	e00c      	b.n	8003b24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b0a:	f7fe fcf9 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8003b0e:	61b8      	str	r0, [r7, #24]
        break;
 8003b10:	e008      	b.n	8003b24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b16:	61bb      	str	r3, [r7, #24]
        break;
 8003b18:	e004      	b.n	8003b24 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	77bb      	strb	r3, [r7, #30]
        break;
 8003b22:	bf00      	nop
    }

    if (pclk != 0U)
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d018      	beq.n	8003b5c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	085a      	lsrs	r2, r3, #1
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	441a      	add	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	2b0f      	cmp	r3, #15
 8003b42:	d909      	bls.n	8003b58 <UART_SetConfig+0x4a0>
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b4a:	d205      	bcs.n	8003b58 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60da      	str	r2, [r3, #12]
 8003b56:	e001      	b.n	8003b5c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003b68:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3720      	adds	r7, #32
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40007c00 	.word	0x40007c00
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	00f42400 	.word	0x00f42400

08003b80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01a      	beq.n	8003c96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c7e:	d10a      	bne.n	8003c96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	605a      	str	r2, [r3, #4]
  }
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cd4:	f7fd f8e4 	bl	8000ea0 <HAL_GetTick>
 8003cd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d10e      	bne.n	8003d06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ce8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f81b 	bl	8003d32 <UART_WaitOnFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e011      	b.n	8003d2a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b09c      	sub	sp, #112	; 0x70
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	603b      	str	r3, [r7, #0]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d42:	e0a7      	b.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4a:	f000 80a3 	beq.w	8003e94 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4e:	f7fd f8a7 	bl	8000ea0 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d302      	bcc.n	8003d64 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d13f      	bne.n	8003de4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d6c:	e853 3f00 	ldrex	r3, [r3]
 8003d70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d78:	667b      	str	r3, [r7, #100]	; 0x64
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d84:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d8a:	e841 2300 	strex	r3, r2, [r1]
 8003d8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1e6      	bne.n	8003d64 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3308      	adds	r3, #8
 8003d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da0:	e853 3f00 	ldrex	r3, [r3]
 8003da4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	663b      	str	r3, [r7, #96]	; 0x60
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3308      	adds	r3, #8
 8003db4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003db6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003db8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dbe:	e841 2300 	strex	r3, r2, [r1]
 8003dc2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1e5      	bne.n	8003d96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e068      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d050      	beq.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e00:	d148      	bne.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e0a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e14:	e853 3f00 	ldrex	r3, [r3]
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e2c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e32:	e841 2300 	strex	r3, r2, [r1]
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1e6      	bne.n	8003e0c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3308      	adds	r3, #8
 8003e44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	e853 3f00 	ldrex	r3, [r3]
 8003e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f023 0301 	bic.w	r3, r3, #1
 8003e54:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3308      	adds	r3, #8
 8003e5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e5e:	623a      	str	r2, [r7, #32]
 8003e60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e62:	69f9      	ldr	r1, [r7, #28]
 8003e64:	6a3a      	ldr	r2, [r7, #32]
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e5      	bne.n	8003e3e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e010      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69da      	ldr	r2, [r3, #28]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2301      	moveq	r3, #1
 8003ea6:	2300      	movne	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	461a      	mov	r2, r3
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	f43f af48 	beq.w	8003d44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3770      	adds	r7, #112	; 0x70
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	f107 001c 	add.w	r0, r7, #28
 8003ece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d120      	bne.n	8003f1a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003edc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	4b20      	ldr	r3, [pc, #128]	; (8003f6c <USB_CoreInit+0xac>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d105      	bne.n	8003f0e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fa96 	bl	8004440 <USB_CoreReset>
 8003f14:	4603      	mov	r3, r0
 8003f16:	73fb      	strb	r3, [r7, #15]
 8003f18:	e010      	b.n	8003f3c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fa8a 	bl	8004440 <USB_CoreReset>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d10b      	bne.n	8003f5a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f043 0206 	orr.w	r2, r3, #6
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f043 0220 	orr.w	r2, r3, #32
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f66:	b004      	add	sp, #16
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	ffbdffbf 	.word	0xffbdffbf

08003f70 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f023 0201 	bic.w	r2, r3, #1
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003fae:	78fb      	ldrb	r3, [r7, #3]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d115      	bne.n	8003fe0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	f7fc ff79 	bl	8000eb8 <HAL_Delay>
      ms++;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fa29 	bl	8004424 <USB_GetMode>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d01e      	beq.n	8004016 <USB_SetCurrentMode+0x84>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b31      	cmp	r3, #49	; 0x31
 8003fdc:	d9f0      	bls.n	8003fc0 <USB_SetCurrentMode+0x2e>
 8003fde:	e01a      	b.n	8004016 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d115      	bne.n	8004012 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ff2:	2001      	movs	r0, #1
 8003ff4:	f7fc ff60 	bl	8000eb8 <HAL_Delay>
      ms++;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fa10 	bl	8004424 <USB_GetMode>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d005      	beq.n	8004016 <USB_SetCurrentMode+0x84>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b31      	cmp	r3, #49	; 0x31
 800400e:	d9f0      	bls.n	8003ff2 <USB_SetCurrentMode+0x60>
 8004010:	e001      	b.n	8004016 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e005      	b.n	8004022 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b32      	cmp	r3, #50	; 0x32
 800401a:	d101      	bne.n	8004020 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800402c:	b084      	sub	sp, #16
 800402e:	b580      	push	{r7, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800403a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	e009      	b.n	8004060 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	3340      	adds	r3, #64	; 0x40
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	2200      	movs	r2, #0
 8004058:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	3301      	adds	r3, #1
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b0e      	cmp	r3, #14
 8004064:	d9f2      	bls.n	800404c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004068:	2b00      	cmp	r3, #0
 800406a:	d11c      	bne.n	80040a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800407a:	f043 0302 	orr.w	r3, r3, #2
 800407e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004084:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	e005      	b.n	80040b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040b8:	461a      	mov	r2, r3
 80040ba:	2300      	movs	r3, #0
 80040bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c4:	4619      	mov	r1, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040cc:	461a      	mov	r2, r3
 80040ce:	680b      	ldr	r3, [r1, #0]
 80040d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d10c      	bne.n	80040f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d104      	bne.n	80040e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040de:	2100      	movs	r1, #0
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f965 	bl	80043b0 <USB_SetDevSpeed>
 80040e6:	e008      	b.n	80040fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040e8:	2101      	movs	r1, #1
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f960 	bl	80043b0 <USB_SetDevSpeed>
 80040f0:	e003      	b.n	80040fa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040f2:	2103      	movs	r1, #3
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f95b 	bl	80043b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040fa:	2110      	movs	r1, #16
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f8f3 	bl	80042e8 <USB_FlushTxFifo>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f91f 	bl	8004350 <USB_FlushRxFifo>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004122:	461a      	mov	r2, r3
 8004124:	2300      	movs	r3, #0
 8004126:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412e:	461a      	mov	r2, r3
 8004130:	2300      	movs	r3, #0
 8004132:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413a:	461a      	mov	r2, r3
 800413c:	2300      	movs	r3, #0
 800413e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004140:	2300      	movs	r3, #0
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	e043      	b.n	80041ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800415c:	d118      	bne.n	8004190 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4413      	add	r3, r2
 800416c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004170:	461a      	mov	r2, r3
 8004172:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004176:	6013      	str	r3, [r2, #0]
 8004178:	e013      	b.n	80041a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004186:	461a      	mov	r2, r3
 8004188:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	e008      	b.n	80041a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419c:	461a      	mov	r2, r3
 800419e:	2300      	movs	r3, #0
 80041a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ae:	461a      	mov	r2, r3
 80041b0:	2300      	movs	r3, #0
 80041b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c0:	461a      	mov	r2, r3
 80041c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	3301      	adds	r3, #1
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d3b7      	bcc.n	8004146 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	e043      	b.n	8004264 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041f2:	d118      	bne.n	8004226 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10a      	bne.n	8004210 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4413      	add	r3, r2
 8004202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004206:	461a      	mov	r2, r3
 8004208:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	e013      	b.n	8004238 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4413      	add	r3, r2
 8004218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421c:	461a      	mov	r2, r3
 800421e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	e008      	b.n	8004238 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004232:	461a      	mov	r2, r3
 8004234:	2300      	movs	r3, #0
 8004236:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004244:	461a      	mov	r2, r3
 8004246:	2300      	movs	r3, #0
 8004248:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004256:	461a      	mov	r2, r3
 8004258:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800425c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	3301      	adds	r3, #1
 8004262:	613b      	str	r3, [r7, #16]
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	429a      	cmp	r2, r3
 800426a:	d3b7      	bcc.n	80041dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800427a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800427e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800428c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	2b00      	cmp	r3, #0
 8004292:	d105      	bne.n	80042a0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	f043 0210 	orr.w	r2, r3, #16
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699a      	ldr	r2, [r3, #24]
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <USB_DevInit+0x2b4>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80042ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	f043 0208 	orr.w	r2, r3, #8
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80042be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d105      	bne.n	80042d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <USB_DevInit+0x2b8>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042dc:	b004      	add	sp, #16
 80042de:	4770      	bx	lr
 80042e0:	803c3800 	.word	0x803c3800
 80042e4:	40000004 	.word	0x40000004

080042e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3301      	adds	r3, #1
 80042fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4a13      	ldr	r2, [pc, #76]	; (800434c <USB_FlushTxFifo+0x64>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d901      	bls.n	8004308 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e01b      	b.n	8004340 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	daf2      	bge.n	80042f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	019b      	lsls	r3, r3, #6
 8004318:	f043 0220 	orr.w	r2, r3, #32
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	3301      	adds	r3, #1
 8004324:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4a08      	ldr	r2, [pc, #32]	; (800434c <USB_FlushTxFifo+0x64>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e006      	b.n	8004340 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b20      	cmp	r3, #32
 800433c:	d0f0      	beq.n	8004320 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	00030d40 	.word	0x00030d40

08004350 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	3301      	adds	r3, #1
 8004360:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4a11      	ldr	r2, [pc, #68]	; (80043ac <USB_FlushRxFifo+0x5c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d901      	bls.n	800436e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e018      	b.n	80043a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	daf2      	bge.n	800435c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2210      	movs	r2, #16
 800437e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3301      	adds	r3, #1
 8004384:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4a08      	ldr	r2, [pc, #32]	; (80043ac <USB_FlushRxFifo+0x5c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e006      	b.n	80043a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f003 0310 	and.w	r3, r3, #16
 800439a:	2b10      	cmp	r3, #16
 800439c:	d0f0      	beq.n	8004380 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	00030d40 	.word	0x00030d40

080043b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	68f9      	ldr	r1, [r7, #12]
 80043cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043d0:	4313      	orrs	r3, r2
 80043d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b085      	sub	sp, #20
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043fc:	f023 0303 	bic.w	r3, r3, #3
 8004400:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004410:	f043 0302 	orr.w	r3, r3, #2
 8004414:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f003 0301 	and.w	r3, r3, #1
}
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	3301      	adds	r3, #1
 8004450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4a13      	ldr	r2, [pc, #76]	; (80044a4 <USB_CoreReset+0x64>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d901      	bls.n	800445e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e01b      	b.n	8004496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	2b00      	cmp	r3, #0
 8004464:	daf2      	bge.n	800444c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f043 0201 	orr.w	r2, r3, #1
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3301      	adds	r3, #1
 800447a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4a09      	ldr	r2, [pc, #36]	; (80044a4 <USB_CoreReset+0x64>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d901      	bls.n	8004488 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e006      	b.n	8004496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b01      	cmp	r3, #1
 8004492:	d0f0      	beq.n	8004476 <USB_CoreReset+0x36>

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	00030d40 	.word	0x00030d40

080044a8 <memset>:
 80044a8:	4402      	add	r2, r0
 80044aa:	4603      	mov	r3, r0
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d100      	bne.n	80044b2 <memset+0xa>
 80044b0:	4770      	bx	lr
 80044b2:	f803 1b01 	strb.w	r1, [r3], #1
 80044b6:	e7f9      	b.n	80044ac <memset+0x4>

080044b8 <__libc_init_array>:
 80044b8:	b570      	push	{r4, r5, r6, lr}
 80044ba:	4d0d      	ldr	r5, [pc, #52]	; (80044f0 <__libc_init_array+0x38>)
 80044bc:	4c0d      	ldr	r4, [pc, #52]	; (80044f4 <__libc_init_array+0x3c>)
 80044be:	1b64      	subs	r4, r4, r5
 80044c0:	10a4      	asrs	r4, r4, #2
 80044c2:	2600      	movs	r6, #0
 80044c4:	42a6      	cmp	r6, r4
 80044c6:	d109      	bne.n	80044dc <__libc_init_array+0x24>
 80044c8:	4d0b      	ldr	r5, [pc, #44]	; (80044f8 <__libc_init_array+0x40>)
 80044ca:	4c0c      	ldr	r4, [pc, #48]	; (80044fc <__libc_init_array+0x44>)
 80044cc:	f000 f818 	bl	8004500 <_init>
 80044d0:	1b64      	subs	r4, r4, r5
 80044d2:	10a4      	asrs	r4, r4, #2
 80044d4:	2600      	movs	r6, #0
 80044d6:	42a6      	cmp	r6, r4
 80044d8:	d105      	bne.n	80044e6 <__libc_init_array+0x2e>
 80044da:	bd70      	pop	{r4, r5, r6, pc}
 80044dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e0:	4798      	blx	r3
 80044e2:	3601      	adds	r6, #1
 80044e4:	e7ee      	b.n	80044c4 <__libc_init_array+0xc>
 80044e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ea:	4798      	blx	r3
 80044ec:	3601      	adds	r6, #1
 80044ee:	e7f2      	b.n	80044d6 <__libc_init_array+0x1e>
 80044f0:	08004538 	.word	0x08004538
 80044f4:	08004538 	.word	0x08004538
 80044f8:	08004538 	.word	0x08004538
 80044fc:	0800453c 	.word	0x0800453c

08004500 <_init>:
 8004500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004502:	bf00      	nop
 8004504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004506:	bc08      	pop	{r3}
 8004508:	469e      	mov	lr, r3
 800450a:	4770      	bx	lr

0800450c <_fini>:
 800450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450e:	bf00      	nop
 8004510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004512:	bc08      	pop	{r3}
 8004514:	469e      	mov	lr, r3
 8004516:	4770      	bx	lr
